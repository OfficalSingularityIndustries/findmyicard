
/home/hunt3r/findmyicard/findmyicard/findicard_board/target/findicard_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004628  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001870c  2**0
                  CONTENTS
  3 .data         000000a0  2003e208  000d8640  0000e208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000548  2003e2a8  2003e2a8  0001e2a8  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d86e0  000d86e0  000186e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d8708  000d8708  00018708  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000e1147  00000000  00000000  0001870c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010894  00000000  00000000  000f9853  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000022d0  00000000  00000000  0010a0e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00032fea  00000000  00000000  0010c3b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00025f82  00000000  00000000  0013f3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00115316  00000000  00000000  00165323  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001d788  00000000  00000000  0027a639  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000045c0  00000000  00000000  00297dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000ccb0  00000000  00000000  0029c384  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	0c 81 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa81 	bl	d6534 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa86 	bl	d654a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e208 	.word	0x2003e208
   d4048:	000d8640 	.word	0x000d8640
   d404c:	2003e2a8 	.word	0x2003e2a8
   d4050:	2003e2a8 	.word	0x2003e2a8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fa63 	bl	d5524 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8634 	.word	0x000d8634
   d4080:	000d85f4 	.word	0x000d85f4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f827 	bl	d40dc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 ba15 	b.w	d54c0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbbd 	b.w	d4814 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbc3 	b.w	d4824 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbc1 	b.w	d4824 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_Z16locationCallbackfff>:
  // Scan for visible networks and publish to the cloud every 30 seconds
  // Pass the returned location to be handled by the locationCallback() method
  locator.withSubscribe(locationCallback).withLocatePeriodic(30);
}

void locationCallback(float lat, float lon, float accuracy) {
   d40b2:	4770      	bx	lr

000d40b4 <setup>:
 */
#include <google-maps-device-locator.h>

GoogleMapsDeviceLocator locator;

void setup() {
   d40b4:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40b6:	f000 fea5 	bl	d4e04 <_Z16_fetch_usbserialv>
   d40ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40be:	f000 fe95 	bl	d4dec <_ZN9USBSerial5beginEl>
  // Scan for visible networks and publish to the cloud every 30 seconds
  // Pass the returned location to be handled by the locationCallback() method
  locator.withSubscribe(locationCallback).withLocatePeriodic(30);
   d40c2:	4904      	ldr	r1, [pc, #16]	; (d40d4 <setup+0x20>)
   d40c4:	4804      	ldr	r0, [pc, #16]	; (d40d8 <setup+0x24>)
   d40c6:	f000 f9d3 	bl	d4470 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
   d40ca:	211e      	movs	r1, #30
}
   d40cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup() {
  Serial.begin(9600);
  // Scan for visible networks and publish to the cloud every 30 seconds
  // Pass the returned location to be handled by the locationCallback() method
  locator.withSubscribe(locationCallback).withLocatePeriodic(30);
   d40d0:	f000 b90e 	b.w	d42f0 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>
   d40d4:	000d40b3 	.word	0x000d40b3
   d40d8:	2003e2ac 	.word	0x2003e2ac

000d40dc <loop>:
  // - Longitude
  // - Accuracy of estimated location (in meters)
}

void loop() {
  locator.loop();
   d40dc:	4801      	ldr	r0, [pc, #4]	; (d40e4 <loop+0x8>)
   d40de:	f000 b979 	b.w	d43d4 <_ZN23GoogleMapsDeviceLocator4loopEv>
   d40e2:	bf00      	nop
   d40e4:	2003e2ac 	.word	0x2003e2ac

000d40e8 <_GLOBAL__sub_I_locator>:
   d40e8:	b510      	push	{r4, lr}
 * Author: Amari Matthews
 * Date:07/19/2019
 */
#include <google-maps-device-locator.h>

GoogleMapsDeviceLocator locator;
   d40ea:	4c06      	ldr	r4, [pc, #24]	; (d4104 <_GLOBAL__sub_I_locator+0x1c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40ec:	f000 fad6 	bl	d469c <HAL_Pin_Map>
   d40f0:	4620      	mov	r0, r4
   d40f2:	f000 f8e3 	bl	d42bc <_ZN23GoogleMapsDeviceLocatorC1Ev>
   d40f6:	4620      	mov	r0, r4
   d40f8:	4a03      	ldr	r2, [pc, #12]	; (d4108 <_GLOBAL__sub_I_locator+0x20>)
   d40fa:	4904      	ldr	r1, [pc, #16]	; (d410c <_GLOBAL__sub_I_locator+0x24>)
  // - Accuracy of estimated location (in meters)
}

void loop() {
  locator.loop();
   d40fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * Author: Amari Matthews
 * Date:07/19/2019
 */
#include <google-maps-device-locator.h>

GoogleMapsDeviceLocator locator;
   d4100:	f001 bbc6 	b.w	d5890 <__aeabi_atexit>
   d4104:	2003e2ac 	.word	0x2003e2ac
   d4108:	2003e2a8 	.word	0x2003e2a8
   d410c:	000d4135 	.word	0x000d4135

000d4110 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvS1_S1_EEPS5_St12_PlaceholderILi1EESA_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SJ_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4110:	b430      	push	{r4, r5}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4112:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4114:	6812      	ldr	r2, [r2, #0]
   d4116:	6858      	ldr	r0, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4118:	689c      	ldr	r4, [r3, #8]
   d411a:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d411c:	6809      	ldr	r1, [r1, #0]
   d411e:	f010 0f01 	tst.w	r0, #1
   d4122:	ea4f 0060 	mov.w	r0, r0, asr #1
   d4126:	bf18      	it	ne
   d4128:	5825      	ldrne	r5, [r4, r0]
   d412a:	4420      	add	r0, r4
   d412c:	bf18      	it	ne
   d412e:	58eb      	ldrne	r3, [r5, r3]
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d4130:	bc30      	pop	{r4, r5}
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4132:	4718      	bx	r3

000d4134 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d4134:	b510      	push	{r4, lr}
   d4136:	4b04      	ldr	r3, [pc, #16]	; (d4148 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x14>)
   d4138:	4604      	mov	r4, r0
   d413a:	f840 3b0c 	str.w	r3, [r0], #12
   d413e:	f001 fae1 	bl	d5704 <_ZN6StringD1Ev>

}
   d4142:	4620      	mov	r0, r4
   d4144:	bd10      	pop	{r4, pc}
   d4146:	bf00      	nop
   d4148:	000d8128 	.word	0x000d8128

000d414c <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d414c:	b510      	push	{r4, lr}
   d414e:	4604      	mov	r4, r0

}
   d4150:	f7ff fff0 	bl	d4134 <_ZN23GoogleMapsDeviceLocatorD1Ev>
   d4154:	4620      	mov	r0, r4
   d4156:	212c      	movs	r1, #44	; 0x2c
   d4158:	f001 fb9f 	bl	d589a <_ZdlPvj>
   d415c:	4620      	mov	r0, r4
   d415e:	bd10      	pop	{r4, pc}

000d4160 <_ZL16wifiScanCallbackP15WiFiAccessPointPv>:



#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
   d4160:	b530      	push	{r4, r5, lr}
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
   d4162:	4d1b      	ldr	r5, [pc, #108]	; (d41d0 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x70>)
   d4164:	4c1b      	ldr	r4, [pc, #108]	; (d41d4 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x74>)



#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
   d4166:	4602      	mov	r2, r0
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
   d4168:	6828      	ldr	r0, [r5, #0]
   d416a:	1a24      	subs	r4, r4, r0
	if (spaceLeft < 30) {
   d416c:	2c1d      	cmp	r4, #29



#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
   d416e:	b089      	sub	sp, #36	; 0x24
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
	if (spaceLeft < 30) {
   d4170:	d92c      	bls.n	d41cc <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>

	int sizeNeeded = snprintf(requestCur, spaceLeft,
			"%s{\"m\":\"%02x:%02x:%02x:%02x:%02x:%02x\",\"s\":%d,\"c\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
   d4172:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
	if (spaceLeft < 30) {
		return;
	}

	int sizeNeeded = snprintf(requestCur, spaceLeft,
   d4176:	f810 1c01 	ldrb.w	r1, [r0, #-1]
			"%s{\"m\":\"%02x:%02x:%02x:%02x:%02x:%02x\",\"s\":%d,\"c\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
   d417a:	9307      	str	r3, [sp, #28]
   d417c:	6b53      	ldr	r3, [r2, #52]	; 0x34
   d417e:	9306      	str	r3, [sp, #24]
   d4180:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
   d4184:	9305      	str	r3, [sp, #20]
   d4186:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
   d418a:	9304      	str	r3, [sp, #16]
   d418c:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
   d4190:	9303      	str	r3, [sp, #12]
   d4192:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
   d4196:	9302      	str	r3, [sp, #8]
   d4198:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
   d419c:	9301      	str	r3, [sp, #4]
   d419e:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
   d41a2:	9300      	str	r3, [sp, #0]
   d41a4:	4a0c      	ldr	r2, [pc, #48]	; (d41d8 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x78>)
   d41a6:	4b0d      	ldr	r3, [pc, #52]	; (d41dc <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x7c>)
   d41a8:	295b      	cmp	r1, #91	; 0x5b
   d41aa:	bf18      	it	ne
   d41ac:	4613      	movne	r3, r2
   d41ae:	4a0c      	ldr	r2, [pc, #48]	; (d41e0 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x80>)
   d41b0:	4621      	mov	r1, r4
   d41b2:	f000 fb47 	bl	d4844 <snprintf>
	if (sizeNeeded > 0 && sizeNeeded < (int)spaceLeft) {
   d41b6:	2800      	cmp	r0, #0
   d41b8:	dd08      	ble.n	d41cc <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>
   d41ba:	4284      	cmp	r4, r0
   d41bc:	dd06      	ble.n	d41cc <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d41be:	682b      	ldr	r3, [r5, #0]
		numAdded++;
   d41c0:	4a08      	ldr	r2, [pc, #32]	; (d41e4 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x84>)
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded > 0 && sizeNeeded < (int)spaceLeft) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d41c2:	4418      	add	r0, r3
		numAdded++;
   d41c4:	6813      	ldr	r3, [r2, #0]
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded > 0 && sizeNeeded < (int)spaceLeft) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d41c6:	6028      	str	r0, [r5, #0]
		numAdded++;
   d41c8:	3301      	adds	r3, #1
   d41ca:	6013      	str	r3, [r2, #0]
	}
}
   d41cc:	b009      	add	sp, #36	; 0x24
   d41ce:	bd30      	pop	{r4, r5, pc}
   d41d0:	2003e3e0 	.word	0x2003e3e0
   d41d4:	2003e3da 	.word	0x2003e3da
   d41d8:	000d8130 	.word	0x000d8130
   d41dc:	000d832d 	.word	0x000d832d
   d41e0:	000d8132 	.word	0x000d8132
   d41e4:	2003e2d8 	.word	0x2003e2d8

000d41e8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d41e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
   d41ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d41ee:	b085      	sub	sp, #20
   d41f0:	4604      	mov	r4, r0
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
   d41f2:	2b00      	cmp	r3, #0
   d41f4:	d037      	beq.n	d4266 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x7e>
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
   d41f6:	4610      	mov	r0, r2
   d41f8:	f002 f9e0 	bl	d65bc <strdup>
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
   d41fc:	aa03      	add	r2, sp, #12
   d41fe:	491b      	ldr	r1, [pc, #108]	; (d426c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
   d4200:	4605      	mov	r5, r0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
   d4202:	f003 f864 	bl	d72ce <strtok_r>
		if (part) {
   d4206:	b358      	cbz	r0, d4260 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
			lat = atof(part);
   d4208:	f002 f97e 	bl	d6508 <atof>
			part = strtok_r(NULL, ",", &end);
   d420c:	aa03      	add	r2, sp, #12
   d420e:	4917      	ldr	r1, [pc, #92]	; (d426c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
   d4210:	2000      	movs	r0, #0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
   d4212:	ec57 6b10 	vmov	r6, r7, d0
			part = strtok_r(NULL, ",", &end);
   d4216:	f003 f85a 	bl	d72ce <strtok_r>
			if (part) {
   d421a:	b308      	cbz	r0, d4260 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
				lon = atof(part);
   d421c:	f002 f974 	bl	d6508 <atof>
				part = strtok_r(NULL, ",", &end);
   d4220:	aa03      	add	r2, sp, #12
   d4222:	4912      	ldr	r1, [pc, #72]	; (d426c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
   d4224:	2000      	movs	r0, #0
		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
			part = strtok_r(NULL, ",", &end);
			if (part) {
				lon = atof(part);
   d4226:	ec59 8b10 	vmov	r8, r9, d0
				part = strtok_r(NULL, ",", &end);
   d422a:	f003 f850 	bl	d72ce <strtok_r>
				if (part) {
   d422e:	b1b8      	cbz	r0, d4260 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
					accuracy = atof(part);
   d4230:	f002 f96a 	bl	d6508 <atof>

					(*callback)(lat, lon, accuracy);
   d4234:	ec51 0b10 	vmov	r0, r1, d0
   d4238:	f002 f916 	bl	d6468 <__aeabi_d2f>
   d423c:	4649      	mov	r1, r9
   d423e:	9001      	str	r0, [sp, #4]
   d4240:	4640      	mov	r0, r8
   d4242:	f002 f911 	bl	d6468 <__aeabi_d2f>
   d4246:	4639      	mov	r1, r7
   d4248:	9000      	str	r0, [sp, #0]
   d424a:	4630      	mov	r0, r6
   d424c:	f002 f90c 	bl	d6468 <__aeabi_d2f>
   d4250:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d4252:	ed9d 1a01 	vldr	s2, [sp, #4]
   d4256:	eddd 0a00 	vldr	s1, [sp]
   d425a:	ee00 0a10 	vmov	s0, r0
   d425e:	4798      	blx	r3
				}
			}
		}

		free(mutableCopy);
   d4260:	4628      	mov	r0, r5
   d4262:	f000 fadf 	bl	d4824 <free>
	}
}
   d4266:	b005      	add	sp, #20
   d4268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d426c:	000d8130 	.word	0x000d8130

000d4270 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4270:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4272:	b538      	push	{r3, r4, r5, lr}
   d4274:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4276:	d005      	beq.n	d4284 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x14>
   d4278:	2a03      	cmp	r2, #3
   d427a:	d00f      	beq.n	d429c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x2c>
   d427c:	2a01      	cmp	r2, #1
   d427e:	d111      	bne.n	d42a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4280:	680b      	ldr	r3, [r1, #0]
   d4282:	e009      	b.n	d4298 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4284:	200c      	movs	r0, #12
   d4286:	680d      	ldr	r5, [r1, #0]
   d4288:	f7ff ff05 	bl	d4096 <_Znwj>
   d428c:	4603      	mov	r3, r0
   d428e:	b118      	cbz	r0, d4298 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
   d4290:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4294:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4298:	6023      	str	r3, [r4, #0]
   d429a:	e003      	b.n	d42a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d429c:	210c      	movs	r1, #12
   d429e:	6800      	ldr	r0, [r0, #0]
   d42a0:	f001 fafb 	bl	d589a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d42a4:	2000      	movs	r0, #0
   d42a6:	bd38      	pop	{r3, r4, r5, pc}

000d42a8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42a8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d42aa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42ac:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d42ae:	b113      	cbz	r3, d42b6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42b0:	2203      	movs	r2, #3
   d42b2:	4601      	mov	r1, r0
   d42b4:	4798      	blx	r3
    }
   d42b6:	4620      	mov	r0, r4
   d42b8:	bd10      	pop	{r4, pc}
	...

000d42bc <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d42bc:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d42be:	4b0a      	ldr	r3, [pc, #40]	; (d42e8 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x2c>)
   d42c0:	6003      	str	r3, [r0, #0]
   d42c2:	2500      	movs	r5, #0
   d42c4:	f242 7310 	movw	r3, #10000	; 0x2710

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d42c8:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d42ca:	6045      	str	r5, [r0, #4]
   d42cc:	6083      	str	r3, [r0, #8]
   d42ce:	4907      	ldr	r1, [pc, #28]	; (d42ec <_ZN23GoogleMapsDeviceLocatorC1Ev+0x30>)
   d42d0:	300c      	adds	r0, #12
   d42d2:	f001 fa5e 	bl	d5792 <_ZN6StringC1EPK19__FlashStringHelper>
   d42d6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d42da:	61e5      	str	r5, [r4, #28]
   d42dc:	6225      	str	r5, [r4, #32]
   d42de:	6265      	str	r5, [r4, #36]	; 0x24
   d42e0:	62a3      	str	r3, [r4, #40]	; 0x28

}
   d42e2:	4620      	mov	r0, r4
   d42e4:	bd38      	pop	{r3, r4, r5, pc}
   d42e6:	bf00      	nop
   d42e8:	000d8128 	.word	0x000d8128
   d42ec:	000d8168 	.word	0x000d8168

000d42f0 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
	locatorMode = LOCATOR_MODE_ONCE;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
   d42f0:	2302      	movs	r3, #2
   d42f2:	6043      	str	r3, [r0, #4]
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
   d42f4:	2904      	cmp	r1, #4
   d42f6:	bf98      	it	ls
   d42f8:	2105      	movls	r1, #5
	}
	periodMs = secondsPeriodic * 1000;
   d42fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d42fe:	4359      	muls	r1, r3
   d4300:	6081      	str	r1, [r0, #8]
	return *this;
}
   d4302:	4770      	bx	lr

000d4304 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>:
		numAdded++;
	}
}


const char *GoogleMapsDeviceLocator::wifiScan() {
   d4304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	requestCur = requestBuf;
	numAdded = 0;

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4306:	4c10      	ldr	r4, [pc, #64]	; (d4348 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)


const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;
   d4308:	4f10      	ldr	r7, [pc, #64]	; (d434c <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x48>)

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
	*requestCur++ = '[';
   d430a:	4e11      	ldr	r6, [pc, #68]	; (d4350 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x4c>)
const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d430c:	4911      	ldr	r1, [pc, #68]	; (d4354 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x50>)


const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;
   d430e:	2500      	movs	r5, #0

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4310:	4620      	mov	r0, r4


const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;
   d4312:	603d      	str	r5, [r7, #0]

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4314:	f002 f94a 	bl	d65ac <strcpy>
	*requestCur++ = '[';
   d4318:	f104 030b 	add.w	r3, r4, #11
   d431c:	6033      	str	r3, [r6, #0]
   d431e:	235b      	movs	r3, #91	; 0x5b
   d4320:	72a3      	strb	r3, [r4, #10]
    {
        setIPAddressSource(DYNAMIC_IP);
    }

    int scan(wlan_scan_result_t callback, void* cookie=NULL) {
        return wlan_scan(callback, cookie);
   d4322:	4629      	mov	r1, r5
   d4324:	480c      	ldr	r0, [pc, #48]	; (d4358 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x54>)
   d4326:	f000 f8f9 	bl	d451c <wlan_scan>

	WiFi.scan(wifiScanCallback);

	*requestCur++ = ']';
   d432a:	6833      	ldr	r3, [r6, #0]
   d432c:	225d      	movs	r2, #93	; 0x5d
   d432e:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
   d4330:	227d      	movs	r2, #125	; 0x7d
   d4332:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
   d4334:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
   d4336:	70dd      	strb	r5, [r3, #3]
   d4338:	1d1a      	adds	r2, r3, #4

	if (numAdded == 0) {
   d433a:	683b      	ldr	r3, [r7, #0]
	WiFi.scan(wifiScanCallback);

	*requestCur++ = ']';
	*requestCur++ = '}';
	*requestCur++ = '}';
	*requestCur++ = 0;
   d433c:	6032      	str	r2, [r6, #0]

	if (numAdded == 0) {
   d433e:	b903      	cbnz	r3, d4342 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x3e>
		requestBuf[0] = 0;
   d4340:	7023      	strb	r3, [r4, #0]
	}

	return requestBuf;
}
   d4342:	4801      	ldr	r0, [pc, #4]	; (d4348 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)
   d4344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4346:	bf00      	nop
   d4348:	2003e2dd 	.word	0x2003e2dd
   d434c:	2003e2d8 	.word	0x2003e2d8
   d4350:	2003e3e0 	.word	0x2003e3e0
   d4354:	000d8176 	.word	0x000d8176
   d4358:	000d4161 	.word	0x000d4161

000d435c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
	return cellularScan();
#endif
}


void GoogleMapsDeviceLocator::publishLocation() {
   d435c:	b530      	push	{r4, r5, lr}
   d435e:	b085      	sub	sp, #20
   d4360:	4605      	mov	r5, r0

	Serial.println("publishLocation");
   d4362:	f000 fd4f 	bl	d4e04 <_Z16_fetch_usbserialv>
   d4366:	4918      	ldr	r1, [pc, #96]	; (d43c8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
   d4368:	f001 f951 	bl	d560e <_ZN5Print7printlnEPKc>

}

const char *GoogleMapsDeviceLocator::scan() {
#if Wiring_WiFi
	return wifiScan();
   d436c:	4628      	mov	r0, r5
   d436e:	f7ff ffc9 	bl	d4304 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>
   d4372:	4604      	mov	r4, r0

	Serial.println("publishLocation");

	const char *scanData = scan();

	Serial.printlnf("scanData=%s", scanData);
   d4374:	f000 fd46 	bl	d4e04 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4378:	4623      	mov	r3, r4
   d437a:	4a14      	ldr	r2, [pc, #80]	; (d43cc <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
   d437c:	2101      	movs	r1, #1
   d437e:	f001 f97f 	bl	d5680 <_ZN5Print11printf_implEbPKcz>

	if (scanData[0]) {
   d4382:	7823      	ldrb	r3, [r4, #0]
   d4384:	b1f3      	cbz	r3, d43c4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4386:	f000 f9a1 	bl	d46cc <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d438a:	b1d8      	cbz	r0, d43c4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
   d438c:	4b10      	ldr	r3, [pc, #64]	; (d43d0 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
   d438e:	68e9      	ldr	r1, [r5, #12]
   d4390:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4392:	f88d 3000 	strb.w	r3, [sp]
   d4396:	4622      	mov	r2, r4
   d4398:	233c      	movs	r3, #60	; 0x3c
   d439a:	a802      	add	r0, sp, #8
   d439c:	f000 ff0c 	bl	d51b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d43a0:	9c03      	ldr	r4, [sp, #12]
   d43a2:	b17c      	cbz	r4, d43c4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d43a4:	6863      	ldr	r3, [r4, #4]
   d43a6:	3b01      	subs	r3, #1
   d43a8:	6063      	str	r3, [r4, #4]
   d43aa:	b95b      	cbnz	r3, d43c4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
        {
          _M_dispose();
   d43ac:	6823      	ldr	r3, [r4, #0]
   d43ae:	4620      	mov	r0, r4
   d43b0:	689b      	ldr	r3, [r3, #8]
   d43b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43b4:	68a3      	ldr	r3, [r4, #8]
   d43b6:	3b01      	subs	r3, #1
   d43b8:	60a3      	str	r3, [r4, #8]
   d43ba:	b91b      	cbnz	r3, d43c4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
            _M_destroy();
   d43bc:	6823      	ldr	r3, [r4, #0]
   d43be:	4620      	mov	r0, r4
   d43c0:	68db      	ldr	r3, [r3, #12]
   d43c2:	4798      	blx	r3
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}
   d43c4:	b005      	add	sp, #20
   d43c6:	bd30      	pop	{r4, r5, pc}
   d43c8:	000d8181 	.word	0x000d8181
   d43cc:	000d8191 	.word	0x000d8191
   d43d0:	2003e2dc 	.word	0x2003e2dc

000d43d4 <_ZN23GoogleMapsDeviceLocator4loopEv>:
	Particle.subscribe(requestBuf, &GoogleMapsDeviceLocator::subscriptionHandler, this, MY_DEVICES);

	return *this;
}

void GoogleMapsDeviceLocator::loop() {
   d43d4:	b510      	push	{r4, lr}
	switch(state) {
   d43d6:	6a03      	ldr	r3, [r0, #32]
   d43d8:	2b02      	cmp	r3, #2
	Particle.subscribe(requestBuf, &GoogleMapsDeviceLocator::subscriptionHandler, this, MY_DEVICES);

	return *this;
}

void GoogleMapsDeviceLocator::loop() {
   d43da:	4604      	mov	r4, r0
	switch(state) {
   d43dc:	d00b      	beq.n	d43f6 <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
   d43de:	2b03      	cmp	r3, #3
   d43e0:	d023      	beq.n	d442a <_ZN23GoogleMapsDeviceLocator4loopEv+0x56>
   d43e2:	2b00      	cmp	r3, #0
   d43e4:	d134      	bne.n	d4450 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43e6:	f000 f971 	bl	d46cc <spark_cloud_flag_connected>
	case CONNECT_WAIT_STATE:
		if (Particle.connected()) {
   d43ea:	b388      	cbz	r0, d4450 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			state = CONNECTED_WAIT_STATE;
   d43ec:	2302      	movs	r3, #2
   d43ee:	6223      	str	r3, [r4, #32]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d43f0:	f000 f944 	bl	d467c <HAL_Timer_Get_Milli_Seconds>
   d43f4:	e017      	b.n	d4426 <_ZN23GoogleMapsDeviceLocator4loopEv+0x52>
   d43f6:	f000 f941 	bl	d467c <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
		}
		break;

	case CONNECTED_WAIT_STATE:
		if (millis() - stateTime >= waitAfterConnect) {
   d43fa:	69e3      	ldr	r3, [r4, #28]
   d43fc:	1ac0      	subs	r0, r0, r3
   d43fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4400:	4298      	cmp	r0, r3
   d4402:	d325      	bcc.n	d4450 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			// Wait several seconds after connecting before doing the location
			if (locatorMode == LOCATOR_MODE_ONCE) {
   d4404:	6863      	ldr	r3, [r4, #4]
   d4406:	2b01      	cmp	r3, #1
   d4408:	d103      	bne.n	d4412 <_ZN23GoogleMapsDeviceLocator4loopEv+0x3e>
				publishLocation();
   d440a:	4620      	mov	r0, r4
   d440c:	f7ff ffa6 	bl	d435c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
   d4410:	e000      	b.n	d4414 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

				state = IDLE_STATE;
			}
			else
			if (locatorMode == LOCATOR_MODE_MANUAL) {
   d4412:	b913      	cbnz	r3, d441a <_ZN23GoogleMapsDeviceLocator4loopEv+0x46>
				state = IDLE_STATE;
   d4414:	2304      	movs	r3, #4
   d4416:	6223      	str	r3, [r4, #32]
   d4418:	bd10      	pop	{r4, pc}
			}
			else {
				state = CONNECTED_STATE;
   d441a:	2303      	movs	r3, #3
   d441c:	6223      	str	r3, [r4, #32]
   d441e:	f000 f92d 	bl	d467c <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
   d4422:	68a3      	ldr	r3, [r4, #8]
   d4424:	1ac0      	subs	r0, r0, r3
   d4426:	61e0      	str	r0, [r4, #28]
   d4428:	bd10      	pop	{r4, pc}
   d442a:	f000 f94f 	bl	d46cc <spark_cloud_flag_connected>
			}
		}
		break;

	case CONNECTED_STATE:
		if (Particle.connected()) {
   d442e:	b170      	cbz	r0, d444e <_ZN23GoogleMapsDeviceLocator4loopEv+0x7a>
   d4430:	f000 f924 	bl	d467c <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
   d4434:	69e3      	ldr	r3, [r4, #28]
   d4436:	1ac0      	subs	r0, r0, r3
   d4438:	68a3      	ldr	r3, [r4, #8]
   d443a:	4298      	cmp	r0, r3
   d443c:	d308      	bcc.n	d4450 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
   d443e:	f000 f91d 	bl	d467c <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4442:	61e0      	str	r0, [r4, #28]
				publishLocation();
   d4444:	4620      	mov	r0, r4
	case IDLE_STATE:
		// Just hang out here forever (entered only on LOCATOR_MODE_ONCE)
		break;
	}

}
   d4446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	case CONNECTED_STATE:
		if (Particle.connected()) {
			if (millis() - stateTime >= periodMs) {
				stateTime = millis();
				publishLocation();
   d444a:	f7ff bf87 	b.w	d435c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			}
		}
		else {
			// We have disconnected, rec
			state = CONNECT_WAIT_STATE;
   d444e:	6220      	str	r0, [r4, #32]
   d4450:	bd10      	pop	{r4, pc}

000d4452 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4452:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4454:	2300      	movs	r3, #0
   d4456:	6083      	str	r3, [r0, #8]
   d4458:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d445a:	4604      	mov	r4, r0
   d445c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d445e:	b12b      	cbz	r3, d446c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4460:	2202      	movs	r2, #2
   d4462:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4464:	68eb      	ldr	r3, [r5, #12]
   d4466:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4468:	68ab      	ldr	r3, [r5, #8]
   d446a:	60a3      	str	r3, [r4, #8]
	}
    }
   d446c:	4620      	mov	r0, r4
   d446e:	bd38      	pop	{r3, r4, r5, pc}

000d4470 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d4470:	b530      	push	{r4, r5, lr}
   d4472:	b08b      	sub	sp, #44	; 0x2c
   d4474:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
   d4476:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d4478:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d447a:	a806      	add	r0, sp, #24
   d447c:	f000 f92e 	bl	d46dc <spark_deviceID>
	this->callback = callback;

	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
   d4480:	9b06      	ldr	r3, [sp, #24]
   d4482:	9300      	str	r3, [sp, #0]
   d4484:	4a1b      	ldr	r2, [pc, #108]	; (d44f4 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
   d4486:	481c      	ldr	r0, [pc, #112]	; (d44f8 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d4488:	462b      	mov	r3, r5
   d448a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d448e:	f000 f9d9 	bl	d4844 <snprintf>
   d4492:	a806      	add	r0, sp, #24
   d4494:	f001 f936 	bl	d5704 <_ZN6StringD1Ev>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4498:	2500      	movs	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d449a:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d449c:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d449e:	f7ff fdfa 	bl	d4096 <_Znwj>
   d44a2:	b118      	cbz	r0, d44ac <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d44a4:	4b15      	ldr	r3, [pc, #84]	; (d44fc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d44a6:	6084      	str	r4, [r0, #8]
   d44a8:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d44ac:	4b14      	ldr	r3, [pc, #80]	; (d4500 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d44ae:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d44b0:	9305      	str	r3, [sp, #20]
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL), false);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
   d44b2:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d44b4:	4b13      	ldr	r3, [pc, #76]	; (d4504 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
   d44b6:	9304      	str	r3, [sp, #16]
   d44b8:	a806      	add	r0, sp, #24
   d44ba:	f7ff ffca 	bl	d4452 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   d44be:	9b08      	ldr	r3, [sp, #32]
   d44c0:	b17b      	cbz	r3, d44e2 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   d44c2:	2010      	movs	r0, #16
   d44c4:	f7ff fde7 	bl	d4096 <_Znwj>
   d44c8:	4605      	mov	r5, r0
   d44ca:	b150      	cbz	r0, d44e2 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
   d44cc:	a906      	add	r1, sp, #24
   d44ce:	f7ff ffc0 	bl	d4452 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d44d2:	2300      	movs	r3, #0
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	9300      	str	r3, [sp, #0]
   d44d8:	462a      	mov	r2, r5
   d44da:	490b      	ldr	r1, [pc, #44]	; (d4508 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
   d44dc:	4806      	ldr	r0, [pc, #24]	; (d44f8 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d44de:	f000 f90d 	bl	d46fc <spark_subscribe>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d44e2:	a806      	add	r0, sp, #24
   d44e4:	f7ff fee0 	bl	d42a8 <_ZNSt14_Function_baseD1Ev>
   d44e8:	a802      	add	r0, sp, #8
   d44ea:	f7ff fedd 	bl	d42a8 <_ZNSt14_Function_baseD1Ev>

	Particle.subscribe(requestBuf, &GoogleMapsDeviceLocator::subscriptionHandler, this, MY_DEVICES);

	return *this;
}
   d44ee:	4620      	mov	r0, r4
   d44f0:	b00b      	add	sp, #44	; 0x2c
   d44f2:	bd30      	pop	{r4, r5, pc}
   d44f4:	000d819d 	.word	0x000d819d
   d44f8:	2003e2dd 	.word	0x2003e2dd
   d44fc:	000d41e9 	.word	0x000d41e9
   d4500:	000d4111 	.word	0x000d4111
   d4504:	000d4271 	.word	0x000d4271
   d4508:	000d4f97 	.word	0x000d4f97

000d450c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d450c:	4b02      	ldr	r3, [pc, #8]	; (d4518 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d450e:	2201      	movs	r2, #1
   d4510:	701a      	strb	r2, [r3, #0]
   d4512:	f000 b8c3 	b.w	d469c <HAL_Pin_Map>
   d4516:	bf00      	nop
   d4518:	2003e2dc 	.word	0x2003e2dc

000d451c <wlan_scan>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <wlan_scan+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030274 	.word	0x00030274

000d452c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <HAL_USB_USART_Init+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	681b      	ldr	r3, [r3, #0]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	0003024c 	.word	0x0003024c

000d453c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <HAL_USB_USART_Begin+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	685b      	ldr	r3, [r3, #4]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	0003024c 	.word	0x0003024c

000d454c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <HAL_USB_USART_Available_Data+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	691b      	ldr	r3, [r3, #16]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	0003024c 	.word	0x0003024c

000d455c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	695b      	ldr	r3, [r3, #20]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	0003024c 	.word	0x0003024c

000d456c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <HAL_USB_USART_Receive_Data+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	699b      	ldr	r3, [r3, #24]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	0003024c 	.word	0x0003024c

000d457c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <HAL_USB_USART_Send_Data+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	69db      	ldr	r3, [r3, #28]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	0003024c 	.word	0x0003024c

000d458c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <HAL_USB_USART_Flush_Data+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	6a1b      	ldr	r3, [r3, #32]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	0003024c 	.word	0x0003024c

000d459c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <HAL_USART_Init+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	681b      	ldr	r3, [r3, #0]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	0003023c 	.word	0x0003023c

000d45ac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <HAL_USART_Write_Data+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	68db      	ldr	r3, [r3, #12]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	0003023c 	.word	0x0003023c

000d45bc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <HAL_USART_Available_Data+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	691b      	ldr	r3, [r3, #16]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	0003023c 	.word	0x0003023c

000d45cc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <HAL_USART_Read_Data+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	695b      	ldr	r3, [r3, #20]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	0003023c 	.word	0x0003023c

000d45dc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <HAL_USART_Peek_Data+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	699b      	ldr	r3, [r3, #24]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	0003023c 	.word	0x0003023c

000d45ec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <HAL_USART_Flush_Data+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	69db      	ldr	r3, [r3, #28]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	0003023c 	.word	0x0003023c

000d45fc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <HAL_USART_Available_Data_For_Write+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	0003023c 	.word	0x0003023c

000d460c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <inet_inet_ntop+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	695b      	ldr	r3, [r3, #20]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030264 	.word	0x00030264

000d461c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <os_thread_is_current+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	689b      	ldr	r3, [r3, #8]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030248 	.word	0x00030248

000d462c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <os_thread_join+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	691b      	ldr	r3, [r3, #16]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	00030248 	.word	0x00030248

000d463c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <os_thread_cleanup+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	695b      	ldr	r3, [r3, #20]
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	00030248 	.word	0x00030248

000d464c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <os_mutex_create+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	00030248 	.word	0x00030248

000d465c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <os_mutex_recursive_create+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030248 	.word	0x00030248

000d466c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <HAL_RNG_GetRandomNumber+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	685b      	ldr	r3, [r3, #4]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	00030218 	.word	0x00030218

000d467c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	695b      	ldr	r3, [r3, #20]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	00030218 	.word	0x00030218

000d468c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <HAL_SPI_Init+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	69db      	ldr	r3, [r3, #28]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030230 	.word	0x00030230

000d469c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <HAL_Pin_Map+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	681b      	ldr	r3, [r3, #0]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	0003022c 	.word	0x0003022c

000d46ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <netdb_freeaddrinfo+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	689b      	ldr	r3, [r3, #8]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030268 	.word	0x00030268

000d46bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <netdb_getaddrinfo+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	68db      	ldr	r3, [r3, #12]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	00030268 	.word	0x00030268

000d46cc <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <spark_cloud_flag_connected+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	695b      	ldr	r3, [r3, #20]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030244 	.word	0x00030244

000d46dc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <spark_deviceID+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	69db      	ldr	r3, [r3, #28]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030244 	.word	0x00030244

000d46ec <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <spark_send_event+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	6a1b      	ldr	r3, [r3, #32]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030244 	.word	0x00030244

000d46fc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <spark_subscribe+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030244 	.word	0x00030244

000d470c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030244 	.word	0x00030244

000d471c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <network_connect+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	685b      	ldr	r3, [r3, #4]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030240 	.word	0x00030240

000d472c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <network_connecting+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	689b      	ldr	r3, [r3, #8]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030240 	.word	0x00030240

000d473c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <network_disconnect+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	68db      	ldr	r3, [r3, #12]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030240 	.word	0x00030240

000d474c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <network_ready+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	691b      	ldr	r3, [r3, #16]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030240 	.word	0x00030240

000d475c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <network_on+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	695b      	ldr	r3, [r3, #20]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030240 	.word	0x00030240

000d476c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <network_off+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	699b      	ldr	r3, [r3, #24]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030240 	.word	0x00030240

000d477c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <network_listen+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	69db      	ldr	r3, [r3, #28]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030240 	.word	0x00030240

000d478c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <network_listening+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	6a1b      	ldr	r3, [r3, #32]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030240 	.word	0x00030240

000d479c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <network_set_listen_timeout+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030240 	.word	0x00030240

000d47ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <network_get_listen_timeout+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030240 	.word	0x00030240

000d47bc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <set_system_mode+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	685b      	ldr	r3, [r3, #4]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030220 	.word	0x00030220

000d47cc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <application_thread_current+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030220 	.word	0x00030220

000d47dc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <application_thread_invoke+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030220 	.word	0x00030220

000d47ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b03      	ldr	r3, [pc, #12]	; (d47fc <system_ctrl_set_app_request_handler+0x10>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d47f6:	9301      	str	r3, [sp, #4]
   d47f8:	bd08      	pop	{r3, pc}
   d47fa:	0000      	.short	0x0000
   d47fc:	00030220 	.word	0x00030220

000d4800 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b03      	ldr	r3, [pc, #12]	; (d4810 <system_ctrl_set_result+0x10>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d480a:	9301      	str	r3, [sp, #4]
   d480c:	bd08      	pop	{r3, pc}
   d480e:	0000      	.short	0x0000
   d4810:	00030220 	.word	0x00030220

000d4814 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <malloc+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	681b      	ldr	r3, [r3, #0]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003021c 	.word	0x0003021c

000d4824 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <free+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	685b      	ldr	r3, [r3, #4]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003021c 	.word	0x0003021c

000d4834 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <realloc+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	689b      	ldr	r3, [r3, #8]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	0003021c 	.word	0x0003021c

000d4844 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <snprintf+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	69db      	ldr	r3, [r3, #28]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	0003021c 	.word	0x0003021c

000d4854 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <vsnprintf+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	0003021c 	.word	0x0003021c

000d4864 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <abort+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	0003021c 	.word	0x0003021c

000d4874 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <_malloc_r+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	0003021c 	.word	0x0003021c

000d4884 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4884:	2300      	movs	r3, #0
   d4886:	461a      	mov	r2, r3
   d4888:	6840      	ldr	r0, [r0, #4]
   d488a:	f7ff bf47 	b.w	d471c <network_connect>

000d488e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d488e:	2200      	movs	r2, #0
   d4890:	2102      	movs	r1, #2
   d4892:	6840      	ldr	r0, [r0, #4]
   d4894:	f7ff bf52 	b.w	d473c <network_disconnect>

000d4898 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4898:	2200      	movs	r2, #0
   d489a:	4611      	mov	r1, r2
   d489c:	6840      	ldr	r0, [r0, #4]
   d489e:	f7ff bf45 	b.w	d472c <network_connecting>

000d48a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d48a2:	2200      	movs	r2, #0
   d48a4:	4611      	mov	r1, r2
   d48a6:	6840      	ldr	r0, [r0, #4]
   d48a8:	f7ff bf50 	b.w	d474c <network_ready>

000d48ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d48ac:	2300      	movs	r3, #0
   d48ae:	461a      	mov	r2, r3
   d48b0:	4619      	mov	r1, r3
   d48b2:	6840      	ldr	r0, [r0, #4]
   d48b4:	f7ff bf52 	b.w	d475c <network_on>

000d48b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d48b8:	2300      	movs	r3, #0
   d48ba:	461a      	mov	r2, r3
   d48bc:	4619      	mov	r1, r3
   d48be:	6840      	ldr	r0, [r0, #4]
   d48c0:	f7ff bf54 	b.w	d476c <network_off>

000d48c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d48c4:	2200      	movs	r2, #0
   d48c6:	f081 0101 	eor.w	r1, r1, #1
   d48ca:	6840      	ldr	r0, [r0, #4]
   d48cc:	f7ff bf56 	b.w	d477c <network_listen>

000d48d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d48d0:	2200      	movs	r2, #0
   d48d2:	6840      	ldr	r0, [r0, #4]
   d48d4:	f7ff bf62 	b.w	d479c <network_set_listen_timeout>

000d48d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d48d8:	2200      	movs	r2, #0
   d48da:	4611      	mov	r1, r2
   d48dc:	6840      	ldr	r0, [r0, #4]
   d48de:	f7ff bf65 	b.w	d47ac <network_get_listen_timeout>

000d48e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d48e2:	2200      	movs	r2, #0
   d48e4:	4611      	mov	r1, r2
   d48e6:	6840      	ldr	r0, [r0, #4]
   d48e8:	f7ff bf50 	b.w	d478c <network_listening>

000d48ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d48ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d48f0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d48f2:	b095      	sub	sp, #84	; 0x54
   d48f4:	4616      	mov	r6, r2
   d48f6:	460d      	mov	r5, r1
   d48f8:	4607      	mov	r7, r0
    IPAddress addr;
   d48fa:	f000 fae3 	bl	d4ec4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d48fe:	4621      	mov	r1, r4
   d4900:	2220      	movs	r2, #32
   d4902:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4904:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4906:	f001 fe20 	bl	d654a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d490a:	2340      	movs	r3, #64	; 0x40
   d490c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d490e:	4621      	mov	r1, r4
   d4910:	466b      	mov	r3, sp
   d4912:	aa0c      	add	r2, sp, #48	; 0x30
   d4914:	4630      	mov	r0, r6
   d4916:	f7ff fed1 	bl	d46bc <netdb_getaddrinfo>
    if (!r) {
   d491a:	4604      	mov	r4, r0
   d491c:	2800      	cmp	r0, #0
   d491e:	d144      	bne.n	d49aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4920:	4602      	mov	r2, r0
   d4922:	2101      	movs	r1, #1
   d4924:	6868      	ldr	r0, [r5, #4]
   d4926:	f7ff ff11 	bl	d474c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d492a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d492c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d492e:	4622      	mov	r2, r4
   d4930:	6868      	ldr	r0, [r5, #4]
   d4932:	f7ff ff0b 	bl	d474c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4936:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4938:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d493a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d493c:	2e00      	cmp	r6, #0
   d493e:	d034      	beq.n	d49aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4940:	2900      	cmp	r1, #0
   d4942:	d132      	bne.n	d49aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4944:	6873      	ldr	r3, [r6, #4]
   d4946:	2b02      	cmp	r3, #2
   d4948:	d002      	beq.n	d4950 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d494a:	2b0a      	cmp	r3, #10
   d494c:	d009      	beq.n	d4962 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d494e:	e02a      	b.n	d49a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4950:	f1b8 0f00 	cmp.w	r8, #0
   d4954:	d027      	beq.n	d49a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4956:	6971      	ldr	r1, [r6, #20]
   d4958:	4638      	mov	r0, r7
   d495a:	3104      	adds	r1, #4
   d495c:	f000 fadf 	bl	d4f1e <_ZN9IPAddressaSEPKh>
   d4960:	e020      	b.n	d49a4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4962:	f1b9 0f00 	cmp.w	r9, #0
   d4966:	d01e      	beq.n	d49a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4968:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d496a:	2211      	movs	r2, #17
   d496c:	a801      	add	r0, sp, #4
   d496e:	f001 fdec 	bl	d654a <memset>
                    a.v = 6;
   d4972:	2306      	movs	r3, #6
   d4974:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4978:	ad01      	add	r5, sp, #4
   d497a:	f104 0308 	add.w	r3, r4, #8
   d497e:	3418      	adds	r4, #24
   d4980:	6818      	ldr	r0, [r3, #0]
   d4982:	6859      	ldr	r1, [r3, #4]
   d4984:	462a      	mov	r2, r5
   d4986:	c203      	stmia	r2!, {r0, r1}
   d4988:	3308      	adds	r3, #8
   d498a:	42a3      	cmp	r3, r4
   d498c:	4615      	mov	r5, r2
   d498e:	d1f7      	bne.n	d4980 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4990:	a901      	add	r1, sp, #4
   d4992:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4994:	ad07      	add	r5, sp, #28
   d4996:	f000 faa3 	bl	d4ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d499a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d499c:	1d3c      	adds	r4, r7, #4
   d499e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d49a0:	682b      	ldr	r3, [r5, #0]
   d49a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d49a4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d49a6:	69f6      	ldr	r6, [r6, #28]
   d49a8:	e7c8      	b.n	d493c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d49aa:	9800      	ldr	r0, [sp, #0]
   d49ac:	f7ff fe7e 	bl	d46ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d49b0:	4638      	mov	r0, r7
   d49b2:	b015      	add	sp, #84	; 0x54
   d49b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d49b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d49b8:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d49ba:	4a03      	ldr	r2, [pc, #12]	; (d49c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d49bc:	601a      	str	r2, [r3, #0]
   d49be:	2200      	movs	r2, #0
   d49c0:	605a      	str	r2, [r3, #4]
   d49c2:	4770      	bx	lr
   d49c4:	2003e3e4 	.word	0x2003e3e4
   d49c8:	000d81bc 	.word	0x000d81bc

000d49cc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d49cc:	2200      	movs	r2, #0
   d49ce:	4611      	mov	r1, r2
   d49d0:	6840      	ldr	r0, [r0, #4]
   d49d2:	f7ff bebb 	b.w	d474c <network_ready>

000d49d6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d49d6:	2200      	movs	r2, #0
   d49d8:	4611      	mov	r1, r2
   d49da:	6840      	ldr	r0, [r0, #4]
   d49dc:	f7ff bed6 	b.w	d478c <network_listening>

000d49e0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d49e0:	2200      	movs	r2, #0
   d49e2:	4611      	mov	r1, r2
   d49e4:	6840      	ldr	r0, [r0, #4]
   d49e6:	f7ff bee1 	b.w	d47ac <network_get_listen_timeout>

000d49ea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d49ea:	2200      	movs	r2, #0
   d49ec:	6840      	ldr	r0, [r0, #4]
   d49ee:	f7ff bed5 	b.w	d479c <network_set_listen_timeout>

000d49f2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d49f2:	2200      	movs	r2, #0
   d49f4:	f081 0101 	eor.w	r1, r1, #1
   d49f8:	6840      	ldr	r0, [r0, #4]
   d49fa:	f7ff bebf 	b.w	d477c <network_listen>

000d49fe <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d49fe:	2300      	movs	r3, #0
   d4a00:	461a      	mov	r2, r3
   d4a02:	4619      	mov	r1, r3
   d4a04:	6840      	ldr	r0, [r0, #4]
   d4a06:	f7ff beb1 	b.w	d476c <network_off>

000d4a0a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4a0a:	2300      	movs	r3, #0
   d4a0c:	461a      	mov	r2, r3
   d4a0e:	4619      	mov	r1, r3
   d4a10:	6840      	ldr	r0, [r0, #4]
   d4a12:	f7ff bea3 	b.w	d475c <network_on>

000d4a16 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4a16:	2200      	movs	r2, #0
   d4a18:	4611      	mov	r1, r2
   d4a1a:	6840      	ldr	r0, [r0, #4]
   d4a1c:	f7ff be86 	b.w	d472c <network_connecting>

000d4a20 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a20:	2200      	movs	r2, #0
   d4a22:	2102      	movs	r1, #2
   d4a24:	6840      	ldr	r0, [r0, #4]
   d4a26:	f7ff be89 	b.w	d473c <network_disconnect>

000d4a2a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4a2a:	2300      	movs	r3, #0
   d4a2c:	461a      	mov	r2, r3
   d4a2e:	6840      	ldr	r0, [r0, #4]
   d4a30:	f7ff be74 	b.w	d471c <network_connect>

000d4a34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4a34:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4a36:	2204      	movs	r2, #4
   d4a38:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4a3a:	4a02      	ldr	r2, [pc, #8]	; (d4a44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4a3c:	601a      	str	r2, [r3, #0]
   d4a3e:	4770      	bx	lr
   d4a40:	2003e3ec 	.word	0x2003e3ec
   d4a44:	000d81f0 	.word	0x000d81f0

000d4a48 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a48:	2200      	movs	r2, #0
   d4a4a:	4611      	mov	r1, r2
   d4a4c:	6840      	ldr	r0, [r0, #4]
   d4a4e:	f7ff be9d 	b.w	d478c <network_listening>

000d4a52 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4a52:	2200      	movs	r2, #0
   d4a54:	4611      	mov	r1, r2
   d4a56:	6840      	ldr	r0, [r0, #4]
   d4a58:	f7ff bea8 	b.w	d47ac <network_get_listen_timeout>

000d4a5c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4a5c:	2200      	movs	r2, #0
   d4a5e:	6840      	ldr	r0, [r0, #4]
   d4a60:	f7ff be9c 	b.w	d479c <network_set_listen_timeout>

000d4a64 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a64:	2200      	movs	r2, #0
   d4a66:	f081 0101 	eor.w	r1, r1, #1
   d4a6a:	6840      	ldr	r0, [r0, #4]
   d4a6c:	f7ff be86 	b.w	d477c <network_listen>

000d4a70 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4a70:	2300      	movs	r3, #0
   d4a72:	461a      	mov	r2, r3
   d4a74:	4619      	mov	r1, r3
   d4a76:	6840      	ldr	r0, [r0, #4]
   d4a78:	f7ff be78 	b.w	d476c <network_off>

000d4a7c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4a7c:	2300      	movs	r3, #0
   d4a7e:	461a      	mov	r2, r3
   d4a80:	4619      	mov	r1, r3
   d4a82:	6840      	ldr	r0, [r0, #4]
   d4a84:	f7ff be6a 	b.w	d475c <network_on>

000d4a88 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a88:	2200      	movs	r2, #0
   d4a8a:	4611      	mov	r1, r2
   d4a8c:	6840      	ldr	r0, [r0, #4]
   d4a8e:	f7ff be5d 	b.w	d474c <network_ready>

000d4a92 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4a92:	2200      	movs	r2, #0
   d4a94:	4611      	mov	r1, r2
   d4a96:	6840      	ldr	r0, [r0, #4]
   d4a98:	f7ff be48 	b.w	d472c <network_connecting>

000d4a9c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a9c:	2200      	movs	r2, #0
   d4a9e:	2102      	movs	r1, #2
   d4aa0:	6840      	ldr	r0, [r0, #4]
   d4aa2:	f7ff be4b 	b.w	d473c <network_disconnect>

000d4aa6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4aa6:	2300      	movs	r3, #0
   d4aa8:	461a      	mov	r2, r3
   d4aaa:	6840      	ldr	r0, [r0, #4]
   d4aac:	f7ff be36 	b.w	d471c <network_connect>

000d4ab0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4ab0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ab2:	4605      	mov	r5, r0
   d4ab4:	b188      	cbz	r0, d4ada <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ab6:	6804      	ldr	r4, [r0, #0]
   d4ab8:	b14c      	cbz	r4, d4ace <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4aba:	68a3      	ldr	r3, [r4, #8]
   d4abc:	b11b      	cbz	r3, d4ac6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4abe:	2203      	movs	r2, #3
   d4ac0:	4621      	mov	r1, r4
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ac6:	2110      	movs	r1, #16
   d4ac8:	4620      	mov	r0, r4
   d4aca:	f000 fee6 	bl	d589a <_ZdlPvj>
   d4ace:	4628      	mov	r0, r5
   d4ad0:	2114      	movs	r1, #20
      }
   d4ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ad6:	f000 bee0 	b.w	d589a <_ZdlPvj>
   d4ada:	bd38      	pop	{r3, r4, r5, pc}

000d4adc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d4adc:	b110      	cbz	r0, d4ae4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d4ade:	6803      	ldr	r3, [r0, #0]
   d4ae0:	685b      	ldr	r3, [r3, #4]
   d4ae2:	4718      	bx	r3
   d4ae4:	4770      	bx	lr

000d4ae6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4ae6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4ae8:	6803      	ldr	r3, [r0, #0]
   d4aea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4aec:	b1bb      	cbz	r3, d4b1e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4aee:	6858      	ldr	r0, [r3, #4]
   d4af0:	f7ff fd94 	bl	d461c <os_thread_is_current>
   d4af4:	b978      	cbnz	r0, d4b16 <_ZN6ThreadD1Ev+0x30>
   d4af6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4af8:	7c5a      	ldrb	r2, [r3, #17]
   d4afa:	b912      	cbnz	r2, d4b02 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4afc:	6858      	ldr	r0, [r3, #4]
   d4afe:	f7ff fd95 	bl	d462c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4b02:	6823      	ldr	r3, [r4, #0]
   d4b04:	6858      	ldr	r0, [r3, #4]
   d4b06:	f7ff fd99 	bl	d463c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b0a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4b0c:	2300      	movs	r3, #0
   d4b0e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4b10:	b128      	cbz	r0, d4b1e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4b12:	f7ff ffcd 	bl	d4ab0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b16:	6820      	ldr	r0, [r4, #0]
   d4b18:	b108      	cbz	r0, d4b1e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4b1a:	f7ff ffc9 	bl	d4ab0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d4b1e:	4620      	mov	r0, r4
   d4b20:	bd10      	pop	{r4, pc}
	...

000d4b24 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4b24:	b538      	push	{r3, r4, r5, lr}
   d4b26:	4b0c      	ldr	r3, [pc, #48]	; (d4b58 <_ZN5spark9MeshClassD1Ev+0x34>)
   d4b28:	6003      	str	r3, [r0, #0]
   d4b2a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b2c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4b30:	b108      	cbz	r0, d4b36 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4b32:	f7ff fab4 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b36:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4b3a:	b135      	cbz	r5, d4b4a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b3c:	4628      	mov	r0, r5
   d4b3e:	f7ff ffd2 	bl	d4ae6 <_ZN6ThreadD1Ev>
   d4b42:	2104      	movs	r1, #4
   d4b44:	4628      	mov	r0, r5
   d4b46:	f000 fea8 	bl	d589a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b4a:	68a0      	ldr	r0, [r4, #8]
   d4b4c:	b108      	cbz	r0, d4b52 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d4b4e:	f7ff ffc5 	bl	d4adc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d4b52:	4620      	mov	r0, r4
   d4b54:	bd38      	pop	{r3, r4, r5, pc}
   d4b56:	bf00      	nop
   d4b58:	000d8224 	.word	0x000d8224

000d4b5c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4b5c:	b538      	push	{r3, r4, r5, lr}
   d4b5e:	4c0d      	ldr	r4, [pc, #52]	; (d4b94 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4b60:	4b0d      	ldr	r3, [pc, #52]	; (d4b98 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4b62:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4b64:	2500      	movs	r5, #0
   d4b66:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4b68:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4b6c:	6063      	str	r3, [r4, #4]
   d4b6e:	60a5      	str	r5, [r4, #8]
   d4b70:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b74:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4b78:	f7ff fd70 	bl	d465c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4b7c:	4b07      	ldr	r3, [pc, #28]	; (d4b9c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4b7e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4b82:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4b84:	4620      	mov	r0, r4
   d4b86:	4a06      	ldr	r2, [pc, #24]	; (d4ba0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4b88:	4906      	ldr	r1, [pc, #24]	; (d4ba4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4b8e:	f000 be7f 	b.w	d5890 <__aeabi_atexit>
   d4b92:	bf00      	nop
   d4b94:	2003e3f4 	.word	0x2003e3f4
   d4b98:	000d81bc 	.word	0x000d81bc
   d4b9c:	000d8224 	.word	0x000d8224
   d4ba0:	2003e2a8 	.word	0x2003e2a8
   d4ba4:	000d4b25 	.word	0x000d4b25

000d4ba8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4ba8:	4770      	bx	lr

000d4baa <_ZN8SPIClassD0Ev>:
   d4baa:	b510      	push	{r4, lr}
   d4bac:	2110      	movs	r1, #16
   d4bae:	4604      	mov	r4, r0
   d4bb0:	f000 fe73 	bl	d589a <_ZdlPvj>
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	bd10      	pop	{r4, pc}

000d4bb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4bb8:	b570      	push	{r4, r5, r6, lr}
   d4bba:	4b08      	ldr	r3, [pc, #32]	; (d4bdc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4bbc:	6003      	str	r3, [r0, #0]
   d4bbe:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4bc0:	2500      	movs	r5, #0
   d4bc2:	460e      	mov	r6, r1
   d4bc4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4bc8:	f7ff fd40 	bl	d464c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4bcc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4bce:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4bd0:	f7ff fd5c 	bl	d468c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4bd4:	60a5      	str	r5, [r4, #8]
}
   d4bd6:	4620      	mov	r0, r4
   d4bd8:	bd70      	pop	{r4, r5, r6, pc}
   d4bda:	bf00      	nop
   d4bdc:	000d8258 	.word	0x000d8258

000d4be0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4be0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4be2:	6883      	ldr	r3, [r0, #8]
   d4be4:	4604      	mov	r4, r0
   d4be6:	b90b      	cbnz	r3, d4bec <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4be8:	f000 fe59 	bl	d589e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4bec:	68c3      	ldr	r3, [r0, #12]
   d4bee:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4bf0:	68a3      	ldr	r3, [r4, #8]
   d4bf2:	b11b      	cbz	r3, d4bfc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4bf4:	2203      	movs	r2, #3
   d4bf6:	4621      	mov	r1, r4
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4bfc:	4620      	mov	r0, r4
   d4bfe:	2110      	movs	r1, #16
}
   d4c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4c04:	f000 be49 	b.w	d589a <_ZdlPvj>

000d4c08 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4c08:	4770      	bx	lr

000d4c0a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4c0a:	7441      	strb	r1, [r0, #17]
   d4c0c:	4770      	bx	lr

000d4c0e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4c0e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4c10:	7c00      	ldrb	r0, [r0, #16]
   d4c12:	f7ff fcf3 	bl	d45fc <HAL_USART_Available_Data_For_Write>
}
   d4c16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c1a:	bd08      	pop	{r3, pc}

000d4c1c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4c1c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4c1e:	7c00      	ldrb	r0, [r0, #16]
   d4c20:	f7ff fccc 	bl	d45bc <HAL_USART_Available_Data>
}
   d4c24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c28:	bd08      	pop	{r3, pc}

000d4c2a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4c2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4c2c:	7c00      	ldrb	r0, [r0, #16]
   d4c2e:	f7ff fcd5 	bl	d45dc <HAL_USART_Peek_Data>
}
   d4c32:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c36:	bf28      	it	cs
   d4c38:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c3c:	bd08      	pop	{r3, pc}

000d4c3e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4c3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4c40:	7c00      	ldrb	r0, [r0, #16]
   d4c42:	f7ff fcc3 	bl	d45cc <HAL_USART_Read_Data>
}
   d4c46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c4a:	bf28      	it	cs
   d4c4c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c50:	bd08      	pop	{r3, pc}

000d4c52 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4c52:	7c00      	ldrb	r0, [r0, #16]
   d4c54:	f7ff bcca 	b.w	d45ec <HAL_USART_Flush_Data>

000d4c58 <_ZN11USARTSerialD0Ev>:
   d4c58:	b510      	push	{r4, lr}
   d4c5a:	2114      	movs	r1, #20
   d4c5c:	4604      	mov	r4, r0
   d4c5e:	f000 fe1c 	bl	d589a <_ZdlPvj>
   d4c62:	4620      	mov	r0, r4
   d4c64:	bd10      	pop	{r4, pc}

000d4c66 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4c66:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4c68:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4c6a:	4604      	mov	r4, r0
   d4c6c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4c6e:	b925      	cbnz	r5, d4c7a <_ZN11USARTSerial5writeEh+0x14>
   d4c70:	7c00      	ldrb	r0, [r0, #16]
   d4c72:	f7ff fcc3 	bl	d45fc <HAL_USART_Available_Data_For_Write>
   d4c76:	2800      	cmp	r0, #0
   d4c78:	dd05      	ble.n	d4c86 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4c7a:	4631      	mov	r1, r6
   d4c7c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4c82:	f7ff bc93 	b.w	d45ac <HAL_USART_Write_Data>
  }
  return 0;
}
   d4c86:	4628      	mov	r0, r5
   d4c88:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4c8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4c8c:	b510      	push	{r4, lr}
   d4c8e:	4604      	mov	r4, r0
   d4c90:	4608      	mov	r0, r1
   d4c92:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4c94:	2200      	movs	r2, #0
   d4c96:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4c9c:	60a2      	str	r2, [r4, #8]
   d4c9e:	4a05      	ldr	r2, [pc, #20]	; (d4cb4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4ca0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4ca2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4ca4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4ca6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4ca8:	461a      	mov	r2, r3
   d4caa:	f7ff fc77 	bl	d459c <HAL_USART_Init>
}
   d4cae:	4620      	mov	r0, r4
   d4cb0:	bd10      	pop	{r4, pc}
   d4cb2:	bf00      	nop
   d4cb4:	000d8268 	.word	0x000d8268

000d4cb8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4cb8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4cba:	4d0c      	ldr	r5, [pc, #48]	; (d4cec <_Z22__fetch_global_Serial1v+0x34>)
   d4cbc:	6829      	ldr	r1, [r5, #0]
   d4cbe:	f011 0401 	ands.w	r4, r1, #1
   d4cc2:	d111      	bne.n	d4ce8 <_Z22__fetch_global_Serial1v+0x30>
   d4cc4:	4628      	mov	r0, r5
   d4cc6:	f7ff f9ec 	bl	d40a2 <__cxa_guard_acquire>
   d4cca:	b168      	cbz	r0, d4ce8 <_Z22__fetch_global_Serial1v+0x30>
   d4ccc:	4a08      	ldr	r2, [pc, #32]	; (d4cf0 <_Z22__fetch_global_Serial1v+0x38>)
   d4cce:	4b09      	ldr	r3, [pc, #36]	; (d4cf4 <_Z22__fetch_global_Serial1v+0x3c>)
   d4cd0:	4809      	ldr	r0, [pc, #36]	; (d4cf8 <_Z22__fetch_global_Serial1v+0x40>)
   d4cd2:	4621      	mov	r1, r4
   d4cd4:	f7ff ffda 	bl	d4c8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4cd8:	4628      	mov	r0, r5
   d4cda:	f7ff f9e7 	bl	d40ac <__cxa_guard_release>
   d4cde:	4a07      	ldr	r2, [pc, #28]	; (d4cfc <_Z22__fetch_global_Serial1v+0x44>)
   d4ce0:	4907      	ldr	r1, [pc, #28]	; (d4d00 <_Z22__fetch_global_Serial1v+0x48>)
   d4ce2:	4805      	ldr	r0, [pc, #20]	; (d4cf8 <_Z22__fetch_global_Serial1v+0x40>)
   d4ce4:	f000 fdd4 	bl	d5890 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4ce8:	4803      	ldr	r0, [pc, #12]	; (d4cf8 <_Z22__fetch_global_Serial1v+0x40>)
   d4cea:	bd38      	pop	{r3, r4, r5, pc}
   d4cec:	2003e65c 	.word	0x2003e65c
   d4cf0:	2003e660 	.word	0x2003e660
   d4cf4:	2003e5d8 	.word	0x2003e5d8
   d4cf8:	2003e5c4 	.word	0x2003e5c4
   d4cfc:	2003e2a8 	.word	0x2003e2a8
   d4d00:	000d4c09 	.word	0x000d4c09

000d4d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4d04:	680b      	ldr	r3, [r1, #0]
   d4d06:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4d08:	b113      	cbz	r3, d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4d0a:	685a      	ldr	r2, [r3, #4]
   d4d0c:	3201      	adds	r2, #1
   d4d0e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4d10:	4770      	bx	lr

000d4d12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4d12:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4d14:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4d16:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4d18:	b17c      	cbz	r4, d4d3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4d1a:	6863      	ldr	r3, [r4, #4]
   d4d1c:	3b01      	subs	r3, #1
   d4d1e:	6063      	str	r3, [r4, #4]
   d4d20:	b95b      	cbnz	r3, d4d3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4d22:	6823      	ldr	r3, [r4, #0]
   d4d24:	4620      	mov	r0, r4
   d4d26:	689b      	ldr	r3, [r3, #8]
   d4d28:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d2a:	68a3      	ldr	r3, [r4, #8]
   d4d2c:	3b01      	subs	r3, #1
   d4d2e:	60a3      	str	r3, [r4, #8]
   d4d30:	b91b      	cbnz	r3, d4d3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4d32:	6823      	ldr	r3, [r4, #0]
   d4d34:	4620      	mov	r0, r4
   d4d36:	68db      	ldr	r3, [r3, #12]
   d4d38:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4d3a:	4628      	mov	r0, r5
   d4d3c:	bd38      	pop	{r3, r4, r5, pc}

000d4d3e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d3e:	7441      	strb	r1, [r0, #17]
   d4d40:	4770      	bx	lr

000d4d42 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4d42:	4770      	bx	lr

000d4d44 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4d44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4d46:	2100      	movs	r1, #0
   d4d48:	7c00      	ldrb	r0, [r0, #16]
   d4d4a:	f7ff fc0f 	bl	d456c <HAL_USB_USART_Receive_Data>
}
   d4d4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d52:	bf28      	it	cs
   d4d54:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d58:	bd08      	pop	{r3, pc}

000d4d5a <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4d5a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4d5c:	2101      	movs	r1, #1
   d4d5e:	7c00      	ldrb	r0, [r0, #16]
   d4d60:	f7ff fc04 	bl	d456c <HAL_USB_USART_Receive_Data>
}
   d4d64:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d68:	bf28      	it	cs
   d4d6a:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d6e:	bd08      	pop	{r3, pc}

000d4d70 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4d70:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4d72:	7c00      	ldrb	r0, [r0, #16]
   d4d74:	f7ff fbf2 	bl	d455c <HAL_USB_USART_Available_Data_For_Write>
}
   d4d78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d7c:	bd08      	pop	{r3, pc}

000d4d7e <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4d7e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4d80:	7c00      	ldrb	r0, [r0, #16]
   d4d82:	f7ff fbe3 	bl	d454c <HAL_USB_USART_Available_Data>
}
   d4d86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d8a:	bd08      	pop	{r3, pc}

000d4d8c <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4d8c:	7c00      	ldrb	r0, [r0, #16]
   d4d8e:	f7ff bbfd 	b.w	d458c <HAL_USB_USART_Flush_Data>

000d4d92 <_ZN9USBSerialD0Ev>:
   d4d92:	b510      	push	{r4, lr}
   d4d94:	2114      	movs	r1, #20
   d4d96:	4604      	mov	r4, r0
   d4d98:	f000 fd7f 	bl	d589a <_ZdlPvj>
   d4d9c:	4620      	mov	r0, r4
   d4d9e:	bd10      	pop	{r4, pc}

000d4da0 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4da0:	b538      	push	{r3, r4, r5, lr}
   d4da2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4da4:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4da6:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4da8:	f7ff fbd8 	bl	d455c <HAL_USB_USART_Available_Data_For_Write>
   d4dac:	2800      	cmp	r0, #0
   d4dae:	dc01      	bgt.n	d4db4 <_ZN9USBSerial5writeEh+0x14>
   d4db0:	7c60      	ldrb	r0, [r4, #17]
   d4db2:	b128      	cbz	r0, d4dc0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4db4:	4629      	mov	r1, r5
   d4db6:	7c20      	ldrb	r0, [r4, #16]
   d4db8:	f7ff fbe0 	bl	d457c <HAL_USB_USART_Send_Data>
   d4dbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4dc0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4dc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4dc4:	b510      	push	{r4, lr}
   d4dc6:	4604      	mov	r4, r0
   d4dc8:	2300      	movs	r3, #0
   d4dca:	6063      	str	r3, [r4, #4]
   d4dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4dd0:	60a3      	str	r3, [r4, #8]
   d4dd2:	4b05      	ldr	r3, [pc, #20]	; (d4de8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4dd4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4dd6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4dd8:	4608      	mov	r0, r1
{
  _serial = serial;
   d4dda:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4ddc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4dde:	4611      	mov	r1, r2
   d4de0:	f7ff fba4 	bl	d452c <HAL_USB_USART_Init>
}
   d4de4:	4620      	mov	r0, r4
   d4de6:	bd10      	pop	{r4, pc}
   d4de8:	000d8298 	.word	0x000d8298

000d4dec <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4dec:	2200      	movs	r2, #0
   d4dee:	7c00      	ldrb	r0, [r0, #16]
   d4df0:	f7ff bba4 	b.w	d453c <HAL_USB_USART_Begin>

000d4df4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4df4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4df6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4df8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4dfa:	2100      	movs	r1, #0
   d4dfc:	f001 fba5 	bl	d654a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4e00:	4620      	mov	r0, r4
   d4e02:	bd10      	pop	{r4, pc}

000d4e04 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4e04:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e06:	4d0e      	ldr	r5, [pc, #56]	; (d4e40 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4e08:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4e0a:	a801      	add	r0, sp, #4
   d4e0c:	f7ff fff2 	bl	d4df4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e10:	6829      	ldr	r1, [r5, #0]
   d4e12:	f011 0401 	ands.w	r4, r1, #1
   d4e16:	d110      	bne.n	d4e3a <_Z16_fetch_usbserialv+0x36>
   d4e18:	4628      	mov	r0, r5
   d4e1a:	f7ff f942 	bl	d40a2 <__cxa_guard_acquire>
   d4e1e:	b160      	cbz	r0, d4e3a <_Z16_fetch_usbserialv+0x36>
   d4e20:	aa01      	add	r2, sp, #4
   d4e22:	4621      	mov	r1, r4
   d4e24:	4807      	ldr	r0, [pc, #28]	; (d4e44 <_Z16_fetch_usbserialv+0x40>)
   d4e26:	f7ff ffcd 	bl	d4dc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4e2a:	4628      	mov	r0, r5
   d4e2c:	f7ff f93e 	bl	d40ac <__cxa_guard_release>
   d4e30:	4a05      	ldr	r2, [pc, #20]	; (d4e48 <_Z16_fetch_usbserialv+0x44>)
   d4e32:	4906      	ldr	r1, [pc, #24]	; (d4e4c <_Z16_fetch_usbserialv+0x48>)
   d4e34:	4803      	ldr	r0, [pc, #12]	; (d4e44 <_Z16_fetch_usbserialv+0x40>)
   d4e36:	f000 fd2b 	bl	d5890 <__aeabi_atexit>
	return _usbserial;
}
   d4e3a:	4802      	ldr	r0, [pc, #8]	; (d4e44 <_Z16_fetch_usbserialv+0x40>)
   d4e3c:	b007      	add	sp, #28
   d4e3e:	bd30      	pop	{r4, r5, pc}
   d4e40:	2003e6e4 	.word	0x2003e6e4
   d4e44:	2003e6e8 	.word	0x2003e6e8
   d4e48:	2003e2a8 	.word	0x2003e2a8
   d4e4c:	000d4d43 	.word	0x000d4d43

000d4e50 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e50:	4770      	bx	lr

000d4e52 <_ZN9IPAddressD0Ev>:
   d4e52:	b510      	push	{r4, lr}
   d4e54:	2118      	movs	r1, #24
   d4e56:	4604      	mov	r4, r0
   d4e58:	f000 fd1f 	bl	d589a <_ZdlPvj>
   d4e5c:	4620      	mov	r0, r4
   d4e5e:	bd10      	pop	{r4, pc}

000d4e60 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e60:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e62:	7d03      	ldrb	r3, [r0, #20]
   d4e64:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e66:	b08d      	sub	sp, #52	; 0x34
   d4e68:	460e      	mov	r6, r1
   d4e6a:	f100 0704 	add.w	r7, r0, #4
   d4e6e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e72:	d002      	beq.n	d4e7a <_ZNK9IPAddress7printToER5Print+0x1a>
   d4e74:	f100 0508 	add.w	r5, r0, #8
   d4e78:	e018      	b.n	d4eac <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4e7a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e7c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4e7e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e82:	232f      	movs	r3, #47	; 0x2f
   d4e84:	462a      	mov	r2, r5
   d4e86:	200a      	movs	r0, #10
   d4e88:	f7ff fbc0 	bl	d460c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4e8c:	4628      	mov	r0, r5
   d4e8e:	f001 fbb0 	bl	d65f2 <strlen>
   d4e92:	6833      	ldr	r3, [r6, #0]
   d4e94:	4602      	mov	r2, r0
   d4e96:	68db      	ldr	r3, [r3, #12]
   d4e98:	4629      	mov	r1, r5
   d4e9a:	4630      	mov	r0, r6
   d4e9c:	4798      	blx	r3
   d4e9e:	e00f      	b.n	d4ec0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4ea0:	b124      	cbz	r4, d4eac <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4ea2:	212e      	movs	r1, #46	; 0x2e
   d4ea4:	4630      	mov	r0, r6
   d4ea6:	f000 fba3 	bl	d55f0 <_ZN5Print5printEc>
   d4eaa:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4eac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4eb0:	220a      	movs	r2, #10
   d4eb2:	4630      	mov	r0, r6
   d4eb4:	f000 fbe2 	bl	d567c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4eb8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4eba:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ebc:	d1f0      	bne.n	d4ea0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ebe:	4620      	mov	r0, r4
    }
    return n;
}
   d4ec0:	b00d      	add	sp, #52	; 0x34
   d4ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ec4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4ec4:	b510      	push	{r4, lr}
   d4ec6:	4b05      	ldr	r3, [pc, #20]	; (d4edc <_ZN9IPAddressC1Ev+0x18>)
   d4ec8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4eca:	2211      	movs	r2, #17
   d4ecc:	f840 3b04 	str.w	r3, [r0], #4
   d4ed0:	2100      	movs	r1, #0
   d4ed2:	f001 fb3a 	bl	d654a <memset>
{
    clear();
}
   d4ed6:	4620      	mov	r0, r4
   d4ed8:	bd10      	pop	{r4, pc}
   d4eda:	bf00      	nop
   d4edc:	000d82c8 	.word	0x000d82c8

000d4ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ee0:	4603      	mov	r3, r0
   d4ee2:	4a07      	ldr	r2, [pc, #28]	; (d4f00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ee4:	b510      	push	{r4, lr}
   d4ee6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4eea:	f101 0210 	add.w	r2, r1, #16
   d4eee:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ef2:	f843 4b04 	str.w	r4, [r3], #4
   d4ef6:	4291      	cmp	r1, r2
   d4ef8:	d1f9      	bne.n	d4eee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4efa:	780a      	ldrb	r2, [r1, #0]
   d4efc:	701a      	strb	r2, [r3, #0]
}
   d4efe:	bd10      	pop	{r4, pc}
   d4f00:	000d82c8 	.word	0x000d82c8

000d4f04 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4f04:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4f06:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4f0a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4f0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4f12:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4f16:	2304      	movs	r3, #4
   d4f18:	6041      	str	r1, [r0, #4]
   d4f1a:	7503      	strb	r3, [r0, #20]
   d4f1c:	bd10      	pop	{r4, pc}

000d4f1e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4f1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4f20:	780d      	ldrb	r5, [r1, #0]
   d4f22:	788b      	ldrb	r3, [r1, #2]
   d4f24:	784a      	ldrb	r2, [r1, #1]
   d4f26:	78c9      	ldrb	r1, [r1, #3]
   d4f28:	9100      	str	r1, [sp, #0]
   d4f2a:	4629      	mov	r1, r5
   d4f2c:	f7ff ffea 	bl	d4f04 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4f30:	b003      	add	sp, #12
   d4f32:	bd30      	pop	{r4, r5, pc}

000d4f34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f34:	4770      	bx	lr

000d4f36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4f36:	2000      	movs	r0, #0
   d4f38:	4770      	bx	lr

000d4f3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f3a:	b510      	push	{r4, lr}
   d4f3c:	2110      	movs	r1, #16
   d4f3e:	4604      	mov	r4, r0
   d4f40:	f000 fcab 	bl	d589a <_ZdlPvj>
   d4f44:	4620      	mov	r0, r4
   d4f46:	bd10      	pop	{r4, pc}

000d4f48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4f48:	b508      	push	{r3, lr}
      { delete this; }
   d4f4a:	b108      	cbz	r0, d4f50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4f4c:	f7ff fff5 	bl	d4f3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4f50:	bd08      	pop	{r3, pc}

000d4f52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4f52:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4f54:	68c4      	ldr	r4, [r0, #12]
   d4f56:	b1ec      	cbz	r4, d4f94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4f58:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4f5a:	2b02      	cmp	r3, #2
   d4f5c:	d102      	bne.n	d4f64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4f5e:	68e0      	ldr	r0, [r4, #12]
   d4f60:	f7ff fc60 	bl	d4824 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4f64:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4f66:	b135      	cbz	r5, d4f76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f68:	4628      	mov	r0, r5
   d4f6a:	f7ff f99d 	bl	d42a8 <_ZNSt14_Function_baseD1Ev>
   d4f6e:	2110      	movs	r1, #16
   d4f70:	4628      	mov	r0, r5
   d4f72:	f000 fc92 	bl	d589a <_ZdlPvj>
   d4f76:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4f78:	b135      	cbz	r5, d4f88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d4f7a:	4628      	mov	r0, r5
   d4f7c:	f7ff f994 	bl	d42a8 <_ZNSt14_Function_baseD1Ev>
   d4f80:	2110      	movs	r1, #16
   d4f82:	4628      	mov	r0, r5
   d4f84:	f000 fc89 	bl	d589a <_ZdlPvj>
   d4f88:	4620      	mov	r0, r4
   d4f8a:	2114      	movs	r1, #20
   d4f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f90:	f000 bc83 	b.w	d589a <_ZdlPvj>
   d4f94:	bd38      	pop	{r3, r4, r5, pc}

000d4f96 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d4f96:	b507      	push	{r0, r1, r2, lr}
   d4f98:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f9c:	6882      	ldr	r2, [r0, #8]
   d4f9e:	b90a      	cbnz	r2, d4fa4 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d4fa0:	f000 fc7d 	bl	d589e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4fa4:	68c3      	ldr	r3, [r0, #12]
   d4fa6:	aa01      	add	r2, sp, #4
   d4fa8:	4669      	mov	r1, sp
   d4faa:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d4fac:	b003      	add	sp, #12
   d4fae:	f85d fb04 	ldr.w	pc, [sp], #4

000d4fb2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4fb2:	b513      	push	{r0, r1, r4, lr}
   d4fb4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4fb6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4fba:	2300      	movs	r3, #0
   d4fbc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4fbe:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4fc0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4fc2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fc4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4fc6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4fc8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fca:	f7ff fea2 	bl	d4d12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fce:	4620      	mov	r0, r4
   d4fd0:	b002      	add	sp, #8
   d4fd2:	bd10      	pop	{r4, pc}

000d4fd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fd6:	460c      	mov	r4, r1
   d4fd8:	ad02      	add	r5, sp, #8
   d4fda:	f854 3b04 	ldr.w	r3, [r4], #4
   d4fde:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4fe2:	4606      	mov	r6, r0
   d4fe4:	460f      	mov	r7, r1
   d4fe6:	a801      	add	r0, sp, #4
   d4fe8:	4621      	mov	r1, r4
   d4fea:	f7ff fe8b 	bl	d4d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4fee:	4629      	mov	r1, r5
   d4ff0:	4630      	mov	r0, r6
   d4ff2:	f7ff ffde 	bl	d4fb2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ff6:	a801      	add	r0, sp, #4
   d4ff8:	f7ff fe8b 	bl	d4d12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	f7ff fe88 	bl	d4d12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5002:	4638      	mov	r0, r7
   d5004:	2108      	movs	r1, #8
   d5006:	f000 fc48 	bl	d589a <_ZdlPvj>
        return p;
    }
   d500a:	4630      	mov	r0, r6
   d500c:	b003      	add	sp, #12
   d500e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5010 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5010:	b513      	push	{r0, r1, r4, lr}
   d5012:	460b      	mov	r3, r1
   d5014:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5016:	c803      	ldmia	r0, {r0, r1}
   d5018:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d501c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5020:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5024:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5028:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d502c:	b002      	add	sp, #8
   d502e:	bd10      	pop	{r4, pc}

000d5030 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5030:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5032:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5034:	b90a      	cbnz	r2, d503a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5036:	f000 fc32 	bl	d589e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d503a:	68c3      	ldr	r3, [r0, #12]
    }
   d503c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5040:	4718      	bx	r3

000d5042 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5042:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5044:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5046:	f100 0110 	add.w	r1, r0, #16
   d504a:	f7ff fff1 	bl	d5030 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d504e:	bd08      	pop	{r3, pc}

000d5050 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5050:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5052:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5054:	b90a      	cbnz	r2, d505a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5056:	f000 fc22 	bl	d589e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d505a:	68c3      	ldr	r3, [r0, #12]
    }
   d505c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5060:	4718      	bx	r3

000d5062 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5062:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5064:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5066:	f100 0110 	add.w	r1, r0, #16
   d506a:	f7ff fff1 	bl	d5050 <_ZNKSt8functionIFvRKbEEclES1_>
   d506e:	bd08      	pop	{r3, pc}

000d5070 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5070:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5072:	2300      	movs	r3, #0
   d5074:	6083      	str	r3, [r0, #8]
   d5076:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5078:	4604      	mov	r4, r0
   d507a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d507c:	b12b      	cbz	r3, d508a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d507e:	2202      	movs	r2, #2
   d5080:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5082:	68eb      	ldr	r3, [r5, #12]
   d5084:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5086:	68ab      	ldr	r3, [r5, #8]
   d5088:	60a3      	str	r3, [r4, #8]
	}
    }
   d508a:	4620      	mov	r0, r4
   d508c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5094:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5098:	b086      	sub	sp, #24
   d509a:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d509c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d50a0:	808b      	strh	r3, [r1, #4]
   d50a2:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d50a4:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d50a6:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d50aa:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d50ac:	f04f 0002 	mov.w	r0, #2
   d50b0:	e8d4 1f4f 	ldrexb	r1, [r4]
   d50b4:	4299      	cmp	r1, r3
   d50b6:	d103      	bne.n	d50c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d50b8:	e8c4 0f45 	strexb	r5, r0, [r4]
   d50bc:	2d00      	cmp	r5, #0
   d50be:	d1f7      	bne.n	d50b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d50c0:	d002      	beq.n	d50c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d50c2:	f88d 1000 	strb.w	r1, [sp]
   d50c6:	e06b      	b.n	d51a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d50c8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d50cc:	bf1e      	ittt	ne
   d50ce:	60e7      	strne	r7, [r4, #12]
   d50d0:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d50d2:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d50d4:	2301      	movs	r3, #1
   d50d6:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d50da:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d50dc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d50de:	f104 0308 	add.w	r3, r4, #8
   d50e2:	f3bf 8f5f 	dmb	sy
   d50e6:	e853 6f00 	ldrex	r6, [r3]
   d50ea:	e843 0200 	strex	r2, r0, [r3]
   d50ee:	2a00      	cmp	r2, #0
   d50f0:	d1f9      	bne.n	d50e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d50f2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d50f6:	2e00      	cmp	r6, #0
   d50f8:	d052      	beq.n	d51a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d50fa:	f7ff fb67 	bl	d47cc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d50fe:	b120      	cbz	r0, d510a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5100:	4629      	mov	r1, r5
   d5102:	4630      	mov	r0, r6
   d5104:	f7ff ff94 	bl	d5030 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5108:	e043      	b.n	d5192 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d510a:	4631      	mov	r1, r6
   d510c:	4668      	mov	r0, sp
   d510e:	f7ff ffaf 	bl	d5070 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5112:	68e0      	ldr	r0, [r4, #12]
   d5114:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5118:	b108      	cbz	r0, d511e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d511a:	f001 fa4f 	bl	d65bc <strdup>
   d511e:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5120:	2010      	movs	r0, #16
   d5122:	f8ad 5014 	strh.w	r5, [sp, #20]
   d5126:	f7fe ffb6 	bl	d4096 <_Znwj>
   d512a:	4605      	mov	r5, r0
   d512c:	b330      	cbz	r0, d517c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d512e:	f04f 0800 	mov.w	r8, #0
   d5132:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5136:	2018      	movs	r0, #24
   d5138:	f7fe ffad 	bl	d4096 <_Znwj>
   d513c:	4604      	mov	r4, r0
   d513e:	b1c0      	cbz	r0, d5172 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5140:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5144:	4601      	mov	r1, r0
   d5146:	4668      	mov	r0, sp
   d5148:	f7ff ff62 	bl	d5010 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d514c:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d514e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5150:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5152:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5154:	9202      	str	r2, [sp, #8]
   d5156:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5158:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d515a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d515e:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5160:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5164:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5168:	9b04      	ldr	r3, [sp, #16]
   d516a:	9203      	str	r2, [sp, #12]
   d516c:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d516e:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5172:	4b0e      	ldr	r3, [pc, #56]	; (d51ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d5174:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5176:	4b0e      	ldr	r3, [pc, #56]	; (d51b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5178:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d517a:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d517c:	9804      	ldr	r0, [sp, #16]
   d517e:	f7ff fb51 	bl	d4824 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5182:	4668      	mov	r0, sp
   d5184:	f7ff f890 	bl	d42a8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5188:	2200      	movs	r2, #0
   d518a:	4629      	mov	r1, r5
   d518c:	4809      	ldr	r0, [pc, #36]	; (d51b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d518e:	f7ff fb25 	bl	d47dc <application_thread_invoke>
   d5192:	4630      	mov	r0, r6
   d5194:	f7ff f888 	bl	d42a8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5198:	2110      	movs	r1, #16
   d519a:	4630      	mov	r0, r6
   d519c:	f000 fb7d 	bl	d589a <_ZdlPvj>
   d51a0:	4638      	mov	r0, r7
   d51a2:	f7ff fb3f 	bl	d4824 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d51a6:	b006      	add	sp, #24
   d51a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d51ac:	000d5043 	.word	0x000d5043
   d51b0:	000d52a1 	.word	0x000d52a1
   d51b4:	000d4be1 	.word	0x000d4be1

000d51b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d51b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51bc:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d51be:	ad07      	add	r5, sp, #28
   d51c0:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d51c4:	4606      	mov	r6, r0
   d51c6:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d51c8:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d51ca:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d51cc:	460f      	mov	r7, r1
   d51ce:	4690      	mov	r8, r2
   d51d0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d51d4:	f8c5 b004 	str.w	fp, [r5, #4]
   d51d8:	f8c5 b008 	str.w	fp, [r5, #8]
   d51dc:	9307      	str	r3, [sp, #28]
   d51de:	f7fe ff5a 	bl	d4096 <_Znwj>
   d51e2:	4604      	mov	r4, r0
   d51e4:	b138      	cbz	r0, d51f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d51e6:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51ea:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51ee:	f8c0 b004 	str.w	fp, [r0, #4]
   d51f2:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d51f6:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51f8:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d51fa:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d51fc:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51fe:	f7fe ff4a 	bl	d4096 <_Znwj>
   d5202:	b128      	cbz	r0, d5210 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5204:	2301      	movs	r3, #1
   d5206:	6043      	str	r3, [r0, #4]
   d5208:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d520a:	4b23      	ldr	r3, [pc, #140]	; (d5298 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d520c:	6003      	str	r3, [r0, #0]
   d520e:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5210:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5212:	4b22      	ldr	r3, [pc, #136]	; (d529c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d5214:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5216:	2008      	movs	r0, #8
   d5218:	f7fe ff3d 	bl	d4096 <_Znwj>
   d521c:	4604      	mov	r4, r0
   d521e:	b128      	cbz	r0, d522c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5220:	9b03      	ldr	r3, [sp, #12]
   d5222:	f840 3b04 	str.w	r3, [r0], #4
   d5226:	a904      	add	r1, sp, #16
   d5228:	f7ff fd6c 	bl	d4d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d522c:	9500      	str	r5, [sp, #0]
   d522e:	fa5f f38a 	uxtb.w	r3, sl
   d5232:	464a      	mov	r2, r9
   d5234:	4641      	mov	r1, r8
   d5236:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5238:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d523a:	f7ff fa57 	bl	d46ec <spark_send_event>
   d523e:	b9b8      	cbnz	r0, d5270 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5240:	9b03      	ldr	r3, [sp, #12]
   d5242:	785b      	ldrb	r3, [r3, #1]
   d5244:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5248:	b993      	cbnz	r3, d5270 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d524a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d524e:	a905      	add	r1, sp, #20
   d5250:	a803      	add	r0, sp, #12
   d5252:	9205      	str	r2, [sp, #20]
   d5254:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5258:	f7ff ff1a 	bl	d5090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d525c:	9805      	ldr	r0, [sp, #20]
   d525e:	f7ff fae1 	bl	d4824 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5262:	a805      	add	r0, sp, #20
   d5264:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5266:	f7ff feb5 	bl	d4fd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d526a:	a806      	add	r0, sp, #24
   d526c:	f7ff fd51 	bl	d4d12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5270:	9b03      	ldr	r3, [sp, #12]
   d5272:	9305      	str	r3, [sp, #20]
   d5274:	a904      	add	r1, sp, #16
   d5276:	a806      	add	r0, sp, #24
   d5278:	f7ff fd44 	bl	d4d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d527c:	a905      	add	r1, sp, #20
   d527e:	4630      	mov	r0, r6
   d5280:	f7ff fe97 	bl	d4fb2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5284:	a806      	add	r0, sp, #24
   d5286:	f7ff fd44 	bl	d4d12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d528a:	a804      	add	r0, sp, #16
   d528c:	f7ff fd41 	bl	d4d12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5290:	4630      	mov	r0, r6
   d5292:	b00b      	add	sp, #44	; 0x2c
   d5294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5298:	000d82dc 	.word	0x000d82dc
   d529c:	000d540d 	.word	0x000d540d

000d52a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d52a0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52a4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d52a6:	d006      	beq.n	d52b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d52a8:	2a03      	cmp	r2, #3
   d52aa:	d017      	beq.n	d52dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d52ac:	2a01      	cmp	r2, #1
   d52ae:	d121      	bne.n	d52f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d52b0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d52b2:	6003      	str	r3, [r0, #0]
	      break;
   d52b4:	e01e      	b.n	d52f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d52b6:	2018      	movs	r0, #24
   d52b8:	680e      	ldr	r6, [r1, #0]
   d52ba:	f7fe feec 	bl	d4096 <_Znwj>
   d52be:	4605      	mov	r5, r0
   d52c0:	b150      	cbz	r0, d52d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d52c2:	4631      	mov	r1, r6
   d52c4:	f7ff fed4 	bl	d5070 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d52c8:	6930      	ldr	r0, [r6, #16]
   d52ca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d52ce:	b108      	cbz	r0, d52d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d52d0:	f001 f974 	bl	d65bc <strdup>
   d52d4:	6128      	str	r0, [r5, #16]
   d52d6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d52d8:	6025      	str	r5, [r4, #0]
   d52da:	e00b      	b.n	d52f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52dc:	6804      	ldr	r4, [r0, #0]
   d52de:	b14c      	cbz	r4, d52f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d52e0:	6920      	ldr	r0, [r4, #16]
   d52e2:	f7ff fa9f 	bl	d4824 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52e6:	4620      	mov	r0, r4
   d52e8:	f7fe ffde 	bl	d42a8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52ec:	2118      	movs	r1, #24
   d52ee:	4620      	mov	r0, r4
   d52f0:	f000 fad3 	bl	d589a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d52f4:	2000      	movs	r0, #0
   d52f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52f8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52fa:	2300      	movs	r3, #0
   d52fc:	6083      	str	r3, [r0, #8]
   d52fe:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5300:	4604      	mov	r4, r0
   d5302:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5304:	b12b      	cbz	r3, d5312 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5306:	2202      	movs	r2, #2
   d5308:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d530a:	68eb      	ldr	r3, [r5, #12]
   d530c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d530e:	68ab      	ldr	r3, [r5, #8]
   d5310:	60a3      	str	r3, [r4, #8]
	}
    }
   d5312:	4620      	mov	r0, r4
   d5314:	bd38      	pop	{r3, r4, r5, pc}

000d5316 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5316:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5318:	b570      	push	{r4, r5, r6, lr}
   d531a:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d531c:	d006      	beq.n	d532c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d531e:	2a03      	cmp	r2, #3
   d5320:	d011      	beq.n	d5346 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5322:	2a01      	cmp	r2, #1
   d5324:	d118      	bne.n	d5358 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5326:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5328:	6003      	str	r3, [r0, #0]
	      break;
   d532a:	e015      	b.n	d5358 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d532c:	2014      	movs	r0, #20
   d532e:	680e      	ldr	r6, [r1, #0]
   d5330:	f7fe feb1 	bl	d4096 <_Znwj>
   d5334:	4605      	mov	r5, r0
   d5336:	b120      	cbz	r0, d5342 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5338:	4631      	mov	r1, r6
   d533a:	f7ff ffdd 	bl	d52f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d533e:	7c33      	ldrb	r3, [r6, #16]
   d5340:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5342:	6025      	str	r5, [r4, #0]
   d5344:	e008      	b.n	d5358 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5346:	6804      	ldr	r4, [r0, #0]
   d5348:	b134      	cbz	r4, d5358 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d534a:	4620      	mov	r0, r4
   d534c:	f7fe ffac 	bl	d42a8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5350:	2114      	movs	r1, #20
   d5352:	4620      	mov	r0, r4
   d5354:	f000 faa1 	bl	d589a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5358:	2000      	movs	r0, #0
   d535a:	bd70      	pop	{r4, r5, r6, pc}

000d535c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d535c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d535e:	2300      	movs	r3, #0
   d5360:	b087      	sub	sp, #28
   d5362:	460c      	mov	r4, r1
   d5364:	f3bf 8f5f 	dmb	sy
   d5368:	e850 6f00 	ldrex	r6, [r0]
   d536c:	e840 3200 	strex	r2, r3, [r0]
   d5370:	2a00      	cmp	r2, #0
   d5372:	d1f9      	bne.n	d5368 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5374:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5378:	2e00      	cmp	r6, #0
   d537a:	d03f      	beq.n	d53fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d537c:	4618      	mov	r0, r3
   d537e:	f7ff fa25 	bl	d47cc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5382:	4607      	mov	r7, r0
   d5384:	b120      	cbz	r0, d5390 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5386:	4621      	mov	r1, r4
   d5388:	4630      	mov	r0, r6
   d538a:	f7ff fe61 	bl	d5050 <_ZNKSt8functionIFvRKbEEclES1_>
   d538e:	e02e      	b.n	d53ee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5390:	4631      	mov	r1, r6
   d5392:	a801      	add	r0, sp, #4
   d5394:	f7ff ffb0 	bl	d52f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5398:	7823      	ldrb	r3, [r4, #0]
   d539a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d539e:	2010      	movs	r0, #16
   d53a0:	f7fe fe79 	bl	d4096 <_Znwj>
   d53a4:	4605      	mov	r5, r0
   d53a6:	b1d0      	cbz	r0, d53de <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53a8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53aa:	2014      	movs	r0, #20
   d53ac:	f7fe fe73 	bl	d4096 <_Znwj>
   d53b0:	4604      	mov	r4, r0
   d53b2:	b178      	cbz	r0, d53d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53b4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d53b6:	4601      	mov	r1, r0
   d53b8:	a801      	add	r0, sp, #4
   d53ba:	f7ff fe29 	bl	d5010 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53be:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d53c0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53c2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53c4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d53c6:	9203      	str	r2, [sp, #12]
   d53c8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53ca:	60e3      	str	r3, [r4, #12]
   d53cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d53d0:	9204      	str	r2, [sp, #16]
   d53d2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d53d4:	4b0a      	ldr	r3, [pc, #40]	; (d5400 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d53d6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53d8:	4b0a      	ldr	r3, [pc, #40]	; (d5404 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53da:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d53dc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53de:	a801      	add	r0, sp, #4
   d53e0:	f7fe ff62 	bl	d42a8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d53e4:	2200      	movs	r2, #0
   d53e6:	4629      	mov	r1, r5
   d53e8:	4807      	ldr	r0, [pc, #28]	; (d5408 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d53ea:	f7ff f9f7 	bl	d47dc <application_thread_invoke>
   d53ee:	4630      	mov	r0, r6
   d53f0:	f7fe ff5a 	bl	d42a8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d53f4:	2110      	movs	r1, #16
   d53f6:	4630      	mov	r0, r6
   d53f8:	f000 fa4f 	bl	d589a <_ZdlPvj>
        }
    }
   d53fc:	b007      	add	sp, #28
   d53fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5400:	000d5063 	.word	0x000d5063
   d5404:	000d5317 	.word	0x000d5317
   d5408:	000d4be1 	.word	0x000d4be1

000d540c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d540c:	b530      	push	{r4, r5, lr}
   d540e:	b085      	sub	sp, #20
   d5410:	4604      	mov	r4, r0
   d5412:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5414:	4668      	mov	r0, sp
   d5416:	4611      	mov	r1, r2
   d5418:	f7ff fddc 	bl	d4fd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d541c:	b17c      	cbz	r4, d543e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d541e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5420:	4628      	mov	r0, r5
   d5422:	b10d      	cbz	r5, d5428 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5424:	f001 f8ca 	bl	d65bc <strdup>
   d5428:	9002      	str	r0, [sp, #8]
   d542a:	a902      	add	r1, sp, #8
   d542c:	4668      	mov	r0, sp
   d542e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5432:	f7ff fe2d 	bl	d5090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5436:	9802      	ldr	r0, [sp, #8]
   d5438:	f7ff f9f4 	bl	d4824 <free>
   d543c:	e01d      	b.n	d547a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d543e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5440:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5444:	f04f 0201 	mov.w	r2, #1
   d5448:	e8d0 3f4f 	ldrexb	r3, [r0]
   d544c:	42a3      	cmp	r3, r4
   d544e:	d103      	bne.n	d5458 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5450:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5454:	2900      	cmp	r1, #0
   d5456:	d1f7      	bne.n	d5448 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5458:	d002      	beq.n	d5460 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d545a:	f88d 3008 	strb.w	r3, [sp, #8]
   d545e:	e00c      	b.n	d547a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5460:	f110 010c 	adds.w	r1, r0, #12
   d5464:	f04f 0301 	mov.w	r3, #1
   d5468:	bf18      	it	ne
   d546a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d546c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5470:	3004      	adds	r0, #4
   d5472:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5476:	f7ff ff71 	bl	d535c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d547a:	a801      	add	r0, sp, #4
   d547c:	f7ff fc49 	bl	d4d12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5480:	b005      	add	sp, #20
   d5482:	bd30      	pop	{r4, r5, pc}

000d5484 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5484:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5486:	4b0c      	ldr	r3, [pc, #48]	; (d54b8 <serialEventRun+0x34>)
   d5488:	b133      	cbz	r3, d5498 <serialEventRun+0x14>
   d548a:	f7ff fcbb 	bl	d4e04 <_Z16_fetch_usbserialv>
   d548e:	6803      	ldr	r3, [r0, #0]
   d5490:	691b      	ldr	r3, [r3, #16]
   d5492:	4798      	blx	r3
   d5494:	2800      	cmp	r0, #0
   d5496:	dc09      	bgt.n	d54ac <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5498:	4b08      	ldr	r3, [pc, #32]	; (d54bc <serialEventRun+0x38>)
   d549a:	b163      	cbz	r3, d54b6 <serialEventRun+0x32>
   d549c:	f7ff fc0c 	bl	d4cb8 <_Z22__fetch_global_Serial1v>
   d54a0:	6803      	ldr	r3, [r0, #0]
   d54a2:	691b      	ldr	r3, [r3, #16]
   d54a4:	4798      	blx	r3
   d54a6:	2800      	cmp	r0, #0
   d54a8:	dc03      	bgt.n	d54b2 <serialEventRun+0x2e>
   d54aa:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d54ac:	f3af 8000 	nop.w
   d54b0:	e7f2      	b.n	d5498 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d54b2:	f3af 8000 	nop.w
   d54b6:	bd08      	pop	{r3, pc}
	...

000d54c0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d54c0:	b508      	push	{r3, lr}
	serialEventRun();
   d54c2:	f7ff ffdf 	bl	d5484 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d54c6:	f7ff f8d9 	bl	d467c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d54ca:	4b01      	ldr	r3, [pc, #4]	; (d54d0 <_post_loop+0x10>)
   d54cc:	6018      	str	r0, [r3, #0]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	2003e72c 	.word	0x2003e72c

000d54d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d54d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d54d6:	2300      	movs	r3, #0
   d54d8:	9300      	str	r3, [sp, #0]
   d54da:	461a      	mov	r2, r3
   d54dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d54e0:	f7ff f98e 	bl	d4800 <system_ctrl_set_result>
}
   d54e4:	b003      	add	sp, #12
   d54e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d54ec <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d54ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d54ee:	8843      	ldrh	r3, [r0, #2]
   d54f0:	2b0a      	cmp	r3, #10
   d54f2:	d008      	beq.n	d5506 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d54f4:	2b50      	cmp	r3, #80	; 0x50
   d54f6:	d109      	bne.n	d550c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d54f8:	4b09      	ldr	r3, [pc, #36]	; (d5520 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d54fa:	681b      	ldr	r3, [r3, #0]
   d54fc:	b13b      	cbz	r3, d550e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d54fe:	b003      	add	sp, #12
   d5500:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5504:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5506:	f7ff ffe5 	bl	d54d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d550a:	e006      	b.n	d551a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d550c:	2300      	movs	r3, #0
   d550e:	9300      	str	r3, [sp, #0]
   d5510:	461a      	mov	r2, r3
   d5512:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5516:	f7ff f973 	bl	d4800 <system_ctrl_set_result>
        break;
    }
}
   d551a:	b003      	add	sp, #12
   d551c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5520:	2003e6fc 	.word	0x2003e6fc

000d5524 <module_user_init_hook>:

void module_user_init_hook()
{
   d5524:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5526:	f7ff f8a1 	bl	d466c <HAL_RNG_GetRandomNumber>
   d552a:	4604      	mov	r4, r0
    srand(seed);
   d552c:	f001 f816 	bl	d655c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5530:	4b07      	ldr	r3, [pc, #28]	; (d5550 <module_user_init_hook+0x2c>)
   d5532:	b113      	cbz	r3, d553a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5534:	4620      	mov	r0, r4
   d5536:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d553a:	2100      	movs	r1, #0
   d553c:	4804      	ldr	r0, [pc, #16]	; (d5550 <module_user_init_hook+0x2c>)
   d553e:	f7ff f8e5 	bl	d470c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5542:	2100      	movs	r1, #0
   d5544:	4803      	ldr	r0, [pc, #12]	; (d5554 <module_user_init_hook+0x30>)
}
   d5546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d554a:	f7ff b94f 	b.w	d47ec <system_ctrl_set_app_request_handler>
   d554e:	bf00      	nop
   d5550:	00000000 	.word	0x00000000
   d5554:	000d54ed 	.word	0x000d54ed

000d5558 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5558:	b510      	push	{r4, lr}
   d555a:	4604      	mov	r4, r0
   d555c:	f7fe fea4 	bl	d42a8 <_ZNSt14_Function_baseD1Ev>
   d5560:	4620      	mov	r0, r4
   d5562:	bd10      	pop	{r4, pc}

000d5564 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5564:	4803      	ldr	r0, [pc, #12]	; (d5574 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5566:	4a04      	ldr	r2, [pc, #16]	; (d5578 <_GLOBAL__sub_I_RGB+0x14>)
   d5568:	4904      	ldr	r1, [pc, #16]	; (d557c <_GLOBAL__sub_I_RGB+0x18>)
   d556a:	2300      	movs	r3, #0
   d556c:	6083      	str	r3, [r0, #8]
   d556e:	f000 b98f 	b.w	d5890 <__aeabi_atexit>
   d5572:	bf00      	nop
   d5574:	2003e700 	.word	0x2003e700
   d5578:	2003e2a8 	.word	0x2003e2a8
   d557c:	000d5559 	.word	0x000d5559

000d5580 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5580:	4b02      	ldr	r3, [pc, #8]	; (d558c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5582:	681a      	ldr	r2, [r3, #0]
   d5584:	4b02      	ldr	r3, [pc, #8]	; (d5590 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5586:	601a      	str	r2, [r3, #0]
   d5588:	4770      	bx	lr
   d558a:	bf00      	nop
   d558c:	2003e208 	.word	0x2003e208
   d5590:	2003e710 	.word	0x2003e710

000d5594 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5594:	4b01      	ldr	r3, [pc, #4]	; (d559c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5596:	4a02      	ldr	r2, [pc, #8]	; (d55a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5598:	601a      	str	r2, [r3, #0]
   d559a:	4770      	bx	lr
   d559c:	2003e714 	.word	0x2003e714
   d55a0:	000d83cf 	.word	0x000d83cf

000d55a4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d55a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55a6:	4606      	mov	r6, r0
   d55a8:	460d      	mov	r5, r1
   d55aa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d55ac:	2400      	movs	r4, #0
  while (size--) {
   d55ae:	42bd      	cmp	r5, r7
   d55b0:	d00c      	beq.n	d55cc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d55b2:	6833      	ldr	r3, [r6, #0]
   d55b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d55b8:	689b      	ldr	r3, [r3, #8]
   d55ba:	4630      	mov	r0, r6
   d55bc:	4798      	blx	r3
     if (chunk>=0)
   d55be:	2800      	cmp	r0, #0
   d55c0:	db01      	blt.n	d55c6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d55c2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d55c4:	e7f3      	b.n	d55ae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d55c6:	2c00      	cmp	r4, #0
   d55c8:	bf08      	it	eq
   d55ca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d55cc:	4620      	mov	r0, r4
   d55ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55d0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d55d0:	b570      	push	{r4, r5, r6, lr}
   d55d2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d55d4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d55d6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d55d8:	b149      	cbz	r1, d55ee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d55da:	f001 f80a 	bl	d65f2 <strlen>
   d55de:	682b      	ldr	r3, [r5, #0]
   d55e0:	4602      	mov	r2, r0
   d55e2:	4621      	mov	r1, r4
   d55e4:	4628      	mov	r0, r5
   d55e6:	68db      	ldr	r3, [r3, #12]
    }
   d55e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d55ec:	4718      	bx	r3
    }
   d55ee:	bd70      	pop	{r4, r5, r6, pc}

000d55f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d55f0:	6803      	ldr	r3, [r0, #0]
   d55f2:	689b      	ldr	r3, [r3, #8]
   d55f4:	4718      	bx	r3

000d55f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d55f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d55f8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d55fa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d55fc:	f7ff fff8 	bl	d55f0 <_ZN5Print5printEc>
  n += print('\n');
   d5600:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5602:	4604      	mov	r4, r0
  n += print('\n');
   d5604:	4628      	mov	r0, r5
   d5606:	f7ff fff3 	bl	d55f0 <_ZN5Print5printEc>
  return n;
}
   d560a:	4420      	add	r0, r4
   d560c:	bd38      	pop	{r3, r4, r5, pc}

000d560e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d560e:	b538      	push	{r3, r4, r5, lr}
   d5610:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5612:	f7ff ffdd 	bl	d55d0 <_ZN5Print5writeEPKc>
   d5616:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5618:	4628      	mov	r0, r5
   d561a:	f7ff ffec 	bl	d55f6 <_ZN5Print7printlnEv>
  return n;
}
   d561e:	4420      	add	r0, r4
   d5620:	bd38      	pop	{r3, r4, r5, pc}

000d5622 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5622:	b530      	push	{r4, r5, lr}
   d5624:	b08b      	sub	sp, #44	; 0x2c
   d5626:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5628:	2100      	movs	r1, #0
   d562a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d562e:	2a01      	cmp	r2, #1
   d5630:	bf98      	it	ls
   d5632:	220a      	movls	r2, #10
   d5634:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5638:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d563c:	fb05 3312 	mls	r3, r5, r2, r3
   d5640:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5644:	2b09      	cmp	r3, #9
   d5646:	bf94      	ite	ls
   d5648:	3330      	addls	r3, #48	; 0x30
   d564a:	3337      	addhi	r3, #55	; 0x37
   d564c:	b2db      	uxtb	r3, r3
   d564e:	4621      	mov	r1, r4
   d5650:	f804 3901 	strb.w	r3, [r4], #-1
   d5654:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5656:	2d00      	cmp	r5, #0
   d5658:	d1ee      	bne.n	d5638 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d565a:	f7ff ffb9 	bl	d55d0 <_ZN5Print5writeEPKc>
}
   d565e:	b00b      	add	sp, #44	; 0x2c
   d5660:	bd30      	pop	{r4, r5, pc}

000d5662 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5662:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5664:	b92a      	cbnz	r2, d5672 <_ZN5Print5printEmi+0x10>
   d5666:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5668:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d566c:	689b      	ldr	r3, [r3, #8]
   d566e:	b2c9      	uxtb	r1, r1
   d5670:	4718      	bx	r3
  else return printNumber(n, base);
   d5672:	b2d2      	uxtb	r2, r2
}
   d5674:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5678:	f7ff bfd3 	b.w	d5622 <_ZN5Print11printNumberEmh>

000d567c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d567c:	f7ff bff1 	b.w	d5662 <_ZN5Print5printEmi>

000d5680 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5680:	b40c      	push	{r2, r3}
   d5682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5686:	b087      	sub	sp, #28
   d5688:	af00      	add	r7, sp, #0
   d568a:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d568e:	4605      	mov	r5, r0
   d5690:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5694:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5696:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5698:	4623      	mov	r3, r4
   d569a:	464a      	mov	r2, r9
   d569c:	2114      	movs	r1, #20
   d569e:	1d38      	adds	r0, r7, #4
   d56a0:	f7ff f8d8 	bl	d4854 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d56a4:	2813      	cmp	r0, #19
   d56a6:	d805      	bhi.n	d56b4 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d56a8:	1d39      	adds	r1, r7, #4
   d56aa:	4628      	mov	r0, r5
   d56ac:	f7ff ff90 	bl	d55d0 <_ZN5Print5writeEPKc>
   d56b0:	4604      	mov	r4, r0
   d56b2:	e013      	b.n	d56dc <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d56b4:	f100 0308 	add.w	r3, r0, #8
   d56b8:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d56bc:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d56be:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d56c2:	1c41      	adds	r1, r0, #1
   d56c4:	4623      	mov	r3, r4
   d56c6:	464a      	mov	r2, r9
   d56c8:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d56ca:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d56cc:	f7ff f8c2 	bl	d4854 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d56d0:	4669      	mov	r1, sp
   d56d2:	4628      	mov	r0, r5
   d56d4:	f7ff ff7c 	bl	d55d0 <_ZN5Print5writeEPKc>
   d56d8:	4604      	mov	r4, r0
   d56da:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d56dc:	b11e      	cbz	r6, d56e6 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d56de:	4628      	mov	r0, r5
   d56e0:	f7ff ff89 	bl	d55f6 <_ZN5Print7printlnEv>
   d56e4:	4404      	add	r4, r0
    return n;
}
   d56e6:	4620      	mov	r0, r4
   d56e8:	371c      	adds	r7, #28
   d56ea:	46bd      	mov	sp, r7
   d56ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d56f0:	b002      	add	sp, #8
   d56f2:	4770      	bx	lr

000d56f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56f4:	4802      	ldr	r0, [pc, #8]	; (d5700 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d56f6:	2300      	movs	r3, #0
   d56f8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d56fa:	f7fe bfaf 	b.w	d465c <os_mutex_recursive_create>
   d56fe:	bf00      	nop
   d5700:	2003e718 	.word	0x2003e718

000d5704 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5704:	b510      	push	{r4, lr}
   d5706:	4604      	mov	r4, r0
{
	free(buffer);
   d5708:	6800      	ldr	r0, [r0, #0]
   d570a:	f7ff f88b 	bl	d4824 <free>
}
   d570e:	4620      	mov	r0, r4
   d5710:	bd10      	pop	{r4, pc}

000d5712 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5712:	b510      	push	{r4, lr}
   d5714:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5716:	6800      	ldr	r0, [r0, #0]
   d5718:	b108      	cbz	r0, d571e <_ZN6String10invalidateEv+0xc>
   d571a:	f7ff f883 	bl	d4824 <free>
	buffer = NULL;
   d571e:	2300      	movs	r3, #0
   d5720:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5722:	60a3      	str	r3, [r4, #8]
   d5724:	6063      	str	r3, [r4, #4]
   d5726:	bd10      	pop	{r4, pc}

000d5728 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5728:	b538      	push	{r3, r4, r5, lr}
   d572a:	4604      	mov	r4, r0
   d572c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d572e:	6800      	ldr	r0, [r0, #0]
   d5730:	3101      	adds	r1, #1
   d5732:	f7ff f87f 	bl	d4834 <realloc>
	if (newbuffer) {
   d5736:	b110      	cbz	r0, d573e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5738:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d573c:	2001      	movs	r0, #1
	}
	return 0;
}
   d573e:	bd38      	pop	{r3, r4, r5, pc}

000d5740 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5740:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5742:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5744:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5746:	b113      	cbz	r3, d574e <_ZN6String7reserveEj+0xe>
   d5748:	6843      	ldr	r3, [r0, #4]
   d574a:	428b      	cmp	r3, r1
   d574c:	d207      	bcs.n	d575e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d574e:	4620      	mov	r0, r4
   d5750:	f7ff ffea 	bl	d5728 <_ZN6String12changeBufferEj>
   d5754:	b120      	cbz	r0, d5760 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5756:	68a3      	ldr	r3, [r4, #8]
   d5758:	b90b      	cbnz	r3, d575e <_ZN6String7reserveEj+0x1e>
   d575a:	6822      	ldr	r2, [r4, #0]
   d575c:	7013      	strb	r3, [r2, #0]
   d575e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5760:	bd10      	pop	{r4, pc}

000d5762 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5762:	b570      	push	{r4, r5, r6, lr}
   d5764:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5766:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5768:	4604      	mov	r4, r0
   d576a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d576c:	f7ff ffe8 	bl	d5740 <_ZN6String7reserveEj>
   d5770:	b918      	cbnz	r0, d577a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5772:	4620      	mov	r0, r4
   d5774:	f7ff ffcd 	bl	d5712 <_ZN6String10invalidateEv>
		return *this;
   d5778:	e009      	b.n	d578e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d577a:	462a      	mov	r2, r5
   d577c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d577e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5780:	6820      	ldr	r0, [r4, #0]
   d5782:	f000 fed7 	bl	d6534 <memcpy>
	buffer[len] = 0;
   d5786:	6822      	ldr	r2, [r4, #0]
   d5788:	68a3      	ldr	r3, [r4, #8]
   d578a:	2100      	movs	r1, #0
   d578c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d578e:	4620      	mov	r0, r4
   d5790:	bd70      	pop	{r4, r5, r6, pc}

000d5792 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5792:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5794:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5796:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5798:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d579a:	6043      	str	r3, [r0, #4]
	len = 0;
   d579c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d579e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d57a0:	460d      	mov	r5, r1
   d57a2:	b139      	cbz	r1, d57b4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d57a4:	4608      	mov	r0, r1
   d57a6:	f000 ff24 	bl	d65f2 <strlen>
   d57aa:	4629      	mov	r1, r5
   d57ac:	4602      	mov	r2, r0
   d57ae:	4620      	mov	r0, r4
   d57b0:	f7ff ffd7 	bl	d5762 <_ZN6String4copyEPKcj>
}
   d57b4:	4620      	mov	r0, r4
   d57b6:	bd38      	pop	{r3, r4, r5, pc}

000d57b8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d57b8:	4b04      	ldr	r3, [pc, #16]	; (d57cc <_GLOBAL__sub_I_System+0x14>)
   d57ba:	2000      	movs	r0, #0
   d57bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d57c0:	7018      	strb	r0, [r3, #0]
   d57c2:	8058      	strh	r0, [r3, #2]
   d57c4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d57c6:	f7fe bff9 	b.w	d47bc <set_system_mode>
   d57ca:	bf00      	nop
   d57cc:	2003e71c 	.word	0x2003e71c

000d57d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57d0:	2200      	movs	r2, #0
   d57d2:	4611      	mov	r1, r2
   d57d4:	6840      	ldr	r0, [r0, #4]
   d57d6:	f7fe bfd9 	b.w	d478c <network_listening>

000d57da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57da:	2200      	movs	r2, #0
   d57dc:	4611      	mov	r1, r2
   d57de:	6840      	ldr	r0, [r0, #4]
   d57e0:	f7fe bfe4 	b.w	d47ac <network_get_listen_timeout>

000d57e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d57e4:	2200      	movs	r2, #0
   d57e6:	6840      	ldr	r0, [r0, #4]
   d57e8:	f7fe bfd8 	b.w	d479c <network_set_listen_timeout>

000d57ec <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d57ec:	2200      	movs	r2, #0
   d57ee:	f081 0101 	eor.w	r1, r1, #1
   d57f2:	6840      	ldr	r0, [r0, #4]
   d57f4:	f7fe bfc2 	b.w	d477c <network_listen>

000d57f8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d57f8:	2300      	movs	r3, #0
   d57fa:	461a      	mov	r2, r3
   d57fc:	4619      	mov	r1, r3
   d57fe:	6840      	ldr	r0, [r0, #4]
   d5800:	f7fe bfb4 	b.w	d476c <network_off>

000d5804 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5804:	2300      	movs	r3, #0
   d5806:	461a      	mov	r2, r3
   d5808:	4619      	mov	r1, r3
   d580a:	6840      	ldr	r0, [r0, #4]
   d580c:	f7fe bfa6 	b.w	d475c <network_on>

000d5810 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5810:	2200      	movs	r2, #0
   d5812:	4611      	mov	r1, r2
   d5814:	6840      	ldr	r0, [r0, #4]
   d5816:	f7fe bf99 	b.w	d474c <network_ready>

000d581a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d581a:	2200      	movs	r2, #0
   d581c:	4611      	mov	r1, r2
   d581e:	6840      	ldr	r0, [r0, #4]
   d5820:	f7fe bf84 	b.w	d472c <network_connecting>

000d5824 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5824:	2200      	movs	r2, #0
   d5826:	2102      	movs	r1, #2
   d5828:	6840      	ldr	r0, [r0, #4]
   d582a:	f7fe bf87 	b.w	d473c <network_disconnect>

000d582e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d582e:	2300      	movs	r3, #0
   d5830:	461a      	mov	r2, r3
   d5832:	6840      	ldr	r0, [r0, #4]
   d5834:	f7fe bf72 	b.w	d471c <network_connect>

000d5838 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5838:	4b02      	ldr	r3, [pc, #8]	; (d5844 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d583a:	2203      	movs	r2, #3
   d583c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d583e:	4a02      	ldr	r2, [pc, #8]	; (d5848 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5840:	601a      	str	r2, [r3, #0]
   d5842:	4770      	bx	lr
   d5844:	2003e724 	.word	0x2003e724
   d5848:	000d8400 	.word	0x000d8400

000d584c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d584c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d584e:	4c0c      	ldr	r4, [pc, #48]	; (d5880 <_GLOBAL__sub_I_SPI+0x34>)
   d5850:	4e0c      	ldr	r6, [pc, #48]	; (d5884 <_GLOBAL__sub_I_SPI+0x38>)
   d5852:	4d0d      	ldr	r5, [pc, #52]	; (d5888 <_GLOBAL__sub_I_SPI+0x3c>)
   d5854:	2100      	movs	r1, #0
   d5856:	4620      	mov	r0, r4
   d5858:	f7ff f9ae 	bl	d4bb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d585c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d585e:	4c0b      	ldr	r4, [pc, #44]	; (d588c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5860:	4632      	mov	r2, r6
   d5862:	4629      	mov	r1, r5
   d5864:	f000 f814 	bl	d5890 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5868:	2101      	movs	r1, #1
   d586a:	4620      	mov	r0, r4
   d586c:	f7ff f9a4 	bl	d4bb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5870:	4632      	mov	r2, r6
   d5872:	4629      	mov	r1, r5
   d5874:	4620      	mov	r0, r4
   d5876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d587a:	f000 b809 	b.w	d5890 <__aeabi_atexit>
   d587e:	bf00      	nop
   d5880:	2003e730 	.word	0x2003e730
   d5884:	2003e2a8 	.word	0x2003e2a8
   d5888:	000d4ba9 	.word	0x000d4ba9
   d588c:	2003e740 	.word	0x2003e740

000d5890 <__aeabi_atexit>:
   d5890:	460b      	mov	r3, r1
   d5892:	4601      	mov	r1, r0
   d5894:	4618      	mov	r0, r3
   d5896:	f000 be3b 	b.w	d6510 <__cxa_atexit>

000d589a <_ZdlPvj>:
   d589a:	f7fe bbfe 	b.w	d409a <_ZdlPv>

000d589e <_ZSt25__throw_bad_function_callv>:
   d589e:	b508      	push	{r3, lr}
   d58a0:	f7fe ffe0 	bl	d4864 <abort>

000d58a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d58a4:	4b18      	ldr	r3, [pc, #96]	; (d5908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d58a6:	681a      	ldr	r2, [r3, #0]
   d58a8:	07d1      	lsls	r1, r2, #31
   d58aa:	bf5c      	itt	pl
   d58ac:	2201      	movpl	r2, #1
   d58ae:	601a      	strpl	r2, [r3, #0]
   d58b0:	4b16      	ldr	r3, [pc, #88]	; (d590c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d58b2:	681a      	ldr	r2, [r3, #0]
   d58b4:	07d2      	lsls	r2, r2, #31
   d58b6:	bf5c      	itt	pl
   d58b8:	2201      	movpl	r2, #1
   d58ba:	601a      	strpl	r2, [r3, #0]
   d58bc:	4b14      	ldr	r3, [pc, #80]	; (d5910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d58be:	681a      	ldr	r2, [r3, #0]
   d58c0:	07d0      	lsls	r0, r2, #31
   d58c2:	bf5c      	itt	pl
   d58c4:	2201      	movpl	r2, #1
   d58c6:	601a      	strpl	r2, [r3, #0]
   d58c8:	4b12      	ldr	r3, [pc, #72]	; (d5914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d58ca:	681a      	ldr	r2, [r3, #0]
   d58cc:	07d1      	lsls	r1, r2, #31
   d58ce:	bf5c      	itt	pl
   d58d0:	2201      	movpl	r2, #1
   d58d2:	601a      	strpl	r2, [r3, #0]
   d58d4:	4b10      	ldr	r3, [pc, #64]	; (d5918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d58d6:	681a      	ldr	r2, [r3, #0]
   d58d8:	07d2      	lsls	r2, r2, #31
   d58da:	bf5c      	itt	pl
   d58dc:	2201      	movpl	r2, #1
   d58de:	601a      	strpl	r2, [r3, #0]
   d58e0:	4b0e      	ldr	r3, [pc, #56]	; (d591c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d58e2:	681a      	ldr	r2, [r3, #0]
   d58e4:	07d0      	lsls	r0, r2, #31
   d58e6:	bf5c      	itt	pl
   d58e8:	2201      	movpl	r2, #1
   d58ea:	601a      	strpl	r2, [r3, #0]
   d58ec:	4b0c      	ldr	r3, [pc, #48]	; (d5920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d58ee:	681a      	ldr	r2, [r3, #0]
   d58f0:	07d1      	lsls	r1, r2, #31
   d58f2:	bf5c      	itt	pl
   d58f4:	2201      	movpl	r2, #1
   d58f6:	601a      	strpl	r2, [r3, #0]
   d58f8:	4b0a      	ldr	r3, [pc, #40]	; (d5924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d58fa:	681a      	ldr	r2, [r3, #0]
   d58fc:	07d2      	lsls	r2, r2, #31
   d58fe:	bf5c      	itt	pl
   d5900:	2201      	movpl	r2, #1
   d5902:	601a      	strpl	r2, [r3, #0]
   d5904:	4770      	bx	lr
   d5906:	bf00      	nop
   d5908:	2003e76c 	.word	0x2003e76c
   d590c:	2003e768 	.word	0x2003e768
   d5910:	2003e764 	.word	0x2003e764
   d5914:	2003e760 	.word	0x2003e760
   d5918:	2003e75c 	.word	0x2003e75c
   d591c:	2003e758 	.word	0x2003e758
   d5920:	2003e754 	.word	0x2003e754
   d5924:	2003e750 	.word	0x2003e750

000d5928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5928:	4b24      	ldr	r3, [pc, #144]	; (d59bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d592a:	681a      	ldr	r2, [r3, #0]
   d592c:	07d0      	lsls	r0, r2, #31
   d592e:	bf5c      	itt	pl
   d5930:	2201      	movpl	r2, #1
   d5932:	601a      	strpl	r2, [r3, #0]
   d5934:	4b22      	ldr	r3, [pc, #136]	; (d59c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5936:	681a      	ldr	r2, [r3, #0]
   d5938:	07d1      	lsls	r1, r2, #31
   d593a:	bf5c      	itt	pl
   d593c:	2201      	movpl	r2, #1
   d593e:	601a      	strpl	r2, [r3, #0]
   d5940:	4b20      	ldr	r3, [pc, #128]	; (d59c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5942:	681a      	ldr	r2, [r3, #0]
   d5944:	07d2      	lsls	r2, r2, #31
   d5946:	bf5c      	itt	pl
   d5948:	2201      	movpl	r2, #1
   d594a:	601a      	strpl	r2, [r3, #0]
   d594c:	4b1e      	ldr	r3, [pc, #120]	; (d59c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d594e:	681a      	ldr	r2, [r3, #0]
   d5950:	07d0      	lsls	r0, r2, #31
   d5952:	bf5c      	itt	pl
   d5954:	2201      	movpl	r2, #1
   d5956:	601a      	strpl	r2, [r3, #0]
   d5958:	4b1c      	ldr	r3, [pc, #112]	; (d59cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d595a:	681a      	ldr	r2, [r3, #0]
   d595c:	07d1      	lsls	r1, r2, #31
   d595e:	bf5c      	itt	pl
   d5960:	2201      	movpl	r2, #1
   d5962:	601a      	strpl	r2, [r3, #0]
   d5964:	4b1a      	ldr	r3, [pc, #104]	; (d59d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5966:	681a      	ldr	r2, [r3, #0]
   d5968:	07d2      	lsls	r2, r2, #31
   d596a:	bf5c      	itt	pl
   d596c:	2201      	movpl	r2, #1
   d596e:	601a      	strpl	r2, [r3, #0]
   d5970:	4b18      	ldr	r3, [pc, #96]	; (d59d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5972:	681a      	ldr	r2, [r3, #0]
   d5974:	07d0      	lsls	r0, r2, #31
   d5976:	bf5c      	itt	pl
   d5978:	2201      	movpl	r2, #1
   d597a:	601a      	strpl	r2, [r3, #0]
   d597c:	4b16      	ldr	r3, [pc, #88]	; (d59d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d597e:	681a      	ldr	r2, [r3, #0]
   d5980:	07d1      	lsls	r1, r2, #31
   d5982:	bf5c      	itt	pl
   d5984:	2201      	movpl	r2, #1
   d5986:	601a      	strpl	r2, [r3, #0]
   d5988:	4b14      	ldr	r3, [pc, #80]	; (d59dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d598a:	681a      	ldr	r2, [r3, #0]
   d598c:	07d2      	lsls	r2, r2, #31
   d598e:	bf5c      	itt	pl
   d5990:	2201      	movpl	r2, #1
   d5992:	601a      	strpl	r2, [r3, #0]
   d5994:	4b12      	ldr	r3, [pc, #72]	; (d59e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5996:	681a      	ldr	r2, [r3, #0]
   d5998:	07d0      	lsls	r0, r2, #31
   d599a:	bf5c      	itt	pl
   d599c:	2201      	movpl	r2, #1
   d599e:	601a      	strpl	r2, [r3, #0]
   d59a0:	4b10      	ldr	r3, [pc, #64]	; (d59e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d59a2:	681a      	ldr	r2, [r3, #0]
   d59a4:	07d1      	lsls	r1, r2, #31
   d59a6:	bf5c      	itt	pl
   d59a8:	2201      	movpl	r2, #1
   d59aa:	601a      	strpl	r2, [r3, #0]
   d59ac:	4b0e      	ldr	r3, [pc, #56]	; (d59e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d59ae:	681a      	ldr	r2, [r3, #0]
   d59b0:	07d2      	lsls	r2, r2, #31
   d59b2:	bf5c      	itt	pl
   d59b4:	2201      	movpl	r2, #1
   d59b6:	601a      	strpl	r2, [r3, #0]
   d59b8:	4770      	bx	lr
   d59ba:	bf00      	nop
   d59bc:	2003e79c 	.word	0x2003e79c
   d59c0:	2003e798 	.word	0x2003e798
   d59c4:	2003e794 	.word	0x2003e794
   d59c8:	2003e790 	.word	0x2003e790
   d59cc:	2003e78c 	.word	0x2003e78c
   d59d0:	2003e788 	.word	0x2003e788
   d59d4:	2003e784 	.word	0x2003e784
   d59d8:	2003e780 	.word	0x2003e780
   d59dc:	2003e77c 	.word	0x2003e77c
   d59e0:	2003e778 	.word	0x2003e778
   d59e4:	2003e774 	.word	0x2003e774
   d59e8:	2003e770 	.word	0x2003e770

000d59ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d59ec:	4b24      	ldr	r3, [pc, #144]	; (d5a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d59ee:	681a      	ldr	r2, [r3, #0]
   d59f0:	07d0      	lsls	r0, r2, #31
   d59f2:	bf5c      	itt	pl
   d59f4:	2201      	movpl	r2, #1
   d59f6:	601a      	strpl	r2, [r3, #0]
   d59f8:	4b22      	ldr	r3, [pc, #136]	; (d5a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d59fa:	681a      	ldr	r2, [r3, #0]
   d59fc:	07d1      	lsls	r1, r2, #31
   d59fe:	bf5c      	itt	pl
   d5a00:	2201      	movpl	r2, #1
   d5a02:	601a      	strpl	r2, [r3, #0]
   d5a04:	4b20      	ldr	r3, [pc, #128]	; (d5a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5a06:	681a      	ldr	r2, [r3, #0]
   d5a08:	07d2      	lsls	r2, r2, #31
   d5a0a:	bf5c      	itt	pl
   d5a0c:	2201      	movpl	r2, #1
   d5a0e:	601a      	strpl	r2, [r3, #0]
   d5a10:	4b1e      	ldr	r3, [pc, #120]	; (d5a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5a12:	681a      	ldr	r2, [r3, #0]
   d5a14:	07d0      	lsls	r0, r2, #31
   d5a16:	bf5c      	itt	pl
   d5a18:	2201      	movpl	r2, #1
   d5a1a:	601a      	strpl	r2, [r3, #0]
   d5a1c:	4b1c      	ldr	r3, [pc, #112]	; (d5a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5a1e:	681a      	ldr	r2, [r3, #0]
   d5a20:	07d1      	lsls	r1, r2, #31
   d5a22:	bf5c      	itt	pl
   d5a24:	2201      	movpl	r2, #1
   d5a26:	601a      	strpl	r2, [r3, #0]
   d5a28:	4b1a      	ldr	r3, [pc, #104]	; (d5a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5a2a:	681a      	ldr	r2, [r3, #0]
   d5a2c:	07d2      	lsls	r2, r2, #31
   d5a2e:	bf5c      	itt	pl
   d5a30:	2201      	movpl	r2, #1
   d5a32:	601a      	strpl	r2, [r3, #0]
   d5a34:	4b18      	ldr	r3, [pc, #96]	; (d5a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5a36:	681a      	ldr	r2, [r3, #0]
   d5a38:	07d0      	lsls	r0, r2, #31
   d5a3a:	bf5c      	itt	pl
   d5a3c:	2201      	movpl	r2, #1
   d5a3e:	601a      	strpl	r2, [r3, #0]
   d5a40:	4b16      	ldr	r3, [pc, #88]	; (d5a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5a42:	681a      	ldr	r2, [r3, #0]
   d5a44:	07d1      	lsls	r1, r2, #31
   d5a46:	bf5c      	itt	pl
   d5a48:	2201      	movpl	r2, #1
   d5a4a:	601a      	strpl	r2, [r3, #0]
   d5a4c:	4b14      	ldr	r3, [pc, #80]	; (d5aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5a4e:	681a      	ldr	r2, [r3, #0]
   d5a50:	07d2      	lsls	r2, r2, #31
   d5a52:	bf5c      	itt	pl
   d5a54:	2201      	movpl	r2, #1
   d5a56:	601a      	strpl	r2, [r3, #0]
   d5a58:	4b12      	ldr	r3, [pc, #72]	; (d5aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5a5a:	681a      	ldr	r2, [r3, #0]
   d5a5c:	07d0      	lsls	r0, r2, #31
   d5a5e:	bf5c      	itt	pl
   d5a60:	2201      	movpl	r2, #1
   d5a62:	601a      	strpl	r2, [r3, #0]
   d5a64:	4b10      	ldr	r3, [pc, #64]	; (d5aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5a66:	681a      	ldr	r2, [r3, #0]
   d5a68:	07d1      	lsls	r1, r2, #31
   d5a6a:	bf5c      	itt	pl
   d5a6c:	2201      	movpl	r2, #1
   d5a6e:	601a      	strpl	r2, [r3, #0]
   d5a70:	4b0e      	ldr	r3, [pc, #56]	; (d5aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5a72:	681a      	ldr	r2, [r3, #0]
   d5a74:	07d2      	lsls	r2, r2, #31
   d5a76:	bf5c      	itt	pl
   d5a78:	2201      	movpl	r2, #1
   d5a7a:	601a      	strpl	r2, [r3, #0]
   d5a7c:	4770      	bx	lr
   d5a7e:	bf00      	nop
   d5a80:	2003e7cc 	.word	0x2003e7cc
   d5a84:	2003e7c8 	.word	0x2003e7c8
   d5a88:	2003e7c4 	.word	0x2003e7c4
   d5a8c:	2003e7c0 	.word	0x2003e7c0
   d5a90:	2003e7bc 	.word	0x2003e7bc
   d5a94:	2003e7b8 	.word	0x2003e7b8
   d5a98:	2003e7b4 	.word	0x2003e7b4
   d5a9c:	2003e7b0 	.word	0x2003e7b0
   d5aa0:	2003e7ac 	.word	0x2003e7ac
   d5aa4:	2003e7a8 	.word	0x2003e7a8
   d5aa8:	2003e7a4 	.word	0x2003e7a4
   d5aac:	2003e7a0 	.word	0x2003e7a0

000d5ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5ab0:	4b18      	ldr	r3, [pc, #96]	; (d5b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5ab2:	681a      	ldr	r2, [r3, #0]
   d5ab4:	07d1      	lsls	r1, r2, #31
   d5ab6:	bf5c      	itt	pl
   d5ab8:	2201      	movpl	r2, #1
   d5aba:	601a      	strpl	r2, [r3, #0]
   d5abc:	4b16      	ldr	r3, [pc, #88]	; (d5b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5abe:	681a      	ldr	r2, [r3, #0]
   d5ac0:	07d2      	lsls	r2, r2, #31
   d5ac2:	bf5c      	itt	pl
   d5ac4:	2201      	movpl	r2, #1
   d5ac6:	601a      	strpl	r2, [r3, #0]
   d5ac8:	4b14      	ldr	r3, [pc, #80]	; (d5b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5aca:	681a      	ldr	r2, [r3, #0]
   d5acc:	07d0      	lsls	r0, r2, #31
   d5ace:	bf5c      	itt	pl
   d5ad0:	2201      	movpl	r2, #1
   d5ad2:	601a      	strpl	r2, [r3, #0]
   d5ad4:	4b12      	ldr	r3, [pc, #72]	; (d5b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5ad6:	681a      	ldr	r2, [r3, #0]
   d5ad8:	07d1      	lsls	r1, r2, #31
   d5ada:	bf5c      	itt	pl
   d5adc:	2201      	movpl	r2, #1
   d5ade:	601a      	strpl	r2, [r3, #0]
   d5ae0:	4b10      	ldr	r3, [pc, #64]	; (d5b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5ae2:	681a      	ldr	r2, [r3, #0]
   d5ae4:	07d2      	lsls	r2, r2, #31
   d5ae6:	bf5c      	itt	pl
   d5ae8:	2201      	movpl	r2, #1
   d5aea:	601a      	strpl	r2, [r3, #0]
   d5aec:	4b0e      	ldr	r3, [pc, #56]	; (d5b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5aee:	681a      	ldr	r2, [r3, #0]
   d5af0:	07d0      	lsls	r0, r2, #31
   d5af2:	bf5c      	itt	pl
   d5af4:	2201      	movpl	r2, #1
   d5af6:	601a      	strpl	r2, [r3, #0]
   d5af8:	4b0c      	ldr	r3, [pc, #48]	; (d5b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5afa:	681a      	ldr	r2, [r3, #0]
   d5afc:	07d1      	lsls	r1, r2, #31
   d5afe:	bf5c      	itt	pl
   d5b00:	2201      	movpl	r2, #1
   d5b02:	601a      	strpl	r2, [r3, #0]
   d5b04:	4b0a      	ldr	r3, [pc, #40]	; (d5b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b06:	681a      	ldr	r2, [r3, #0]
   d5b08:	07d2      	lsls	r2, r2, #31
   d5b0a:	bf5c      	itt	pl
   d5b0c:	2201      	movpl	r2, #1
   d5b0e:	601a      	strpl	r2, [r3, #0]
   d5b10:	4770      	bx	lr
   d5b12:	bf00      	nop
   d5b14:	2003e7ec 	.word	0x2003e7ec
   d5b18:	2003e7e8 	.word	0x2003e7e8
   d5b1c:	2003e7e4 	.word	0x2003e7e4
   d5b20:	2003e7e0 	.word	0x2003e7e0
   d5b24:	2003e7dc 	.word	0x2003e7dc
   d5b28:	2003e7d8 	.word	0x2003e7d8
   d5b2c:	2003e7d4 	.word	0x2003e7d4
   d5b30:	2003e7d0 	.word	0x2003e7d0

000d5b34 <__aeabi_drsub>:
   d5b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5b38:	e002      	b.n	d5b40 <__adddf3>
   d5b3a:	bf00      	nop

000d5b3c <__aeabi_dsub>:
   d5b3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5b40 <__adddf3>:
   d5b40:	b530      	push	{r4, r5, lr}
   d5b42:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5b46:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5b4a:	ea94 0f05 	teq	r4, r5
   d5b4e:	bf08      	it	eq
   d5b50:	ea90 0f02 	teqeq	r0, r2
   d5b54:	bf1f      	itttt	ne
   d5b56:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5b5a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5b5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5b62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5b66:	f000 80e2 	beq.w	d5d2e <__adddf3+0x1ee>
   d5b6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5b6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5b72:	bfb8      	it	lt
   d5b74:	426d      	neglt	r5, r5
   d5b76:	dd0c      	ble.n	d5b92 <__adddf3+0x52>
   d5b78:	442c      	add	r4, r5
   d5b7a:	ea80 0202 	eor.w	r2, r0, r2
   d5b7e:	ea81 0303 	eor.w	r3, r1, r3
   d5b82:	ea82 0000 	eor.w	r0, r2, r0
   d5b86:	ea83 0101 	eor.w	r1, r3, r1
   d5b8a:	ea80 0202 	eor.w	r2, r0, r2
   d5b8e:	ea81 0303 	eor.w	r3, r1, r3
   d5b92:	2d36      	cmp	r5, #54	; 0x36
   d5b94:	bf88      	it	hi
   d5b96:	bd30      	pophi	{r4, r5, pc}
   d5b98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5b9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5ba0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5ba4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5ba8:	d002      	beq.n	d5bb0 <__adddf3+0x70>
   d5baa:	4240      	negs	r0, r0
   d5bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5bb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5bb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5bb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5bbc:	d002      	beq.n	d5bc4 <__adddf3+0x84>
   d5bbe:	4252      	negs	r2, r2
   d5bc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5bc4:	ea94 0f05 	teq	r4, r5
   d5bc8:	f000 80a7 	beq.w	d5d1a <__adddf3+0x1da>
   d5bcc:	f1a4 0401 	sub.w	r4, r4, #1
   d5bd0:	f1d5 0e20 	rsbs	lr, r5, #32
   d5bd4:	db0d      	blt.n	d5bf2 <__adddf3+0xb2>
   d5bd6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5bda:	fa22 f205 	lsr.w	r2, r2, r5
   d5bde:	1880      	adds	r0, r0, r2
   d5be0:	f141 0100 	adc.w	r1, r1, #0
   d5be4:	fa03 f20e 	lsl.w	r2, r3, lr
   d5be8:	1880      	adds	r0, r0, r2
   d5bea:	fa43 f305 	asr.w	r3, r3, r5
   d5bee:	4159      	adcs	r1, r3
   d5bf0:	e00e      	b.n	d5c10 <__adddf3+0xd0>
   d5bf2:	f1a5 0520 	sub.w	r5, r5, #32
   d5bf6:	f10e 0e20 	add.w	lr, lr, #32
   d5bfa:	2a01      	cmp	r2, #1
   d5bfc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5c00:	bf28      	it	cs
   d5c02:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5c06:	fa43 f305 	asr.w	r3, r3, r5
   d5c0a:	18c0      	adds	r0, r0, r3
   d5c0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5c10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5c14:	d507      	bpl.n	d5c26 <__adddf3+0xe6>
   d5c16:	f04f 0e00 	mov.w	lr, #0
   d5c1a:	f1dc 0c00 	rsbs	ip, ip, #0
   d5c1e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5c22:	eb6e 0101 	sbc.w	r1, lr, r1
   d5c26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5c2a:	d31b      	bcc.n	d5c64 <__adddf3+0x124>
   d5c2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5c30:	d30c      	bcc.n	d5c4c <__adddf3+0x10c>
   d5c32:	0849      	lsrs	r1, r1, #1
   d5c34:	ea5f 0030 	movs.w	r0, r0, rrx
   d5c38:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5c3c:	f104 0401 	add.w	r4, r4, #1
   d5c40:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5c44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5c48:	f080 809a 	bcs.w	d5d80 <__adddf3+0x240>
   d5c4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5c50:	bf08      	it	eq
   d5c52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5c56:	f150 0000 	adcs.w	r0, r0, #0
   d5c5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5c5e:	ea41 0105 	orr.w	r1, r1, r5
   d5c62:	bd30      	pop	{r4, r5, pc}
   d5c64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5c68:	4140      	adcs	r0, r0
   d5c6a:	eb41 0101 	adc.w	r1, r1, r1
   d5c6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5c72:	f1a4 0401 	sub.w	r4, r4, #1
   d5c76:	d1e9      	bne.n	d5c4c <__adddf3+0x10c>
   d5c78:	f091 0f00 	teq	r1, #0
   d5c7c:	bf04      	itt	eq
   d5c7e:	4601      	moveq	r1, r0
   d5c80:	2000      	moveq	r0, #0
   d5c82:	fab1 f381 	clz	r3, r1
   d5c86:	bf08      	it	eq
   d5c88:	3320      	addeq	r3, #32
   d5c8a:	f1a3 030b 	sub.w	r3, r3, #11
   d5c8e:	f1b3 0220 	subs.w	r2, r3, #32
   d5c92:	da0c      	bge.n	d5cae <__adddf3+0x16e>
   d5c94:	320c      	adds	r2, #12
   d5c96:	dd08      	ble.n	d5caa <__adddf3+0x16a>
   d5c98:	f102 0c14 	add.w	ip, r2, #20
   d5c9c:	f1c2 020c 	rsb	r2, r2, #12
   d5ca0:	fa01 f00c 	lsl.w	r0, r1, ip
   d5ca4:	fa21 f102 	lsr.w	r1, r1, r2
   d5ca8:	e00c      	b.n	d5cc4 <__adddf3+0x184>
   d5caa:	f102 0214 	add.w	r2, r2, #20
   d5cae:	bfd8      	it	le
   d5cb0:	f1c2 0c20 	rsble	ip, r2, #32
   d5cb4:	fa01 f102 	lsl.w	r1, r1, r2
   d5cb8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5cbc:	bfdc      	itt	le
   d5cbe:	ea41 010c 	orrle.w	r1, r1, ip
   d5cc2:	4090      	lslle	r0, r2
   d5cc4:	1ae4      	subs	r4, r4, r3
   d5cc6:	bfa2      	ittt	ge
   d5cc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5ccc:	4329      	orrge	r1, r5
   d5cce:	bd30      	popge	{r4, r5, pc}
   d5cd0:	ea6f 0404 	mvn.w	r4, r4
   d5cd4:	3c1f      	subs	r4, #31
   d5cd6:	da1c      	bge.n	d5d12 <__adddf3+0x1d2>
   d5cd8:	340c      	adds	r4, #12
   d5cda:	dc0e      	bgt.n	d5cfa <__adddf3+0x1ba>
   d5cdc:	f104 0414 	add.w	r4, r4, #20
   d5ce0:	f1c4 0220 	rsb	r2, r4, #32
   d5ce4:	fa20 f004 	lsr.w	r0, r0, r4
   d5ce8:	fa01 f302 	lsl.w	r3, r1, r2
   d5cec:	ea40 0003 	orr.w	r0, r0, r3
   d5cf0:	fa21 f304 	lsr.w	r3, r1, r4
   d5cf4:	ea45 0103 	orr.w	r1, r5, r3
   d5cf8:	bd30      	pop	{r4, r5, pc}
   d5cfa:	f1c4 040c 	rsb	r4, r4, #12
   d5cfe:	f1c4 0220 	rsb	r2, r4, #32
   d5d02:	fa20 f002 	lsr.w	r0, r0, r2
   d5d06:	fa01 f304 	lsl.w	r3, r1, r4
   d5d0a:	ea40 0003 	orr.w	r0, r0, r3
   d5d0e:	4629      	mov	r1, r5
   d5d10:	bd30      	pop	{r4, r5, pc}
   d5d12:	fa21 f004 	lsr.w	r0, r1, r4
   d5d16:	4629      	mov	r1, r5
   d5d18:	bd30      	pop	{r4, r5, pc}
   d5d1a:	f094 0f00 	teq	r4, #0
   d5d1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5d22:	bf06      	itte	eq
   d5d24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5d28:	3401      	addeq	r4, #1
   d5d2a:	3d01      	subne	r5, #1
   d5d2c:	e74e      	b.n	d5bcc <__adddf3+0x8c>
   d5d2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5d32:	bf18      	it	ne
   d5d34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5d38:	d029      	beq.n	d5d8e <__adddf3+0x24e>
   d5d3a:	ea94 0f05 	teq	r4, r5
   d5d3e:	bf08      	it	eq
   d5d40:	ea90 0f02 	teqeq	r0, r2
   d5d44:	d005      	beq.n	d5d52 <__adddf3+0x212>
   d5d46:	ea54 0c00 	orrs.w	ip, r4, r0
   d5d4a:	bf04      	itt	eq
   d5d4c:	4619      	moveq	r1, r3
   d5d4e:	4610      	moveq	r0, r2
   d5d50:	bd30      	pop	{r4, r5, pc}
   d5d52:	ea91 0f03 	teq	r1, r3
   d5d56:	bf1e      	ittt	ne
   d5d58:	2100      	movne	r1, #0
   d5d5a:	2000      	movne	r0, #0
   d5d5c:	bd30      	popne	{r4, r5, pc}
   d5d5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5d62:	d105      	bne.n	d5d70 <__adddf3+0x230>
   d5d64:	0040      	lsls	r0, r0, #1
   d5d66:	4149      	adcs	r1, r1
   d5d68:	bf28      	it	cs
   d5d6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5d6e:	bd30      	pop	{r4, r5, pc}
   d5d70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5d74:	bf3c      	itt	cc
   d5d76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5d7a:	bd30      	popcc	{r4, r5, pc}
   d5d7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5d80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5d84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5d88:	f04f 0000 	mov.w	r0, #0
   d5d8c:	bd30      	pop	{r4, r5, pc}
   d5d8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5d92:	bf1a      	itte	ne
   d5d94:	4619      	movne	r1, r3
   d5d96:	4610      	movne	r0, r2
   d5d98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5d9c:	bf1c      	itt	ne
   d5d9e:	460b      	movne	r3, r1
   d5da0:	4602      	movne	r2, r0
   d5da2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5da6:	bf06      	itte	eq
   d5da8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5dac:	ea91 0f03 	teqeq	r1, r3
   d5db0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5db4:	bd30      	pop	{r4, r5, pc}
   d5db6:	bf00      	nop

000d5db8 <__aeabi_ui2d>:
   d5db8:	f090 0f00 	teq	r0, #0
   d5dbc:	bf04      	itt	eq
   d5dbe:	2100      	moveq	r1, #0
   d5dc0:	4770      	bxeq	lr
   d5dc2:	b530      	push	{r4, r5, lr}
   d5dc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5dc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5dcc:	f04f 0500 	mov.w	r5, #0
   d5dd0:	f04f 0100 	mov.w	r1, #0
   d5dd4:	e750      	b.n	d5c78 <__adddf3+0x138>
   d5dd6:	bf00      	nop

000d5dd8 <__aeabi_i2d>:
   d5dd8:	f090 0f00 	teq	r0, #0
   d5ddc:	bf04      	itt	eq
   d5dde:	2100      	moveq	r1, #0
   d5de0:	4770      	bxeq	lr
   d5de2:	b530      	push	{r4, r5, lr}
   d5de4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5de8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5dec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5df0:	bf48      	it	mi
   d5df2:	4240      	negmi	r0, r0
   d5df4:	f04f 0100 	mov.w	r1, #0
   d5df8:	e73e      	b.n	d5c78 <__adddf3+0x138>
   d5dfa:	bf00      	nop

000d5dfc <__aeabi_f2d>:
   d5dfc:	0042      	lsls	r2, r0, #1
   d5dfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5e02:	ea4f 0131 	mov.w	r1, r1, rrx
   d5e06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5e0a:	bf1f      	itttt	ne
   d5e0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5e10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5e14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5e18:	4770      	bxne	lr
   d5e1a:	f092 0f00 	teq	r2, #0
   d5e1e:	bf14      	ite	ne
   d5e20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5e24:	4770      	bxeq	lr
   d5e26:	b530      	push	{r4, r5, lr}
   d5e28:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5e2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5e34:	e720      	b.n	d5c78 <__adddf3+0x138>
   d5e36:	bf00      	nop

000d5e38 <__aeabi_ul2d>:
   d5e38:	ea50 0201 	orrs.w	r2, r0, r1
   d5e3c:	bf08      	it	eq
   d5e3e:	4770      	bxeq	lr
   d5e40:	b530      	push	{r4, r5, lr}
   d5e42:	f04f 0500 	mov.w	r5, #0
   d5e46:	e00a      	b.n	d5e5e <__aeabi_l2d+0x16>

000d5e48 <__aeabi_l2d>:
   d5e48:	ea50 0201 	orrs.w	r2, r0, r1
   d5e4c:	bf08      	it	eq
   d5e4e:	4770      	bxeq	lr
   d5e50:	b530      	push	{r4, r5, lr}
   d5e52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5e56:	d502      	bpl.n	d5e5e <__aeabi_l2d+0x16>
   d5e58:	4240      	negs	r0, r0
   d5e5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5e5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e62:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5e6a:	f43f aedc 	beq.w	d5c26 <__adddf3+0xe6>
   d5e6e:	f04f 0203 	mov.w	r2, #3
   d5e72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5e76:	bf18      	it	ne
   d5e78:	3203      	addne	r2, #3
   d5e7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5e7e:	bf18      	it	ne
   d5e80:	3203      	addne	r2, #3
   d5e82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5e86:	f1c2 0320 	rsb	r3, r2, #32
   d5e8a:	fa00 fc03 	lsl.w	ip, r0, r3
   d5e8e:	fa20 f002 	lsr.w	r0, r0, r2
   d5e92:	fa01 fe03 	lsl.w	lr, r1, r3
   d5e96:	ea40 000e 	orr.w	r0, r0, lr
   d5e9a:	fa21 f102 	lsr.w	r1, r1, r2
   d5e9e:	4414      	add	r4, r2
   d5ea0:	e6c1      	b.n	d5c26 <__adddf3+0xe6>
   d5ea2:	bf00      	nop

000d5ea4 <__aeabi_dmul>:
   d5ea4:	b570      	push	{r4, r5, r6, lr}
   d5ea6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5eaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5eae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5eb2:	bf1d      	ittte	ne
   d5eb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5eb8:	ea94 0f0c 	teqne	r4, ip
   d5ebc:	ea95 0f0c 	teqne	r5, ip
   d5ec0:	f000 f8de 	bleq	d6080 <__aeabi_dmul+0x1dc>
   d5ec4:	442c      	add	r4, r5
   d5ec6:	ea81 0603 	eor.w	r6, r1, r3
   d5eca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5ece:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5ed2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5ed6:	bf18      	it	ne
   d5ed8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5edc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5ee4:	d038      	beq.n	d5f58 <__aeabi_dmul+0xb4>
   d5ee6:	fba0 ce02 	umull	ip, lr, r0, r2
   d5eea:	f04f 0500 	mov.w	r5, #0
   d5eee:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5ef2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5ef6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5efa:	f04f 0600 	mov.w	r6, #0
   d5efe:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5f02:	f09c 0f00 	teq	ip, #0
   d5f06:	bf18      	it	ne
   d5f08:	f04e 0e01 	orrne.w	lr, lr, #1
   d5f0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5f10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5f14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5f18:	d204      	bcs.n	d5f24 <__aeabi_dmul+0x80>
   d5f1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5f1e:	416d      	adcs	r5, r5
   d5f20:	eb46 0606 	adc.w	r6, r6, r6
   d5f24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5f28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5f2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5f30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5f34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5f38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5f3c:	bf88      	it	hi
   d5f3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5f42:	d81e      	bhi.n	d5f82 <__aeabi_dmul+0xde>
   d5f44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5f48:	bf08      	it	eq
   d5f4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5f4e:	f150 0000 	adcs.w	r0, r0, #0
   d5f52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f56:	bd70      	pop	{r4, r5, r6, pc}
   d5f58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5f5c:	ea46 0101 	orr.w	r1, r6, r1
   d5f60:	ea40 0002 	orr.w	r0, r0, r2
   d5f64:	ea81 0103 	eor.w	r1, r1, r3
   d5f68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5f6c:	bfc2      	ittt	gt
   d5f6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5f72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5f76:	bd70      	popgt	{r4, r5, r6, pc}
   d5f78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f7c:	f04f 0e00 	mov.w	lr, #0
   d5f80:	3c01      	subs	r4, #1
   d5f82:	f300 80ab 	bgt.w	d60dc <__aeabi_dmul+0x238>
   d5f86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5f8a:	bfde      	ittt	le
   d5f8c:	2000      	movle	r0, #0
   d5f8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5f92:	bd70      	pople	{r4, r5, r6, pc}
   d5f94:	f1c4 0400 	rsb	r4, r4, #0
   d5f98:	3c20      	subs	r4, #32
   d5f9a:	da35      	bge.n	d6008 <__aeabi_dmul+0x164>
   d5f9c:	340c      	adds	r4, #12
   d5f9e:	dc1b      	bgt.n	d5fd8 <__aeabi_dmul+0x134>
   d5fa0:	f104 0414 	add.w	r4, r4, #20
   d5fa4:	f1c4 0520 	rsb	r5, r4, #32
   d5fa8:	fa00 f305 	lsl.w	r3, r0, r5
   d5fac:	fa20 f004 	lsr.w	r0, r0, r4
   d5fb0:	fa01 f205 	lsl.w	r2, r1, r5
   d5fb4:	ea40 0002 	orr.w	r0, r0, r2
   d5fb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5fbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5fc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5fc4:	fa21 f604 	lsr.w	r6, r1, r4
   d5fc8:	eb42 0106 	adc.w	r1, r2, r6
   d5fcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5fd0:	bf08      	it	eq
   d5fd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5fd6:	bd70      	pop	{r4, r5, r6, pc}
   d5fd8:	f1c4 040c 	rsb	r4, r4, #12
   d5fdc:	f1c4 0520 	rsb	r5, r4, #32
   d5fe0:	fa00 f304 	lsl.w	r3, r0, r4
   d5fe4:	fa20 f005 	lsr.w	r0, r0, r5
   d5fe8:	fa01 f204 	lsl.w	r2, r1, r4
   d5fec:	ea40 0002 	orr.w	r0, r0, r2
   d5ff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ff4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5ff8:	f141 0100 	adc.w	r1, r1, #0
   d5ffc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6000:	bf08      	it	eq
   d6002:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6006:	bd70      	pop	{r4, r5, r6, pc}
   d6008:	f1c4 0520 	rsb	r5, r4, #32
   d600c:	fa00 f205 	lsl.w	r2, r0, r5
   d6010:	ea4e 0e02 	orr.w	lr, lr, r2
   d6014:	fa20 f304 	lsr.w	r3, r0, r4
   d6018:	fa01 f205 	lsl.w	r2, r1, r5
   d601c:	ea43 0302 	orr.w	r3, r3, r2
   d6020:	fa21 f004 	lsr.w	r0, r1, r4
   d6024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6028:	fa21 f204 	lsr.w	r2, r1, r4
   d602c:	ea20 0002 	bic.w	r0, r0, r2
   d6030:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6034:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6038:	bf08      	it	eq
   d603a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d603e:	bd70      	pop	{r4, r5, r6, pc}
   d6040:	f094 0f00 	teq	r4, #0
   d6044:	d10f      	bne.n	d6066 <__aeabi_dmul+0x1c2>
   d6046:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d604a:	0040      	lsls	r0, r0, #1
   d604c:	eb41 0101 	adc.w	r1, r1, r1
   d6050:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6054:	bf08      	it	eq
   d6056:	3c01      	subeq	r4, #1
   d6058:	d0f7      	beq.n	d604a <__aeabi_dmul+0x1a6>
   d605a:	ea41 0106 	orr.w	r1, r1, r6
   d605e:	f095 0f00 	teq	r5, #0
   d6062:	bf18      	it	ne
   d6064:	4770      	bxne	lr
   d6066:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d606a:	0052      	lsls	r2, r2, #1
   d606c:	eb43 0303 	adc.w	r3, r3, r3
   d6070:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6074:	bf08      	it	eq
   d6076:	3d01      	subeq	r5, #1
   d6078:	d0f7      	beq.n	d606a <__aeabi_dmul+0x1c6>
   d607a:	ea43 0306 	orr.w	r3, r3, r6
   d607e:	4770      	bx	lr
   d6080:	ea94 0f0c 	teq	r4, ip
   d6084:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6088:	bf18      	it	ne
   d608a:	ea95 0f0c 	teqne	r5, ip
   d608e:	d00c      	beq.n	d60aa <__aeabi_dmul+0x206>
   d6090:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6094:	bf18      	it	ne
   d6096:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d609a:	d1d1      	bne.n	d6040 <__aeabi_dmul+0x19c>
   d609c:	ea81 0103 	eor.w	r1, r1, r3
   d60a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d60a4:	f04f 0000 	mov.w	r0, #0
   d60a8:	bd70      	pop	{r4, r5, r6, pc}
   d60aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d60ae:	bf06      	itte	eq
   d60b0:	4610      	moveq	r0, r2
   d60b2:	4619      	moveq	r1, r3
   d60b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d60b8:	d019      	beq.n	d60ee <__aeabi_dmul+0x24a>
   d60ba:	ea94 0f0c 	teq	r4, ip
   d60be:	d102      	bne.n	d60c6 <__aeabi_dmul+0x222>
   d60c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d60c4:	d113      	bne.n	d60ee <__aeabi_dmul+0x24a>
   d60c6:	ea95 0f0c 	teq	r5, ip
   d60ca:	d105      	bne.n	d60d8 <__aeabi_dmul+0x234>
   d60cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d60d0:	bf1c      	itt	ne
   d60d2:	4610      	movne	r0, r2
   d60d4:	4619      	movne	r1, r3
   d60d6:	d10a      	bne.n	d60ee <__aeabi_dmul+0x24a>
   d60d8:	ea81 0103 	eor.w	r1, r1, r3
   d60dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d60e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d60e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d60e8:	f04f 0000 	mov.w	r0, #0
   d60ec:	bd70      	pop	{r4, r5, r6, pc}
   d60ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d60f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d60f6:	bd70      	pop	{r4, r5, r6, pc}

000d60f8 <__aeabi_ddiv>:
   d60f8:	b570      	push	{r4, r5, r6, lr}
   d60fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d60fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6102:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6106:	bf1d      	ittte	ne
   d6108:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d610c:	ea94 0f0c 	teqne	r4, ip
   d6110:	ea95 0f0c 	teqne	r5, ip
   d6114:	f000 f8a7 	bleq	d6266 <__aeabi_ddiv+0x16e>
   d6118:	eba4 0405 	sub.w	r4, r4, r5
   d611c:	ea81 0e03 	eor.w	lr, r1, r3
   d6120:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6124:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6128:	f000 8088 	beq.w	d623c <__aeabi_ddiv+0x144>
   d612c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6130:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6134:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6138:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d613c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6140:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6144:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6148:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d614c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6150:	429d      	cmp	r5, r3
   d6152:	bf08      	it	eq
   d6154:	4296      	cmpeq	r6, r2
   d6156:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d615a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d615e:	d202      	bcs.n	d6166 <__aeabi_ddiv+0x6e>
   d6160:	085b      	lsrs	r3, r3, #1
   d6162:	ea4f 0232 	mov.w	r2, r2, rrx
   d6166:	1ab6      	subs	r6, r6, r2
   d6168:	eb65 0503 	sbc.w	r5, r5, r3
   d616c:	085b      	lsrs	r3, r3, #1
   d616e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6172:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6176:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d617a:	ebb6 0e02 	subs.w	lr, r6, r2
   d617e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6182:	bf22      	ittt	cs
   d6184:	1ab6      	subcs	r6, r6, r2
   d6186:	4675      	movcs	r5, lr
   d6188:	ea40 000c 	orrcs.w	r0, r0, ip
   d618c:	085b      	lsrs	r3, r3, #1
   d618e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6192:	ebb6 0e02 	subs.w	lr, r6, r2
   d6196:	eb75 0e03 	sbcs.w	lr, r5, r3
   d619a:	bf22      	ittt	cs
   d619c:	1ab6      	subcs	r6, r6, r2
   d619e:	4675      	movcs	r5, lr
   d61a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d61a4:	085b      	lsrs	r3, r3, #1
   d61a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d61aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d61ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61b2:	bf22      	ittt	cs
   d61b4:	1ab6      	subcs	r6, r6, r2
   d61b6:	4675      	movcs	r5, lr
   d61b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d61bc:	085b      	lsrs	r3, r3, #1
   d61be:	ea4f 0232 	mov.w	r2, r2, rrx
   d61c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d61c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61ca:	bf22      	ittt	cs
   d61cc:	1ab6      	subcs	r6, r6, r2
   d61ce:	4675      	movcs	r5, lr
   d61d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d61d4:	ea55 0e06 	orrs.w	lr, r5, r6
   d61d8:	d018      	beq.n	d620c <__aeabi_ddiv+0x114>
   d61da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d61de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d61e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d61e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d61ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d61ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d61f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d61f6:	d1c0      	bne.n	d617a <__aeabi_ddiv+0x82>
   d61f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d61fc:	d10b      	bne.n	d6216 <__aeabi_ddiv+0x11e>
   d61fe:	ea41 0100 	orr.w	r1, r1, r0
   d6202:	f04f 0000 	mov.w	r0, #0
   d6206:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d620a:	e7b6      	b.n	d617a <__aeabi_ddiv+0x82>
   d620c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6210:	bf04      	itt	eq
   d6212:	4301      	orreq	r1, r0
   d6214:	2000      	moveq	r0, #0
   d6216:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d621a:	bf88      	it	hi
   d621c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6220:	f63f aeaf 	bhi.w	d5f82 <__aeabi_dmul+0xde>
   d6224:	ebb5 0c03 	subs.w	ip, r5, r3
   d6228:	bf04      	itt	eq
   d622a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d622e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6232:	f150 0000 	adcs.w	r0, r0, #0
   d6236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d623a:	bd70      	pop	{r4, r5, r6, pc}
   d623c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6240:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6244:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6248:	bfc2      	ittt	gt
   d624a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d624e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6252:	bd70      	popgt	{r4, r5, r6, pc}
   d6254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6258:	f04f 0e00 	mov.w	lr, #0
   d625c:	3c01      	subs	r4, #1
   d625e:	e690      	b.n	d5f82 <__aeabi_dmul+0xde>
   d6260:	ea45 0e06 	orr.w	lr, r5, r6
   d6264:	e68d      	b.n	d5f82 <__aeabi_dmul+0xde>
   d6266:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d626a:	ea94 0f0c 	teq	r4, ip
   d626e:	bf08      	it	eq
   d6270:	ea95 0f0c 	teqeq	r5, ip
   d6274:	f43f af3b 	beq.w	d60ee <__aeabi_dmul+0x24a>
   d6278:	ea94 0f0c 	teq	r4, ip
   d627c:	d10a      	bne.n	d6294 <__aeabi_ddiv+0x19c>
   d627e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6282:	f47f af34 	bne.w	d60ee <__aeabi_dmul+0x24a>
   d6286:	ea95 0f0c 	teq	r5, ip
   d628a:	f47f af25 	bne.w	d60d8 <__aeabi_dmul+0x234>
   d628e:	4610      	mov	r0, r2
   d6290:	4619      	mov	r1, r3
   d6292:	e72c      	b.n	d60ee <__aeabi_dmul+0x24a>
   d6294:	ea95 0f0c 	teq	r5, ip
   d6298:	d106      	bne.n	d62a8 <__aeabi_ddiv+0x1b0>
   d629a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d629e:	f43f aefd 	beq.w	d609c <__aeabi_dmul+0x1f8>
   d62a2:	4610      	mov	r0, r2
   d62a4:	4619      	mov	r1, r3
   d62a6:	e722      	b.n	d60ee <__aeabi_dmul+0x24a>
   d62a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d62ac:	bf18      	it	ne
   d62ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d62b2:	f47f aec5 	bne.w	d6040 <__aeabi_dmul+0x19c>
   d62b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d62ba:	f47f af0d 	bne.w	d60d8 <__aeabi_dmul+0x234>
   d62be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d62c2:	f47f aeeb 	bne.w	d609c <__aeabi_dmul+0x1f8>
   d62c6:	e712      	b.n	d60ee <__aeabi_dmul+0x24a>

000d62c8 <__gedf2>:
   d62c8:	f04f 3cff 	mov.w	ip, #4294967295
   d62cc:	e006      	b.n	d62dc <__cmpdf2+0x4>
   d62ce:	bf00      	nop

000d62d0 <__ledf2>:
   d62d0:	f04f 0c01 	mov.w	ip, #1
   d62d4:	e002      	b.n	d62dc <__cmpdf2+0x4>
   d62d6:	bf00      	nop

000d62d8 <__cmpdf2>:
   d62d8:	f04f 0c01 	mov.w	ip, #1
   d62dc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d62e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d62e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d62e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d62ec:	bf18      	it	ne
   d62ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d62f2:	d01b      	beq.n	d632c <__cmpdf2+0x54>
   d62f4:	b001      	add	sp, #4
   d62f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d62fa:	bf0c      	ite	eq
   d62fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6300:	ea91 0f03 	teqne	r1, r3
   d6304:	bf02      	ittt	eq
   d6306:	ea90 0f02 	teqeq	r0, r2
   d630a:	2000      	moveq	r0, #0
   d630c:	4770      	bxeq	lr
   d630e:	f110 0f00 	cmn.w	r0, #0
   d6312:	ea91 0f03 	teq	r1, r3
   d6316:	bf58      	it	pl
   d6318:	4299      	cmppl	r1, r3
   d631a:	bf08      	it	eq
   d631c:	4290      	cmpeq	r0, r2
   d631e:	bf2c      	ite	cs
   d6320:	17d8      	asrcs	r0, r3, #31
   d6322:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6326:	f040 0001 	orr.w	r0, r0, #1
   d632a:	4770      	bx	lr
   d632c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6334:	d102      	bne.n	d633c <__cmpdf2+0x64>
   d6336:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d633a:	d107      	bne.n	d634c <__cmpdf2+0x74>
   d633c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6344:	d1d6      	bne.n	d62f4 <__cmpdf2+0x1c>
   d6346:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d634a:	d0d3      	beq.n	d62f4 <__cmpdf2+0x1c>
   d634c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6350:	4770      	bx	lr
   d6352:	bf00      	nop

000d6354 <__aeabi_cdrcmple>:
   d6354:	4684      	mov	ip, r0
   d6356:	4610      	mov	r0, r2
   d6358:	4662      	mov	r2, ip
   d635a:	468c      	mov	ip, r1
   d635c:	4619      	mov	r1, r3
   d635e:	4663      	mov	r3, ip
   d6360:	e000      	b.n	d6364 <__aeabi_cdcmpeq>
   d6362:	bf00      	nop

000d6364 <__aeabi_cdcmpeq>:
   d6364:	b501      	push	{r0, lr}
   d6366:	f7ff ffb7 	bl	d62d8 <__cmpdf2>
   d636a:	2800      	cmp	r0, #0
   d636c:	bf48      	it	mi
   d636e:	f110 0f00 	cmnmi.w	r0, #0
   d6372:	bd01      	pop	{r0, pc}

000d6374 <__aeabi_dcmpeq>:
   d6374:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6378:	f7ff fff4 	bl	d6364 <__aeabi_cdcmpeq>
   d637c:	bf0c      	ite	eq
   d637e:	2001      	moveq	r0, #1
   d6380:	2000      	movne	r0, #0
   d6382:	f85d fb08 	ldr.w	pc, [sp], #8
   d6386:	bf00      	nop

000d6388 <__aeabi_dcmplt>:
   d6388:	f84d ed08 	str.w	lr, [sp, #-8]!
   d638c:	f7ff ffea 	bl	d6364 <__aeabi_cdcmpeq>
   d6390:	bf34      	ite	cc
   d6392:	2001      	movcc	r0, #1
   d6394:	2000      	movcs	r0, #0
   d6396:	f85d fb08 	ldr.w	pc, [sp], #8
   d639a:	bf00      	nop

000d639c <__aeabi_dcmple>:
   d639c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63a0:	f7ff ffe0 	bl	d6364 <__aeabi_cdcmpeq>
   d63a4:	bf94      	ite	ls
   d63a6:	2001      	movls	r0, #1
   d63a8:	2000      	movhi	r0, #0
   d63aa:	f85d fb08 	ldr.w	pc, [sp], #8
   d63ae:	bf00      	nop

000d63b0 <__aeabi_dcmpge>:
   d63b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63b4:	f7ff ffce 	bl	d6354 <__aeabi_cdrcmple>
   d63b8:	bf94      	ite	ls
   d63ba:	2001      	movls	r0, #1
   d63bc:	2000      	movhi	r0, #0
   d63be:	f85d fb08 	ldr.w	pc, [sp], #8
   d63c2:	bf00      	nop

000d63c4 <__aeabi_dcmpgt>:
   d63c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63c8:	f7ff ffc4 	bl	d6354 <__aeabi_cdrcmple>
   d63cc:	bf34      	ite	cc
   d63ce:	2001      	movcc	r0, #1
   d63d0:	2000      	movcs	r0, #0
   d63d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d63d6:	bf00      	nop

000d63d8 <__aeabi_d2iz>:
   d63d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d63dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d63e0:	d215      	bcs.n	d640e <__aeabi_d2iz+0x36>
   d63e2:	d511      	bpl.n	d6408 <__aeabi_d2iz+0x30>
   d63e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d63e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d63ec:	d912      	bls.n	d6414 <__aeabi_d2iz+0x3c>
   d63ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d63f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d63f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d63fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d63fe:	fa23 f002 	lsr.w	r0, r3, r2
   d6402:	bf18      	it	ne
   d6404:	4240      	negne	r0, r0
   d6406:	4770      	bx	lr
   d6408:	f04f 0000 	mov.w	r0, #0
   d640c:	4770      	bx	lr
   d640e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6412:	d105      	bne.n	d6420 <__aeabi_d2iz+0x48>
   d6414:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6418:	bf08      	it	eq
   d641a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d641e:	4770      	bx	lr
   d6420:	f04f 0000 	mov.w	r0, #0
   d6424:	4770      	bx	lr
   d6426:	bf00      	nop

000d6428 <__aeabi_d2uiz>:
   d6428:	004a      	lsls	r2, r1, #1
   d642a:	d211      	bcs.n	d6450 <__aeabi_d2uiz+0x28>
   d642c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6430:	d211      	bcs.n	d6456 <__aeabi_d2uiz+0x2e>
   d6432:	d50d      	bpl.n	d6450 <__aeabi_d2uiz+0x28>
   d6434:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6438:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d643c:	d40e      	bmi.n	d645c <__aeabi_d2uiz+0x34>
   d643e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6446:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d644a:	fa23 f002 	lsr.w	r0, r3, r2
   d644e:	4770      	bx	lr
   d6450:	f04f 0000 	mov.w	r0, #0
   d6454:	4770      	bx	lr
   d6456:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d645a:	d102      	bne.n	d6462 <__aeabi_d2uiz+0x3a>
   d645c:	f04f 30ff 	mov.w	r0, #4294967295
   d6460:	4770      	bx	lr
   d6462:	f04f 0000 	mov.w	r0, #0
   d6466:	4770      	bx	lr

000d6468 <__aeabi_d2f>:
   d6468:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d646c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6470:	bf24      	itt	cs
   d6472:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6476:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d647a:	d90d      	bls.n	d6498 <__aeabi_d2f+0x30>
   d647c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6480:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6484:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6488:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d648c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6490:	bf08      	it	eq
   d6492:	f020 0001 	biceq.w	r0, r0, #1
   d6496:	4770      	bx	lr
   d6498:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d649c:	d121      	bne.n	d64e2 <__aeabi_d2f+0x7a>
   d649e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d64a2:	bfbc      	itt	lt
   d64a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d64a8:	4770      	bxlt	lr
   d64aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d64ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d64b2:	f1c2 0218 	rsb	r2, r2, #24
   d64b6:	f1c2 0c20 	rsb	ip, r2, #32
   d64ba:	fa10 f30c 	lsls.w	r3, r0, ip
   d64be:	fa20 f002 	lsr.w	r0, r0, r2
   d64c2:	bf18      	it	ne
   d64c4:	f040 0001 	orrne.w	r0, r0, #1
   d64c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d64cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d64d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d64d4:	ea40 000c 	orr.w	r0, r0, ip
   d64d8:	fa23 f302 	lsr.w	r3, r3, r2
   d64dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d64e0:	e7cc      	b.n	d647c <__aeabi_d2f+0x14>
   d64e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d64e6:	d107      	bne.n	d64f8 <__aeabi_d2f+0x90>
   d64e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d64ec:	bf1e      	ittt	ne
   d64ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d64f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d64f6:	4770      	bxne	lr
   d64f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d64fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6500:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6504:	4770      	bx	lr
   d6506:	bf00      	nop

000d6508 <atof>:
   d6508:	2100      	movs	r1, #0
   d650a:	f000 bead 	b.w	d7268 <strtod>
	...

000d6510 <__cxa_atexit>:
   d6510:	b510      	push	{r4, lr}
   d6512:	4c05      	ldr	r4, [pc, #20]	; (d6528 <__cxa_atexit+0x18>)
   d6514:	4613      	mov	r3, r2
   d6516:	b12c      	cbz	r4, d6524 <__cxa_atexit+0x14>
   d6518:	460a      	mov	r2, r1
   d651a:	4601      	mov	r1, r0
   d651c:	2002      	movs	r0, #2
   d651e:	f3af 8000 	nop.w
   d6522:	bd10      	pop	{r4, pc}
   d6524:	4620      	mov	r0, r4
   d6526:	bd10      	pop	{r4, pc}
   d6528:	00000000 	.word	0x00000000

000d652c <_localeconv_r>:
   d652c:	4800      	ldr	r0, [pc, #0]	; (d6530 <_localeconv_r+0x4>)
   d652e:	4770      	bx	lr
   d6530:	2003e270 	.word	0x2003e270

000d6534 <memcpy>:
   d6534:	b510      	push	{r4, lr}
   d6536:	1e43      	subs	r3, r0, #1
   d6538:	440a      	add	r2, r1
   d653a:	4291      	cmp	r1, r2
   d653c:	d004      	beq.n	d6548 <memcpy+0x14>
   d653e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6542:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6546:	e7f8      	b.n	d653a <memcpy+0x6>
   d6548:	bd10      	pop	{r4, pc}

000d654a <memset>:
   d654a:	4402      	add	r2, r0
   d654c:	4603      	mov	r3, r0
   d654e:	4293      	cmp	r3, r2
   d6550:	d002      	beq.n	d6558 <memset+0xe>
   d6552:	f803 1b01 	strb.w	r1, [r3], #1
   d6556:	e7fa      	b.n	d654e <memset+0x4>
   d6558:	4770      	bx	lr
	...

000d655c <srand>:
   d655c:	b538      	push	{r3, r4, r5, lr}
   d655e:	4b12      	ldr	r3, [pc, #72]	; (d65a8 <srand+0x4c>)
   d6560:	681c      	ldr	r4, [r3, #0]
   d6562:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6564:	4605      	mov	r5, r0
   d6566:	b9d3      	cbnz	r3, d659e <srand+0x42>
   d6568:	2018      	movs	r0, #24
   d656a:	f7fe f953 	bl	d4814 <malloc>
   d656e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6572:	63a0      	str	r0, [r4, #56]	; 0x38
   d6574:	8003      	strh	r3, [r0, #0]
   d6576:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d657a:	8043      	strh	r3, [r0, #2]
   d657c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6580:	8083      	strh	r3, [r0, #4]
   d6582:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6586:	80c3      	strh	r3, [r0, #6]
   d6588:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d658c:	8103      	strh	r3, [r0, #8]
   d658e:	2305      	movs	r3, #5
   d6590:	8143      	strh	r3, [r0, #10]
   d6592:	230b      	movs	r3, #11
   d6594:	8183      	strh	r3, [r0, #12]
   d6596:	2201      	movs	r2, #1
   d6598:	2300      	movs	r3, #0
   d659a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d659e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d65a0:	2200      	movs	r2, #0
   d65a2:	611d      	str	r5, [r3, #16]
   d65a4:	615a      	str	r2, [r3, #20]
   d65a6:	bd38      	pop	{r3, r4, r5, pc}
   d65a8:	2003e26c 	.word	0x2003e26c

000d65ac <strcpy>:
   d65ac:	4603      	mov	r3, r0
   d65ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   d65b2:	f803 2b01 	strb.w	r2, [r3], #1
   d65b6:	2a00      	cmp	r2, #0
   d65b8:	d1f9      	bne.n	d65ae <strcpy+0x2>
   d65ba:	4770      	bx	lr

000d65bc <strdup>:
   d65bc:	4b02      	ldr	r3, [pc, #8]	; (d65c8 <strdup+0xc>)
   d65be:	4601      	mov	r1, r0
   d65c0:	6818      	ldr	r0, [r3, #0]
   d65c2:	f000 b803 	b.w	d65cc <_strdup_r>
   d65c6:	bf00      	nop
   d65c8:	2003e26c 	.word	0x2003e26c

000d65cc <_strdup_r>:
   d65cc:	b570      	push	{r4, r5, r6, lr}
   d65ce:	4606      	mov	r6, r0
   d65d0:	4608      	mov	r0, r1
   d65d2:	460c      	mov	r4, r1
   d65d4:	f000 f80d 	bl	d65f2 <strlen>
   d65d8:	1c45      	adds	r5, r0, #1
   d65da:	4629      	mov	r1, r5
   d65dc:	4630      	mov	r0, r6
   d65de:	f7fe f949 	bl	d4874 <_malloc_r>
   d65e2:	4606      	mov	r6, r0
   d65e4:	b118      	cbz	r0, d65ee <_strdup_r+0x22>
   d65e6:	462a      	mov	r2, r5
   d65e8:	4621      	mov	r1, r4
   d65ea:	f7ff ffa3 	bl	d6534 <memcpy>
   d65ee:	4630      	mov	r0, r6
   d65f0:	bd70      	pop	{r4, r5, r6, pc}

000d65f2 <strlen>:
   d65f2:	4603      	mov	r3, r0
   d65f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d65f8:	2a00      	cmp	r2, #0
   d65fa:	d1fb      	bne.n	d65f4 <strlen+0x2>
   d65fc:	1a18      	subs	r0, r3, r0
   d65fe:	3801      	subs	r0, #1
   d6600:	4770      	bx	lr

000d6602 <strncmp>:
   d6602:	b530      	push	{r4, r5, lr}
   d6604:	b182      	cbz	r2, d6628 <strncmp+0x26>
   d6606:	1e45      	subs	r5, r0, #1
   d6608:	3901      	subs	r1, #1
   d660a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d660e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6612:	42a3      	cmp	r3, r4
   d6614:	d106      	bne.n	d6624 <strncmp+0x22>
   d6616:	43ec      	mvns	r4, r5
   d6618:	4414      	add	r4, r2
   d661a:	42e0      	cmn	r0, r4
   d661c:	d001      	beq.n	d6622 <strncmp+0x20>
   d661e:	2b00      	cmp	r3, #0
   d6620:	d1f3      	bne.n	d660a <strncmp+0x8>
   d6622:	461c      	mov	r4, r3
   d6624:	1b18      	subs	r0, r3, r4
   d6626:	bd30      	pop	{r4, r5, pc}
   d6628:	4610      	mov	r0, r2
   d662a:	bd30      	pop	{r4, r5, pc}

000d662c <sulp>:
   d662c:	b570      	push	{r4, r5, r6, lr}
   d662e:	4604      	mov	r4, r0
   d6630:	460d      	mov	r5, r1
   d6632:	ec45 4b10 	vmov	d0, r4, r5
   d6636:	4616      	mov	r6, r2
   d6638:	f001 fc30 	bl	d7e9c <__ulp>
   d663c:	ec51 0b10 	vmov	r0, r1, d0
   d6640:	b17e      	cbz	r6, d6662 <sulp+0x36>
   d6642:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d6646:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d664a:	2b00      	cmp	r3, #0
   d664c:	dd09      	ble.n	d6662 <sulp+0x36>
   d664e:	051b      	lsls	r3, r3, #20
   d6650:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d6654:	2400      	movs	r4, #0
   d6656:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d665a:	4622      	mov	r2, r4
   d665c:	462b      	mov	r3, r5
   d665e:	f7ff fc21 	bl	d5ea4 <__aeabi_dmul>
   d6662:	bd70      	pop	{r4, r5, r6, pc}
   d6664:	0000      	movs	r0, r0
	...

000d6668 <_strtod_r>:
   d6668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d666c:	b09d      	sub	sp, #116	; 0x74
   d666e:	2300      	movs	r3, #0
   d6670:	9002      	str	r0, [sp, #8]
   d6672:	460c      	mov	r4, r1
   d6674:	9213      	str	r2, [sp, #76]	; 0x4c
   d6676:	9318      	str	r3, [sp, #96]	; 0x60
   d6678:	f04f 0a00 	mov.w	sl, #0
   d667c:	f04f 0b00 	mov.w	fp, #0
   d6680:	9117      	str	r1, [sp, #92]	; 0x5c
   d6682:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6684:	781a      	ldrb	r2, [r3, #0]
   d6686:	2a0d      	cmp	r2, #13
   d6688:	d805      	bhi.n	d6696 <_strtod_r+0x2e>
   d668a:	2a09      	cmp	r2, #9
   d668c:	d213      	bcs.n	d66b6 <_strtod_r+0x4e>
   d668e:	2a00      	cmp	r2, #0
   d6690:	f000 81ac 	beq.w	d69ec <_strtod_r+0x384>
   d6694:	e012      	b.n	d66bc <_strtod_r+0x54>
   d6696:	2a2b      	cmp	r2, #43	; 0x2b
   d6698:	d004      	beq.n	d66a4 <_strtod_r+0x3c>
   d669a:	2a2d      	cmp	r2, #45	; 0x2d
   d669c:	d004      	beq.n	d66a8 <_strtod_r+0x40>
   d669e:	2a20      	cmp	r2, #32
   d66a0:	d10c      	bne.n	d66bc <_strtod_r+0x54>
   d66a2:	e008      	b.n	d66b6 <_strtod_r+0x4e>
   d66a4:	2200      	movs	r2, #0
   d66a6:	e000      	b.n	d66aa <_strtod_r+0x42>
   d66a8:	2201      	movs	r2, #1
   d66aa:	920c      	str	r2, [sp, #48]	; 0x30
   d66ac:	1c5a      	adds	r2, r3, #1
   d66ae:	9217      	str	r2, [sp, #92]	; 0x5c
   d66b0:	785b      	ldrb	r3, [r3, #1]
   d66b2:	b92b      	cbnz	r3, d66c0 <_strtod_r+0x58>
   d66b4:	e19a      	b.n	d69ec <_strtod_r+0x384>
   d66b6:	3301      	adds	r3, #1
   d66b8:	9317      	str	r3, [sp, #92]	; 0x5c
   d66ba:	e7e2      	b.n	d6682 <_strtod_r+0x1a>
   d66bc:	2300      	movs	r3, #0
   d66be:	930c      	str	r3, [sp, #48]	; 0x30
   d66c0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d66c2:	782b      	ldrb	r3, [r5, #0]
   d66c4:	2b30      	cmp	r3, #48	; 0x30
   d66c6:	d15c      	bne.n	d6782 <_strtod_r+0x11a>
   d66c8:	786b      	ldrb	r3, [r5, #1]
   d66ca:	2b58      	cmp	r3, #88	; 0x58
   d66cc:	d001      	beq.n	d66d2 <_strtod_r+0x6a>
   d66ce:	2b78      	cmp	r3, #120	; 0x78
   d66d0:	d14c      	bne.n	d676c <_strtod_r+0x104>
   d66d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d66d4:	9301      	str	r3, [sp, #4]
   d66d6:	ab18      	add	r3, sp, #96	; 0x60
   d66d8:	9300      	str	r3, [sp, #0]
   d66da:	4aa9      	ldr	r2, [pc, #676]	; (d6980 <_strtod_r+0x318>)
   d66dc:	9802      	ldr	r0, [sp, #8]
   d66de:	ab19      	add	r3, sp, #100	; 0x64
   d66e0:	a917      	add	r1, sp, #92	; 0x5c
   d66e2:	f000 fe42 	bl	d736a <__gethex>
   d66e6:	f010 0607 	ands.w	r6, r0, #7
   d66ea:	4604      	mov	r4, r0
   d66ec:	f000 8587 	beq.w	d71fe <_strtod_r+0xb96>
   d66f0:	2e06      	cmp	r6, #6
   d66f2:	d105      	bne.n	d6700 <_strtod_r+0x98>
   d66f4:	3501      	adds	r5, #1
   d66f6:	2300      	movs	r3, #0
   d66f8:	9517      	str	r5, [sp, #92]	; 0x5c
   d66fa:	930c      	str	r3, [sp, #48]	; 0x30
   d66fc:	f000 bd7f 	b.w	d71fe <_strtod_r+0xb96>
   d6700:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d6702:	b13a      	cbz	r2, d6714 <_strtod_r+0xac>
   d6704:	2135      	movs	r1, #53	; 0x35
   d6706:	a81a      	add	r0, sp, #104	; 0x68
   d6708:	f001 fcb5 	bl	d8076 <__copybits>
   d670c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d670e:	9802      	ldr	r0, [sp, #8]
   d6710:	f001 f932 	bl	d7978 <_Bfree>
   d6714:	2e06      	cmp	r6, #6
   d6716:	d822      	bhi.n	d675e <_strtod_r+0xf6>
   d6718:	e8df f006 	tbb	[pc, r6]
   d671c:	18080d04 	.word	0x18080d04
   d6720:	0d1d      	.short	0x0d1d
   d6722:	04          	.byte	0x04
   d6723:	00          	.byte	0x00
   d6724:	f04f 0b00 	mov.w	fp, #0
   d6728:	46da      	mov	sl, fp
   d672a:	e018      	b.n	d675e <_strtod_r+0xf6>
   d672c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d6730:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d6734:	e013      	b.n	d675e <_strtod_r+0xf6>
   d6736:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d6738:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d673a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d673e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d6742:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d6746:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d674a:	e008      	b.n	d675e <_strtod_r+0xf6>
   d674c:	f8df b234 	ldr.w	fp, [pc, #564]	; d6984 <_strtod_r+0x31c>
   d6750:	f04f 0a00 	mov.w	sl, #0
   d6754:	e003      	b.n	d675e <_strtod_r+0xf6>
   d6756:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d675a:	f04f 3aff 	mov.w	sl, #4294967295
   d675e:	0721      	lsls	r1, r4, #28
   d6760:	f140 854d 	bpl.w	d71fe <_strtod_r+0xb96>
   d6764:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d6768:	f000 bd49 	b.w	d71fe <_strtod_r+0xb96>
   d676c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d676e:	1c5a      	adds	r2, r3, #1
   d6770:	9217      	str	r2, [sp, #92]	; 0x5c
   d6772:	785b      	ldrb	r3, [r3, #1]
   d6774:	2b30      	cmp	r3, #48	; 0x30
   d6776:	d0f9      	beq.n	d676c <_strtod_r+0x104>
   d6778:	2b00      	cmp	r3, #0
   d677a:	f000 8540 	beq.w	d71fe <_strtod_r+0xb96>
   d677e:	2301      	movs	r3, #1
   d6780:	e000      	b.n	d6784 <_strtod_r+0x11c>
   d6782:	2300      	movs	r3, #0
   d6784:	f04f 0800 	mov.w	r8, #0
   d6788:	9306      	str	r3, [sp, #24]
   d678a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d678c:	9307      	str	r3, [sp, #28]
   d678e:	f8cd 8014 	str.w	r8, [sp, #20]
   d6792:	f8cd 8010 	str.w	r8, [sp, #16]
   d6796:	220a      	movs	r2, #10
   d6798:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d679a:	782e      	ldrb	r6, [r5, #0]
   d679c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d67a0:	b2d9      	uxtb	r1, r3
   d67a2:	2909      	cmp	r1, #9
   d67a4:	d80e      	bhi.n	d67c4 <_strtod_r+0x15c>
   d67a6:	9904      	ldr	r1, [sp, #16]
   d67a8:	2908      	cmp	r1, #8
   d67aa:	bfdd      	ittte	le
   d67ac:	9905      	ldrle	r1, [sp, #20]
   d67ae:	fb02 3301 	mlale	r3, r2, r1, r3
   d67b2:	9305      	strle	r3, [sp, #20]
   d67b4:	fb02 3808 	mlagt	r8, r2, r8, r3
   d67b8:	9b04      	ldr	r3, [sp, #16]
   d67ba:	3501      	adds	r5, #1
   d67bc:	3301      	adds	r3, #1
   d67be:	9304      	str	r3, [sp, #16]
   d67c0:	9517      	str	r5, [sp, #92]	; 0x5c
   d67c2:	e7e9      	b.n	d6798 <_strtod_r+0x130>
   d67c4:	9802      	ldr	r0, [sp, #8]
   d67c6:	f7ff feb1 	bl	d652c <_localeconv_r>
   d67ca:	6807      	ldr	r7, [r0, #0]
   d67cc:	9802      	ldr	r0, [sp, #8]
   d67ce:	f7ff fead 	bl	d652c <_localeconv_r>
   d67d2:	6800      	ldr	r0, [r0, #0]
   d67d4:	f7ff ff0d 	bl	d65f2 <strlen>
   d67d8:	4639      	mov	r1, r7
   d67da:	4602      	mov	r2, r0
   d67dc:	4628      	mov	r0, r5
   d67de:	f7ff ff10 	bl	d6602 <strncmp>
   d67e2:	4607      	mov	r7, r0
   d67e4:	b128      	cbz	r0, d67f2 <_strtod_r+0x18a>
   d67e6:	2000      	movs	r0, #0
   d67e8:	4633      	mov	r3, r6
   d67ea:	9d04      	ldr	r5, [sp, #16]
   d67ec:	4602      	mov	r2, r0
   d67ee:	4601      	mov	r1, r0
   d67f0:	e057      	b.n	d68a2 <_strtod_r+0x23a>
   d67f2:	9802      	ldr	r0, [sp, #8]
   d67f4:	f7ff fe9a 	bl	d652c <_localeconv_r>
   d67f8:	6800      	ldr	r0, [r0, #0]
   d67fa:	f7ff fefa 	bl	d65f2 <strlen>
   d67fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6800:	181a      	adds	r2, r3, r0
   d6802:	9217      	str	r2, [sp, #92]	; 0x5c
   d6804:	9a04      	ldr	r2, [sp, #16]
   d6806:	5c1b      	ldrb	r3, [r3, r0]
   d6808:	2a00      	cmp	r2, #0
   d680a:	d142      	bne.n	d6892 <_strtod_r+0x22a>
   d680c:	4610      	mov	r0, r2
   d680e:	2b30      	cmp	r3, #48	; 0x30
   d6810:	d105      	bne.n	d681e <_strtod_r+0x1b6>
   d6812:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6814:	1c5a      	adds	r2, r3, #1
   d6816:	9217      	str	r2, [sp, #92]	; 0x5c
   d6818:	3001      	adds	r0, #1
   d681a:	785b      	ldrb	r3, [r3, #1]
   d681c:	e7f7      	b.n	d680e <_strtod_r+0x1a6>
   d681e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d6822:	2a08      	cmp	r2, #8
   d6824:	d843      	bhi.n	d68ae <_strtod_r+0x246>
   d6826:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d6828:	9207      	str	r2, [sp, #28]
   d682a:	4602      	mov	r2, r0
   d682c:	2000      	movs	r0, #0
   d682e:	4605      	mov	r5, r0
   d6830:	3b30      	subs	r3, #48	; 0x30
   d6832:	f100 0101 	add.w	r1, r0, #1
   d6836:	d026      	beq.n	d6886 <_strtod_r+0x21e>
   d6838:	440a      	add	r2, r1
   d683a:	eb05 0c00 	add.w	ip, r5, r0
   d683e:	4629      	mov	r1, r5
   d6840:	260a      	movs	r6, #10
   d6842:	4561      	cmp	r1, ip
   d6844:	d00e      	beq.n	d6864 <_strtod_r+0x1fc>
   d6846:	3101      	adds	r1, #1
   d6848:	f101 3eff 	add.w	lr, r1, #4294967295
   d684c:	f1be 0f08 	cmp.w	lr, #8
   d6850:	dc03      	bgt.n	d685a <_strtod_r+0x1f2>
   d6852:	9f05      	ldr	r7, [sp, #20]
   d6854:	4377      	muls	r7, r6
   d6856:	9705      	str	r7, [sp, #20]
   d6858:	e7f3      	b.n	d6842 <_strtod_r+0x1da>
   d685a:	2910      	cmp	r1, #16
   d685c:	bfd8      	it	le
   d685e:	fb06 f808 	mulle.w	r8, r6, r8
   d6862:	e7ee      	b.n	d6842 <_strtod_r+0x1da>
   d6864:	4428      	add	r0, r5
   d6866:	2808      	cmp	r0, #8
   d6868:	f100 0501 	add.w	r5, r0, #1
   d686c:	dc05      	bgt.n	d687a <_strtod_r+0x212>
   d686e:	9805      	ldr	r0, [sp, #20]
   d6870:	210a      	movs	r1, #10
   d6872:	fb01 3300 	mla	r3, r1, r0, r3
   d6876:	9305      	str	r3, [sp, #20]
   d6878:	e004      	b.n	d6884 <_strtod_r+0x21c>
   d687a:	2d10      	cmp	r5, #16
   d687c:	bfdc      	itt	le
   d687e:	210a      	movle	r1, #10
   d6880:	fb01 3808 	mlale	r8, r1, r8, r3
   d6884:	2100      	movs	r1, #0
   d6886:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6888:	1c58      	adds	r0, r3, #1
   d688a:	9017      	str	r0, [sp, #92]	; 0x5c
   d688c:	785b      	ldrb	r3, [r3, #1]
   d688e:	4608      	mov	r0, r1
   d6890:	e002      	b.n	d6898 <_strtod_r+0x230>
   d6892:	9d04      	ldr	r5, [sp, #16]
   d6894:	4638      	mov	r0, r7
   d6896:	463a      	mov	r2, r7
   d6898:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d689c:	2909      	cmp	r1, #9
   d689e:	d9c7      	bls.n	d6830 <_strtod_r+0x1c8>
   d68a0:	2101      	movs	r1, #1
   d68a2:	2b65      	cmp	r3, #101	; 0x65
   d68a4:	d001      	beq.n	d68aa <_strtod_r+0x242>
   d68a6:	2b45      	cmp	r3, #69	; 0x45
   d68a8:	d151      	bne.n	d694e <_strtod_r+0x2e6>
   d68aa:	b96d      	cbnz	r5, d68c8 <_strtod_r+0x260>
   d68ac:	e004      	b.n	d68b8 <_strtod_r+0x250>
   d68ae:	2b65      	cmp	r3, #101	; 0x65
   d68b0:	f040 84b3 	bne.w	d721a <_strtod_r+0xbb2>
   d68b4:	2200      	movs	r2, #0
   d68b6:	2101      	movs	r1, #1
   d68b8:	b928      	cbnz	r0, d68c6 <_strtod_r+0x25e>
   d68ba:	9b06      	ldr	r3, [sp, #24]
   d68bc:	2b00      	cmp	r3, #0
   d68be:	f000 8095 	beq.w	d69ec <_strtod_r+0x384>
   d68c2:	4605      	mov	r5, r0
   d68c4:	e000      	b.n	d68c8 <_strtod_r+0x260>
   d68c6:	2500      	movs	r5, #0
   d68c8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d68ca:	1c63      	adds	r3, r4, #1
   d68cc:	9317      	str	r3, [sp, #92]	; 0x5c
   d68ce:	7863      	ldrb	r3, [r4, #1]
   d68d0:	2b2b      	cmp	r3, #43	; 0x2b
   d68d2:	d006      	beq.n	d68e2 <_strtod_r+0x27a>
   d68d4:	2b2d      	cmp	r3, #45	; 0x2d
   d68d6:	d002      	beq.n	d68de <_strtod_r+0x276>
   d68d8:	2600      	movs	r6, #0
   d68da:	9603      	str	r6, [sp, #12]
   d68dc:	e006      	b.n	d68ec <_strtod_r+0x284>
   d68de:	2301      	movs	r3, #1
   d68e0:	e000      	b.n	d68e4 <_strtod_r+0x27c>
   d68e2:	2300      	movs	r3, #0
   d68e4:	9303      	str	r3, [sp, #12]
   d68e6:	1ca3      	adds	r3, r4, #2
   d68e8:	9317      	str	r3, [sp, #92]	; 0x5c
   d68ea:	78a3      	ldrb	r3, [r4, #2]
   d68ec:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d68f0:	2e09      	cmp	r6, #9
   d68f2:	d82b      	bhi.n	d694c <_strtod_r+0x2e4>
   d68f4:	2b30      	cmp	r3, #48	; 0x30
   d68f6:	d104      	bne.n	d6902 <_strtod_r+0x29a>
   d68f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d68fa:	1c5e      	adds	r6, r3, #1
   d68fc:	9617      	str	r6, [sp, #92]	; 0x5c
   d68fe:	785b      	ldrb	r3, [r3, #1]
   d6900:	e7f8      	b.n	d68f4 <_strtod_r+0x28c>
   d6902:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d6906:	2e08      	cmp	r6, #8
   d6908:	d821      	bhi.n	d694e <_strtod_r+0x2e6>
   d690a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d690e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6910:	f04f 0c0a 	mov.w	ip, #10
   d6914:	461f      	mov	r7, r3
   d6916:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6918:	1c5e      	adds	r6, r3, #1
   d691a:	9617      	str	r6, [sp, #92]	; 0x5c
   d691c:	785b      	ldrb	r3, [r3, #1]
   d691e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d6922:	f1b9 0f09 	cmp.w	r9, #9
   d6926:	d804      	bhi.n	d6932 <_strtod_r+0x2ca>
   d6928:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d692c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d6930:	e7f1      	b.n	d6916 <_strtod_r+0x2ae>
   d6932:	1bf6      	subs	r6, r6, r7
   d6934:	2e08      	cmp	r6, #8
   d6936:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d693a:	dc02      	bgt.n	d6942 <_strtod_r+0x2da>
   d693c:	45f1      	cmp	r9, lr
   d693e:	bfa8      	it	ge
   d6940:	46f1      	movge	r9, lr
   d6942:	9e03      	ldr	r6, [sp, #12]
   d6944:	b12e      	cbz	r6, d6952 <_strtod_r+0x2ea>
   d6946:	f1c9 0900 	rsb	r9, r9, #0
   d694a:	e002      	b.n	d6952 <_strtod_r+0x2ea>
   d694c:	9417      	str	r4, [sp, #92]	; 0x5c
   d694e:	f04f 0900 	mov.w	r9, #0
   d6952:	2d00      	cmp	r5, #0
   d6954:	d153      	bne.n	d69fe <_strtod_r+0x396>
   d6956:	2800      	cmp	r0, #0
   d6958:	f040 8451 	bne.w	d71fe <_strtod_r+0xb96>
   d695c:	9a06      	ldr	r2, [sp, #24]
   d695e:	2a00      	cmp	r2, #0
   d6960:	f040 844d 	bne.w	d71fe <_strtod_r+0xb96>
   d6964:	2900      	cmp	r1, #0
   d6966:	d141      	bne.n	d69ec <_strtod_r+0x384>
   d6968:	2b4e      	cmp	r3, #78	; 0x4e
   d696a:	d020      	beq.n	d69ae <_strtod_r+0x346>
   d696c:	dc02      	bgt.n	d6974 <_strtod_r+0x30c>
   d696e:	2b49      	cmp	r3, #73	; 0x49
   d6970:	d00a      	beq.n	d6988 <_strtod_r+0x320>
   d6972:	e03b      	b.n	d69ec <_strtod_r+0x384>
   d6974:	2b69      	cmp	r3, #105	; 0x69
   d6976:	d007      	beq.n	d6988 <_strtod_r+0x320>
   d6978:	2b6e      	cmp	r3, #110	; 0x6e
   d697a:	d018      	beq.n	d69ae <_strtod_r+0x346>
   d697c:	e036      	b.n	d69ec <_strtod_r+0x384>
   d697e:	bf00      	nop
   d6980:	000d8498 	.word	0x000d8498
   d6984:	7ff00000 	.word	0x7ff00000
   d6988:	49a8      	ldr	r1, [pc, #672]	; (d6c2c <_strtod_r+0x5c4>)
   d698a:	a817      	add	r0, sp, #92	; 0x5c
   d698c:	f000 ff1e 	bl	d77cc <__match>
   d6990:	b360      	cbz	r0, d69ec <_strtod_r+0x384>
   d6992:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6994:	49a6      	ldr	r1, [pc, #664]	; (d6c30 <_strtod_r+0x5c8>)
   d6996:	3b01      	subs	r3, #1
   d6998:	a817      	add	r0, sp, #92	; 0x5c
   d699a:	9317      	str	r3, [sp, #92]	; 0x5c
   d699c:	f000 ff16 	bl	d77cc <__match>
   d69a0:	b910      	cbnz	r0, d69a8 <_strtod_r+0x340>
   d69a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d69a4:	3301      	adds	r3, #1
   d69a6:	9317      	str	r3, [sp, #92]	; 0x5c
   d69a8:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d6c4c <_strtod_r+0x5e4>
   d69ac:	e01a      	b.n	d69e4 <_strtod_r+0x37c>
   d69ae:	49a1      	ldr	r1, [pc, #644]	; (d6c34 <_strtod_r+0x5cc>)
   d69b0:	a817      	add	r0, sp, #92	; 0x5c
   d69b2:	f000 ff0b 	bl	d77cc <__match>
   d69b6:	b1c8      	cbz	r0, d69ec <_strtod_r+0x384>
   d69b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d69ba:	781b      	ldrb	r3, [r3, #0]
   d69bc:	2b28      	cmp	r3, #40	; 0x28
   d69be:	d10f      	bne.n	d69e0 <_strtod_r+0x378>
   d69c0:	aa1a      	add	r2, sp, #104	; 0x68
   d69c2:	499d      	ldr	r1, [pc, #628]	; (d6c38 <_strtod_r+0x5d0>)
   d69c4:	a817      	add	r0, sp, #92	; 0x5c
   d69c6:	f000 ff14 	bl	d77f2 <__hexnan>
   d69ca:	2805      	cmp	r0, #5
   d69cc:	d108      	bne.n	d69e0 <_strtod_r+0x378>
   d69ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d69d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d69d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d69d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d69dc:	f000 bc0f 	b.w	d71fe <_strtod_r+0xb96>
   d69e0:	f8df b26c 	ldr.w	fp, [pc, #620]	; d6c50 <_strtod_r+0x5e8>
   d69e4:	f04f 0a00 	mov.w	sl, #0
   d69e8:	f000 bc09 	b.w	d71fe <_strtod_r+0xb96>
   d69ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d69ee:	9417      	str	r4, [sp, #92]	; 0x5c
   d69f0:	2b00      	cmp	r3, #0
   d69f2:	f000 840f 	beq.w	d7214 <_strtod_r+0xbac>
   d69f6:	2300      	movs	r3, #0
   d69f8:	930c      	str	r3, [sp, #48]	; 0x30
   d69fa:	f000 bc02 	b.w	d7202 <_strtod_r+0xb9a>
   d69fe:	9b04      	ldr	r3, [sp, #16]
   d6a00:	9805      	ldr	r0, [sp, #20]
   d6a02:	2b00      	cmp	r3, #0
   d6a04:	bf08      	it	eq
   d6a06:	462b      	moveq	r3, r5
   d6a08:	2d10      	cmp	r5, #16
   d6a0a:	462c      	mov	r4, r5
   d6a0c:	ebc2 0909 	rsb	r9, r2, r9
   d6a10:	bfa8      	it	ge
   d6a12:	2410      	movge	r4, #16
   d6a14:	9304      	str	r3, [sp, #16]
   d6a16:	f7ff f9cf 	bl	d5db8 <__aeabi_ui2d>
   d6a1a:	2c09      	cmp	r4, #9
   d6a1c:	4682      	mov	sl, r0
   d6a1e:	468b      	mov	fp, r1
   d6a20:	dd13      	ble.n	d6a4a <_strtod_r+0x3e2>
   d6a22:	4b86      	ldr	r3, [pc, #536]	; (d6c3c <_strtod_r+0x5d4>)
   d6a24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d6a28:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d6a2c:	f7ff fa3a 	bl	d5ea4 <__aeabi_dmul>
   d6a30:	4606      	mov	r6, r0
   d6a32:	4640      	mov	r0, r8
   d6a34:	460f      	mov	r7, r1
   d6a36:	f7ff f9bf 	bl	d5db8 <__aeabi_ui2d>
   d6a3a:	4602      	mov	r2, r0
   d6a3c:	460b      	mov	r3, r1
   d6a3e:	4630      	mov	r0, r6
   d6a40:	4639      	mov	r1, r7
   d6a42:	f7ff f87d 	bl	d5b40 <__adddf3>
   d6a46:	4682      	mov	sl, r0
   d6a48:	468b      	mov	fp, r1
   d6a4a:	2d0f      	cmp	r5, #15
   d6a4c:	dc36      	bgt.n	d6abc <_strtod_r+0x454>
   d6a4e:	f1b9 0f00 	cmp.w	r9, #0
   d6a52:	f000 83d4 	beq.w	d71fe <_strtod_r+0xb96>
   d6a56:	dd24      	ble.n	d6aa2 <_strtod_r+0x43a>
   d6a58:	f1b9 0f16 	cmp.w	r9, #22
   d6a5c:	dc07      	bgt.n	d6a6e <_strtod_r+0x406>
   d6a5e:	4d77      	ldr	r5, [pc, #476]	; (d6c3c <_strtod_r+0x5d4>)
   d6a60:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d6a64:	4652      	mov	r2, sl
   d6a66:	465b      	mov	r3, fp
   d6a68:	e9d9 0100 	ldrd	r0, r1, [r9]
   d6a6c:	e014      	b.n	d6a98 <_strtod_r+0x430>
   d6a6e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d6a72:	4599      	cmp	r9, r3
   d6a74:	dc22      	bgt.n	d6abc <_strtod_r+0x454>
   d6a76:	4c71      	ldr	r4, [pc, #452]	; (d6c3c <_strtod_r+0x5d4>)
   d6a78:	f1c5 050f 	rsb	r5, r5, #15
   d6a7c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d6a80:	ebc5 0509 	rsb	r5, r5, r9
   d6a84:	4652      	mov	r2, sl
   d6a86:	465b      	mov	r3, fp
   d6a88:	e9d1 0100 	ldrd	r0, r1, [r1]
   d6a8c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d6a90:	f7ff fa08 	bl	d5ea4 <__aeabi_dmul>
   d6a94:	e9d4 2300 	ldrd	r2, r3, [r4]
   d6a98:	f7ff fa04 	bl	d5ea4 <__aeabi_dmul>
   d6a9c:	4682      	mov	sl, r0
   d6a9e:	468b      	mov	fp, r1
   d6aa0:	e3ad      	b.n	d71fe <_strtod_r+0xb96>
   d6aa2:	f119 0f16 	cmn.w	r9, #22
   d6aa6:	db09      	blt.n	d6abc <_strtod_r+0x454>
   d6aa8:	4d64      	ldr	r5, [pc, #400]	; (d6c3c <_strtod_r+0x5d4>)
   d6aaa:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d6aae:	e9d9 2300 	ldrd	r2, r3, [r9]
   d6ab2:	4650      	mov	r0, sl
   d6ab4:	4659      	mov	r1, fp
   d6ab6:	f7ff fb1f 	bl	d60f8 <__aeabi_ddiv>
   d6aba:	e7ef      	b.n	d6a9c <_strtod_r+0x434>
   d6abc:	1b2c      	subs	r4, r5, r4
   d6abe:	444c      	add	r4, r9
   d6ac0:	2c00      	cmp	r4, #0
   d6ac2:	dd57      	ble.n	d6b74 <_strtod_r+0x50c>
   d6ac4:	f014 010f 	ands.w	r1, r4, #15
   d6ac8:	d00a      	beq.n	d6ae0 <_strtod_r+0x478>
   d6aca:	4b5c      	ldr	r3, [pc, #368]	; (d6c3c <_strtod_r+0x5d4>)
   d6acc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d6ad0:	4652      	mov	r2, sl
   d6ad2:	465b      	mov	r3, fp
   d6ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d6ad8:	f7ff f9e4 	bl	d5ea4 <__aeabi_dmul>
   d6adc:	4682      	mov	sl, r0
   d6ade:	468b      	mov	fp, r1
   d6ae0:	f034 040f 	bics.w	r4, r4, #15
   d6ae4:	f000 80b8 	beq.w	d6c58 <_strtod_r+0x5f0>
   d6ae8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d6aec:	dd0b      	ble.n	d6b06 <_strtod_r+0x49e>
   d6aee:	2400      	movs	r4, #0
   d6af0:	4625      	mov	r5, r4
   d6af2:	9405      	str	r4, [sp, #20]
   d6af4:	9404      	str	r4, [sp, #16]
   d6af6:	9a02      	ldr	r2, [sp, #8]
   d6af8:	f8df b150 	ldr.w	fp, [pc, #336]	; d6c4c <_strtod_r+0x5e4>
   d6afc:	2322      	movs	r3, #34	; 0x22
   d6afe:	6013      	str	r3, [r2, #0]
   d6b00:	f04f 0a00 	mov.w	sl, #0
   d6b04:	e187      	b.n	d6e16 <_strtod_r+0x7ae>
   d6b06:	4e4e      	ldr	r6, [pc, #312]	; (d6c40 <_strtod_r+0x5d8>)
   d6b08:	2300      	movs	r3, #0
   d6b0a:	1124      	asrs	r4, r4, #4
   d6b0c:	4650      	mov	r0, sl
   d6b0e:	4659      	mov	r1, fp
   d6b10:	4698      	mov	r8, r3
   d6b12:	4637      	mov	r7, r6
   d6b14:	2c01      	cmp	r4, #1
   d6b16:	dd0b      	ble.n	d6b30 <_strtod_r+0x4c8>
   d6b18:	07e2      	lsls	r2, r4, #31
   d6b1a:	d504      	bpl.n	d6b26 <_strtod_r+0x4be>
   d6b1c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d6b20:	f7ff f9c0 	bl	d5ea4 <__aeabi_dmul>
   d6b24:	2301      	movs	r3, #1
   d6b26:	f108 0801 	add.w	r8, r8, #1
   d6b2a:	1064      	asrs	r4, r4, #1
   d6b2c:	3608      	adds	r6, #8
   d6b2e:	e7f1      	b.n	d6b14 <_strtod_r+0x4ac>
   d6b30:	b10b      	cbz	r3, d6b36 <_strtod_r+0x4ce>
   d6b32:	4682      	mov	sl, r0
   d6b34:	468b      	mov	fp, r1
   d6b36:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d6b3a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d6b3e:	4652      	mov	r2, sl
   d6b40:	465b      	mov	r3, fp
   d6b42:	e9d7 0100 	ldrd	r0, r1, [r7]
   d6b46:	f7ff f9ad 	bl	d5ea4 <__aeabi_dmul>
   d6b4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d6b4e:	468b      	mov	fp, r1
   d6b50:	460a      	mov	r2, r1
   d6b52:	0d1b      	lsrs	r3, r3, #20
   d6b54:	493b      	ldr	r1, [pc, #236]	; (d6c44 <_strtod_r+0x5dc>)
   d6b56:	051b      	lsls	r3, r3, #20
   d6b58:	428b      	cmp	r3, r1
   d6b5a:	4682      	mov	sl, r0
   d6b5c:	d8c7      	bhi.n	d6aee <_strtod_r+0x486>
   d6b5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d6b62:	428b      	cmp	r3, r1
   d6b64:	bf86      	itte	hi
   d6b66:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d6c54 <_strtod_r+0x5ec>
   d6b6a:	f04f 3aff 	movhi.w	sl, #4294967295
   d6b6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d6b72:	e071      	b.n	d6c58 <_strtod_r+0x5f0>
   d6b74:	d070      	beq.n	d6c58 <_strtod_r+0x5f0>
   d6b76:	4264      	negs	r4, r4
   d6b78:	f014 020f 	ands.w	r2, r4, #15
   d6b7c:	d00a      	beq.n	d6b94 <_strtod_r+0x52c>
   d6b7e:	4b2f      	ldr	r3, [pc, #188]	; (d6c3c <_strtod_r+0x5d4>)
   d6b80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d6b84:	4650      	mov	r0, sl
   d6b86:	4659      	mov	r1, fp
   d6b88:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b8c:	f7ff fab4 	bl	d60f8 <__aeabi_ddiv>
   d6b90:	4682      	mov	sl, r0
   d6b92:	468b      	mov	fp, r1
   d6b94:	1124      	asrs	r4, r4, #4
   d6b96:	d05f      	beq.n	d6c58 <_strtod_r+0x5f0>
   d6b98:	2c1f      	cmp	r4, #31
   d6b9a:	dd04      	ble.n	d6ba6 <_strtod_r+0x53e>
   d6b9c:	2400      	movs	r4, #0
   d6b9e:	4625      	mov	r5, r4
   d6ba0:	9405      	str	r4, [sp, #20]
   d6ba2:	9404      	str	r4, [sp, #16]
   d6ba4:	e130      	b.n	d6e08 <_strtod_r+0x7a0>
   d6ba6:	f014 0f10 	tst.w	r4, #16
   d6baa:	bf0c      	ite	eq
   d6bac:	2300      	moveq	r3, #0
   d6bae:	236a      	movne	r3, #106	; 0x6a
   d6bb0:	4e25      	ldr	r6, [pc, #148]	; (d6c48 <_strtod_r+0x5e0>)
   d6bb2:	9303      	str	r3, [sp, #12]
   d6bb4:	4650      	mov	r0, sl
   d6bb6:	4659      	mov	r1, fp
   d6bb8:	2300      	movs	r3, #0
   d6bba:	2c00      	cmp	r4, #0
   d6bbc:	dd09      	ble.n	d6bd2 <_strtod_r+0x56a>
   d6bbe:	07e2      	lsls	r2, r4, #31
   d6bc0:	d504      	bpl.n	d6bcc <_strtod_r+0x564>
   d6bc2:	e9d6 2300 	ldrd	r2, r3, [r6]
   d6bc6:	f7ff f96d 	bl	d5ea4 <__aeabi_dmul>
   d6bca:	2301      	movs	r3, #1
   d6bcc:	1064      	asrs	r4, r4, #1
   d6bce:	3608      	adds	r6, #8
   d6bd0:	e7f3      	b.n	d6bba <_strtod_r+0x552>
   d6bd2:	b10b      	cbz	r3, d6bd8 <_strtod_r+0x570>
   d6bd4:	4682      	mov	sl, r0
   d6bd6:	468b      	mov	fp, r1
   d6bd8:	9b03      	ldr	r3, [sp, #12]
   d6bda:	b1eb      	cbz	r3, d6c18 <_strtod_r+0x5b0>
   d6bdc:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d6be0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d6be4:	2b00      	cmp	r3, #0
   d6be6:	4659      	mov	r1, fp
   d6be8:	dd16      	ble.n	d6c18 <_strtod_r+0x5b0>
   d6bea:	2b1f      	cmp	r3, #31
   d6bec:	dd0e      	ble.n	d6c0c <_strtod_r+0x5a4>
   d6bee:	2b34      	cmp	r3, #52	; 0x34
   d6bf0:	bfde      	ittt	le
   d6bf2:	3b20      	suble	r3, #32
   d6bf4:	f04f 32ff 	movle.w	r2, #4294967295
   d6bf8:	fa02 f303 	lslle.w	r3, r2, r3
   d6bfc:	f04f 0a00 	mov.w	sl, #0
   d6c00:	bfcc      	ite	gt
   d6c02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d6c06:	ea03 0b01 	andle.w	fp, r3, r1
   d6c0a:	e005      	b.n	d6c18 <_strtod_r+0x5b0>
   d6c0c:	f04f 32ff 	mov.w	r2, #4294967295
   d6c10:	fa02 f303 	lsl.w	r3, r2, r3
   d6c14:	ea03 0a0a 	and.w	sl, r3, sl
   d6c18:	2200      	movs	r2, #0
   d6c1a:	2300      	movs	r3, #0
   d6c1c:	4650      	mov	r0, sl
   d6c1e:	4659      	mov	r1, fp
   d6c20:	f7ff fba8 	bl	d6374 <__aeabi_dcmpeq>
   d6c24:	2800      	cmp	r0, #0
   d6c26:	d1b9      	bne.n	d6b9c <_strtod_r+0x534>
   d6c28:	e018      	b.n	d6c5c <_strtod_r+0x5f4>
   d6c2a:	bf00      	nop
   d6c2c:	000d84c0 	.word	0x000d84c0
   d6c30:	000d84c3 	.word	0x000d84c3
   d6c34:	000d84c9 	.word	0x000d84c9
   d6c38:	000d84ac 	.word	0x000d84ac
   d6c3c:	000d84f8 	.word	0x000d84f8
   d6c40:	000d85c0 	.word	0x000d85c0
   d6c44:	7ca00000 	.word	0x7ca00000
   d6c48:	000d84d0 	.word	0x000d84d0
   d6c4c:	7ff00000 	.word	0x7ff00000
   d6c50:	fff80000 	.word	0xfff80000
   d6c54:	7fefffff 	.word	0x7fefffff
   d6c58:	2300      	movs	r3, #0
   d6c5a:	9303      	str	r3, [sp, #12]
   d6c5c:	9b05      	ldr	r3, [sp, #20]
   d6c5e:	9300      	str	r3, [sp, #0]
   d6c60:	9a04      	ldr	r2, [sp, #16]
   d6c62:	9907      	ldr	r1, [sp, #28]
   d6c64:	9802      	ldr	r0, [sp, #8]
   d6c66:	462b      	mov	r3, r5
   d6c68:	f000 fed8 	bl	d7a1c <__s2b>
   d6c6c:	9005      	str	r0, [sp, #20]
   d6c6e:	2800      	cmp	r0, #0
   d6c70:	f43f af3d 	beq.w	d6aee <_strtod_r+0x486>
   d6c74:	f1b9 0f00 	cmp.w	r9, #0
   d6c78:	f1c9 0300 	rsb	r3, r9, #0
   d6c7c:	bfa8      	it	ge
   d6c7e:	2300      	movge	r3, #0
   d6c80:	930d      	str	r3, [sp, #52]	; 0x34
   d6c82:	2400      	movs	r4, #0
   d6c84:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d6c88:	9312      	str	r3, [sp, #72]	; 0x48
   d6c8a:	4625      	mov	r5, r4
   d6c8c:	9b05      	ldr	r3, [sp, #20]
   d6c8e:	9802      	ldr	r0, [sp, #8]
   d6c90:	6859      	ldr	r1, [r3, #4]
   d6c92:	f000 fe3c 	bl	d790e <_Balloc>
   d6c96:	9004      	str	r0, [sp, #16]
   d6c98:	2800      	cmp	r0, #0
   d6c9a:	f43f af2c 	beq.w	d6af6 <_strtod_r+0x48e>
   d6c9e:	9b05      	ldr	r3, [sp, #20]
   d6ca0:	691a      	ldr	r2, [r3, #16]
   d6ca2:	3202      	adds	r2, #2
   d6ca4:	f103 010c 	add.w	r1, r3, #12
   d6ca8:	0092      	lsls	r2, r2, #2
   d6caa:	300c      	adds	r0, #12
   d6cac:	f7ff fc42 	bl	d6534 <memcpy>
   d6cb0:	aa1a      	add	r2, sp, #104	; 0x68
   d6cb2:	a919      	add	r1, sp, #100	; 0x64
   d6cb4:	ec4b ab10 	vmov	d0, sl, fp
   d6cb8:	9802      	ldr	r0, [sp, #8]
   d6cba:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d6cbe:	f001 f962 	bl	d7f86 <__d2b>
   d6cc2:	9018      	str	r0, [sp, #96]	; 0x60
   d6cc4:	2800      	cmp	r0, #0
   d6cc6:	f43f af16 	beq.w	d6af6 <_strtod_r+0x48e>
   d6cca:	2101      	movs	r1, #1
   d6ccc:	9802      	ldr	r0, [sp, #8]
   d6cce:	f000 ff30 	bl	d7b32 <__i2b>
   d6cd2:	4605      	mov	r5, r0
   d6cd4:	2800      	cmp	r0, #0
   d6cd6:	f43f af0e 	beq.w	d6af6 <_strtod_r+0x48e>
   d6cda:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d6cdc:	9903      	ldr	r1, [sp, #12]
   d6cde:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d6ce0:	2b00      	cmp	r3, #0
   d6ce2:	bfad      	iteet	ge
   d6ce4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d6ce6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d6ce8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d6cec:	eb02 0803 	addge.w	r8, r2, r3
   d6cf0:	bfb8      	it	lt
   d6cf2:	1ad2      	sublt	r2, r2, r3
   d6cf4:	eba3 0301 	sub.w	r3, r3, r1
   d6cf8:	4433      	add	r3, r6
   d6cfa:	49b5      	ldr	r1, [pc, #724]	; (d6fd0 <_strtod_r+0x968>)
   d6cfc:	bfa8      	it	ge
   d6cfe:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d6d00:	3b01      	subs	r3, #1
   d6d02:	428b      	cmp	r3, r1
   d6d04:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d6d08:	f280 808a 	bge.w	d6e20 <_strtod_r+0x7b8>
   d6d0c:	1ac9      	subs	r1, r1, r3
   d6d0e:	291f      	cmp	r1, #31
   d6d10:	bfc8      	it	gt
   d6d12:	4fb0      	ldrgt	r7, [pc, #704]	; (d6fd4 <_strtod_r+0x96c>)
   d6d14:	f04f 0901 	mov.w	r9, #1
   d6d18:	bfd4      	ite	le
   d6d1a:	fa09 f301 	lslle.w	r3, r9, r1
   d6d1e:	1aff      	subgt	r7, r7, r3
   d6d20:	eba6 0601 	sub.w	r6, r6, r1
   d6d24:	bfd9      	ittee	le
   d6d26:	9306      	strle	r3, [sp, #24]
   d6d28:	2700      	movle	r7, #0
   d6d2a:	fa09 f707 	lslgt.w	r7, r9, r7
   d6d2e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d6d32:	eb08 0906 	add.w	r9, r8, r6
   d6d36:	9b03      	ldr	r3, [sp, #12]
   d6d38:	45c8      	cmp	r8, r9
   d6d3a:	4416      	add	r6, r2
   d6d3c:	441e      	add	r6, r3
   d6d3e:	4643      	mov	r3, r8
   d6d40:	bfa8      	it	ge
   d6d42:	464b      	movge	r3, r9
   d6d44:	42b3      	cmp	r3, r6
   d6d46:	bfa8      	it	ge
   d6d48:	4633      	movge	r3, r6
   d6d4a:	2b00      	cmp	r3, #0
   d6d4c:	bfc2      	ittt	gt
   d6d4e:	ebc3 0909 	rsbgt	r9, r3, r9
   d6d52:	1af6      	subgt	r6, r6, r3
   d6d54:	ebc3 0808 	rsbgt	r8, r3, r8
   d6d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d6d5a:	2b00      	cmp	r3, #0
   d6d5c:	d164      	bne.n	d6e28 <_strtod_r+0x7c0>
   d6d5e:	f1b9 0f00 	cmp.w	r9, #0
   d6d62:	dc7a      	bgt.n	d6e5a <_strtod_r+0x7f2>
   d6d64:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d6d66:	2b00      	cmp	r3, #0
   d6d68:	f040 8081 	bne.w	d6e6e <_strtod_r+0x806>
   d6d6c:	2e00      	cmp	r6, #0
   d6d6e:	f300 8088 	bgt.w	d6e82 <_strtod_r+0x81a>
   d6d72:	f1b8 0f00 	cmp.w	r8, #0
   d6d76:	f300 808e 	bgt.w	d6e96 <_strtod_r+0x82e>
   d6d7a:	9a04      	ldr	r2, [sp, #16]
   d6d7c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d6d7e:	9802      	ldr	r0, [sp, #8]
   d6d80:	f001 f82d 	bl	d7dde <__mdiff>
   d6d84:	4604      	mov	r4, r0
   d6d86:	2800      	cmp	r0, #0
   d6d88:	f43f aeb5 	beq.w	d6af6 <_strtod_r+0x48e>
   d6d8c:	68c3      	ldr	r3, [r0, #12]
   d6d8e:	9307      	str	r3, [sp, #28]
   d6d90:	2300      	movs	r3, #0
   d6d92:	60c3      	str	r3, [r0, #12]
   d6d94:	4629      	mov	r1, r5
   d6d96:	f001 f806 	bl	d7da6 <__mcmp>
   d6d9a:	2800      	cmp	r0, #0
   d6d9c:	f280 8089 	bge.w	d6eb2 <_strtod_r+0x84a>
   d6da0:	9b07      	ldr	r3, [sp, #28]
   d6da2:	2b00      	cmp	r3, #0
   d6da4:	f040 8204 	bne.w	d71b0 <_strtod_r+0xb48>
   d6da8:	f1ba 0f00 	cmp.w	sl, #0
   d6dac:	f040 8200 	bne.w	d71b0 <_strtod_r+0xb48>
   d6db0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d6db4:	2b00      	cmp	r3, #0
   d6db6:	f040 81fb 	bne.w	d71b0 <_strtod_r+0xb48>
   d6dba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d6dbe:	0d1b      	lsrs	r3, r3, #20
   d6dc0:	051b      	lsls	r3, r3, #20
   d6dc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d6dc6:	f240 81f3 	bls.w	d71b0 <_strtod_r+0xb48>
   d6dca:	6963      	ldr	r3, [r4, #20]
   d6dcc:	2b00      	cmp	r3, #0
   d6dce:	d06c      	beq.n	d6eaa <_strtod_r+0x842>
   d6dd0:	4621      	mov	r1, r4
   d6dd2:	2201      	movs	r2, #1
   d6dd4:	9802      	ldr	r0, [sp, #8]
   d6dd6:	f000 ff95 	bl	d7d04 <__lshift>
   d6dda:	4629      	mov	r1, r5
   d6ddc:	4604      	mov	r4, r0
   d6dde:	f000 ffe2 	bl	d7da6 <__mcmp>
   d6de2:	2800      	cmp	r0, #0
   d6de4:	f340 81e4 	ble.w	d71b0 <_strtod_r+0xb48>
   d6de8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d6dec:	9a03      	ldr	r2, [sp, #12]
   d6dee:	0d1b      	lsrs	r3, r3, #20
   d6df0:	051b      	lsls	r3, r3, #20
   d6df2:	2a00      	cmp	r2, #0
   d6df4:	f000 808c 	beq.w	d6f10 <_strtod_r+0x8a8>
   d6df8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d6dfc:	f300 8088 	bgt.w	d6f10 <_strtod_r+0x8a8>
   d6e00:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d6e04:	f300 81d6 	bgt.w	d71b4 <_strtod_r+0xb4c>
   d6e08:	9a02      	ldr	r2, [sp, #8]
   d6e0a:	2322      	movs	r3, #34	; 0x22
   d6e0c:	f04f 0a00 	mov.w	sl, #0
   d6e10:	f04f 0b00 	mov.w	fp, #0
   d6e14:	6013      	str	r3, [r2, #0]
   d6e16:	9b05      	ldr	r3, [sp, #20]
   d6e18:	2b00      	cmp	r3, #0
   d6e1a:	f040 81dc 	bne.w	d71d6 <_strtod_r+0xb6e>
   d6e1e:	e1ee      	b.n	d71fe <_strtod_r+0xb96>
   d6e20:	2301      	movs	r3, #1
   d6e22:	2700      	movs	r7, #0
   d6e24:	9306      	str	r3, [sp, #24]
   d6e26:	e784      	b.n	d6d32 <_strtod_r+0x6ca>
   d6e28:	4629      	mov	r1, r5
   d6e2a:	461a      	mov	r2, r3
   d6e2c:	9802      	ldr	r0, [sp, #8]
   d6e2e:	f000 ff1b 	bl	d7c68 <__pow5mult>
   d6e32:	4605      	mov	r5, r0
   d6e34:	2800      	cmp	r0, #0
   d6e36:	f43f ae5e 	beq.w	d6af6 <_strtod_r+0x48e>
   d6e3a:	4601      	mov	r1, r0
   d6e3c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d6e3e:	9802      	ldr	r0, [sp, #8]
   d6e40:	f000 fe80 	bl	d7b44 <__multiply>
   d6e44:	9007      	str	r0, [sp, #28]
   d6e46:	2800      	cmp	r0, #0
   d6e48:	f43f ae55 	beq.w	d6af6 <_strtod_r+0x48e>
   d6e4c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d6e4e:	9802      	ldr	r0, [sp, #8]
   d6e50:	f000 fd92 	bl	d7978 <_Bfree>
   d6e54:	9b07      	ldr	r3, [sp, #28]
   d6e56:	9318      	str	r3, [sp, #96]	; 0x60
   d6e58:	e781      	b.n	d6d5e <_strtod_r+0x6f6>
   d6e5a:	464a      	mov	r2, r9
   d6e5c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d6e5e:	9802      	ldr	r0, [sp, #8]
   d6e60:	f000 ff50 	bl	d7d04 <__lshift>
   d6e64:	9018      	str	r0, [sp, #96]	; 0x60
   d6e66:	2800      	cmp	r0, #0
   d6e68:	f47f af7c 	bne.w	d6d64 <_strtod_r+0x6fc>
   d6e6c:	e643      	b.n	d6af6 <_strtod_r+0x48e>
   d6e6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d6e70:	9904      	ldr	r1, [sp, #16]
   d6e72:	9802      	ldr	r0, [sp, #8]
   d6e74:	f000 fef8 	bl	d7c68 <__pow5mult>
   d6e78:	9004      	str	r0, [sp, #16]
   d6e7a:	2800      	cmp	r0, #0
   d6e7c:	f47f af76 	bne.w	d6d6c <_strtod_r+0x704>
   d6e80:	e639      	b.n	d6af6 <_strtod_r+0x48e>
   d6e82:	4632      	mov	r2, r6
   d6e84:	9904      	ldr	r1, [sp, #16]
   d6e86:	9802      	ldr	r0, [sp, #8]
   d6e88:	f000 ff3c 	bl	d7d04 <__lshift>
   d6e8c:	9004      	str	r0, [sp, #16]
   d6e8e:	2800      	cmp	r0, #0
   d6e90:	f47f af6f 	bne.w	d6d72 <_strtod_r+0x70a>
   d6e94:	e62f      	b.n	d6af6 <_strtod_r+0x48e>
   d6e96:	4629      	mov	r1, r5
   d6e98:	4642      	mov	r2, r8
   d6e9a:	9802      	ldr	r0, [sp, #8]
   d6e9c:	f000 ff32 	bl	d7d04 <__lshift>
   d6ea0:	4605      	mov	r5, r0
   d6ea2:	2800      	cmp	r0, #0
   d6ea4:	f47f af69 	bne.w	d6d7a <_strtod_r+0x712>
   d6ea8:	e625      	b.n	d6af6 <_strtod_r+0x48e>
   d6eaa:	6923      	ldr	r3, [r4, #16]
   d6eac:	2b01      	cmp	r3, #1
   d6eae:	dc8f      	bgt.n	d6dd0 <_strtod_r+0x768>
   d6eb0:	e17e      	b.n	d71b0 <_strtod_r+0xb48>
   d6eb2:	d161      	bne.n	d6f78 <_strtod_r+0x910>
   d6eb4:	9a07      	ldr	r2, [sp, #28]
   d6eb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d6eba:	b322      	cbz	r2, d6f06 <_strtod_r+0x89e>
   d6ebc:	4946      	ldr	r1, [pc, #280]	; (d6fd8 <_strtod_r+0x970>)
   d6ebe:	428b      	cmp	r3, r1
   d6ec0:	465a      	mov	r2, fp
   d6ec2:	d12e      	bne.n	d6f22 <_strtod_r+0x8ba>
   d6ec4:	9b03      	ldr	r3, [sp, #12]
   d6ec6:	4651      	mov	r1, sl
   d6ec8:	b163      	cbz	r3, d6ee4 <_strtod_r+0x87c>
   d6eca:	4b44      	ldr	r3, [pc, #272]	; (d6fdc <_strtod_r+0x974>)
   d6ecc:	4013      	ands	r3, r2
   d6ece:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d6ed2:	d807      	bhi.n	d6ee4 <_strtod_r+0x87c>
   d6ed4:	0d1b      	lsrs	r3, r3, #20
   d6ed6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d6eda:	f04f 30ff 	mov.w	r0, #4294967295
   d6ede:	fa00 f303 	lsl.w	r3, r0, r3
   d6ee2:	e001      	b.n	d6ee8 <_strtod_r+0x880>
   d6ee4:	f04f 33ff 	mov.w	r3, #4294967295
   d6ee8:	428b      	cmp	r3, r1
   d6eea:	d11a      	bne.n	d6f22 <_strtod_r+0x8ba>
   d6eec:	493c      	ldr	r1, [pc, #240]	; (d6fe0 <_strtod_r+0x978>)
   d6eee:	428a      	cmp	r2, r1
   d6ef0:	d102      	bne.n	d6ef8 <_strtod_r+0x890>
   d6ef2:	3301      	adds	r3, #1
   d6ef4:	f43f adff 	beq.w	d6af6 <_strtod_r+0x48e>
   d6ef8:	4b38      	ldr	r3, [pc, #224]	; (d6fdc <_strtod_r+0x974>)
   d6efa:	4013      	ands	r3, r2
   d6efc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d6f00:	f04f 0a00 	mov.w	sl, #0
   d6f04:	e154      	b.n	d71b0 <_strtod_r+0xb48>
   d6f06:	b963      	cbnz	r3, d6f22 <_strtod_r+0x8ba>
   d6f08:	f1ba 0f00 	cmp.w	sl, #0
   d6f0c:	d109      	bne.n	d6f22 <_strtod_r+0x8ba>
   d6f0e:	e76b      	b.n	d6de8 <_strtod_r+0x780>
   d6f10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d6f14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d6f18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d6f1c:	f04f 3aff 	mov.w	sl, #4294967295
   d6f20:	e146      	b.n	d71b0 <_strtod_r+0xb48>
   d6f22:	b117      	cbz	r7, d6f2a <_strtod_r+0x8c2>
   d6f24:	ea17 0f0b 	tst.w	r7, fp
   d6f28:	e002      	b.n	d6f30 <_strtod_r+0x8c8>
   d6f2a:	9b06      	ldr	r3, [sp, #24]
   d6f2c:	ea13 0f0a 	tst.w	r3, sl
   d6f30:	f000 813e 	beq.w	d71b0 <_strtod_r+0xb48>
   d6f34:	9b07      	ldr	r3, [sp, #28]
   d6f36:	9a03      	ldr	r2, [sp, #12]
   d6f38:	4650      	mov	r0, sl
   d6f3a:	4659      	mov	r1, fp
   d6f3c:	b153      	cbz	r3, d6f54 <_strtod_r+0x8ec>
   d6f3e:	f7ff fb75 	bl	d662c <sulp>
   d6f42:	4602      	mov	r2, r0
   d6f44:	460b      	mov	r3, r1
   d6f46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d6f4a:	f7fe fdf9 	bl	d5b40 <__adddf3>
   d6f4e:	4682      	mov	sl, r0
   d6f50:	468b      	mov	fp, r1
   d6f52:	e12d      	b.n	d71b0 <_strtod_r+0xb48>
   d6f54:	f7ff fb6a 	bl	d662c <sulp>
   d6f58:	4602      	mov	r2, r0
   d6f5a:	460b      	mov	r3, r1
   d6f5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d6f60:	f7fe fdec 	bl	d5b3c <__aeabi_dsub>
   d6f64:	2200      	movs	r2, #0
   d6f66:	2300      	movs	r3, #0
   d6f68:	4682      	mov	sl, r0
   d6f6a:	468b      	mov	fp, r1
   d6f6c:	f7ff fa02 	bl	d6374 <__aeabi_dcmpeq>
   d6f70:	2800      	cmp	r0, #0
   d6f72:	f47f af49 	bne.w	d6e08 <_strtod_r+0x7a0>
   d6f76:	e11b      	b.n	d71b0 <_strtod_r+0xb48>
   d6f78:	4629      	mov	r1, r5
   d6f7a:	4620      	mov	r0, r4
   d6f7c:	f001 f851 	bl	d8022 <__ratio>
   d6f80:	ec57 6b10 	vmov	r6, r7, d0
   d6f84:	2200      	movs	r2, #0
   d6f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d6f8a:	ee10 0a10 	vmov	r0, s0
   d6f8e:	4639      	mov	r1, r7
   d6f90:	f7ff fa04 	bl	d639c <__aeabi_dcmple>
   d6f94:	2800      	cmp	r0, #0
   d6f96:	d042      	beq.n	d701e <_strtod_r+0x9b6>
   d6f98:	9b07      	ldr	r3, [sp, #28]
   d6f9a:	b123      	cbz	r3, d6fa6 <_strtod_r+0x93e>
   d6f9c:	f04f 0800 	mov.w	r8, #0
   d6fa0:	f8df 9040 	ldr.w	r9, [pc, #64]	; d6fe4 <_strtod_r+0x97c>
   d6fa4:	e011      	b.n	d6fca <_strtod_r+0x962>
   d6fa6:	f1ba 0f00 	cmp.w	sl, #0
   d6faa:	d103      	bne.n	d6fb4 <_strtod_r+0x94c>
   d6fac:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d6fb0:	b93b      	cbnz	r3, d6fc2 <_strtod_r+0x95a>
   d6fb2:	e01b      	b.n	d6fec <_strtod_r+0x984>
   d6fb4:	f1ba 0f01 	cmp.w	sl, #1
   d6fb8:	d103      	bne.n	d6fc2 <_strtod_r+0x95a>
   d6fba:	f1bb 0f00 	cmp.w	fp, #0
   d6fbe:	f43f af23 	beq.w	d6e08 <_strtod_r+0x7a0>
   d6fc2:	f8df 9024 	ldr.w	r9, [pc, #36]	; d6fe8 <_strtod_r+0x980>
   d6fc6:	f04f 0800 	mov.w	r8, #0
   d6fca:	2600      	movs	r6, #0
   d6fcc:	4f05      	ldr	r7, [pc, #20]	; (d6fe4 <_strtod_r+0x97c>)
   d6fce:	e039      	b.n	d7044 <_strtod_r+0x9dc>
   d6fd0:	fffffc02 	.word	0xfffffc02
   d6fd4:	fffffbe2 	.word	0xfffffbe2
   d6fd8:	000fffff 	.word	0x000fffff
   d6fdc:	7ff00000 	.word	0x7ff00000
   d6fe0:	7fefffff 	.word	0x7fefffff
   d6fe4:	3ff00000 	.word	0x3ff00000
   d6fe8:	bff00000 	.word	0xbff00000
   d6fec:	2200      	movs	r2, #0
   d6fee:	4b98      	ldr	r3, [pc, #608]	; (d7250 <_strtod_r+0xbe8>)
   d6ff0:	4630      	mov	r0, r6
   d6ff2:	4639      	mov	r1, r7
   d6ff4:	f7ff f9c8 	bl	d6388 <__aeabi_dcmplt>
   d6ff8:	b940      	cbnz	r0, d700c <_strtod_r+0x9a4>
   d6ffa:	4630      	mov	r0, r6
   d6ffc:	4639      	mov	r1, r7
   d6ffe:	2200      	movs	r2, #0
   d7000:	4b94      	ldr	r3, [pc, #592]	; (d7254 <_strtod_r+0xbec>)
   d7002:	f7fe ff4f 	bl	d5ea4 <__aeabi_dmul>
   d7006:	4606      	mov	r6, r0
   d7008:	460f      	mov	r7, r1
   d700a:	e001      	b.n	d7010 <_strtod_r+0x9a8>
   d700c:	4f91      	ldr	r7, [pc, #580]	; (d7254 <_strtod_r+0xbec>)
   d700e:	2600      	movs	r6, #0
   d7010:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d7014:	9614      	str	r6, [sp, #80]	; 0x50
   d7016:	9315      	str	r3, [sp, #84]	; 0x54
   d7018:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d701c:	e012      	b.n	d7044 <_strtod_r+0x9dc>
   d701e:	4b8d      	ldr	r3, [pc, #564]	; (d7254 <_strtod_r+0xbec>)
   d7020:	4630      	mov	r0, r6
   d7022:	4639      	mov	r1, r7
   d7024:	2200      	movs	r2, #0
   d7026:	f7fe ff3d 	bl	d5ea4 <__aeabi_dmul>
   d702a:	9b07      	ldr	r3, [sp, #28]
   d702c:	4606      	mov	r6, r0
   d702e:	460f      	mov	r7, r1
   d7030:	b923      	cbnz	r3, d703c <_strtod_r+0x9d4>
   d7032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7036:	900e      	str	r0, [sp, #56]	; 0x38
   d7038:	930f      	str	r3, [sp, #60]	; 0x3c
   d703a:	e001      	b.n	d7040 <_strtod_r+0x9d8>
   d703c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d7040:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d7044:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7048:	0d1b      	lsrs	r3, r3, #20
   d704a:	051b      	lsls	r3, r3, #20
   d704c:	9306      	str	r3, [sp, #24]
   d704e:	9a06      	ldr	r2, [sp, #24]
   d7050:	4b81      	ldr	r3, [pc, #516]	; (d7258 <_strtod_r+0xbf0>)
   d7052:	429a      	cmp	r2, r3
   d7054:	d12b      	bne.n	d70ae <_strtod_r+0xa46>
   d7056:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d705a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d705e:	ec4b ab10 	vmov	d0, sl, fp
   d7062:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d7066:	f000 ff19 	bl	d7e9c <__ulp>
   d706a:	4640      	mov	r0, r8
   d706c:	ec53 2b10 	vmov	r2, r3, d0
   d7070:	4649      	mov	r1, r9
   d7072:	f7fe ff17 	bl	d5ea4 <__aeabi_dmul>
   d7076:	4652      	mov	r2, sl
   d7078:	465b      	mov	r3, fp
   d707a:	f7fe fd61 	bl	d5b40 <__adddf3>
   d707e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7082:	0d1b      	lsrs	r3, r3, #20
   d7084:	4a75      	ldr	r2, [pc, #468]	; (d725c <_strtod_r+0xbf4>)
   d7086:	051b      	lsls	r3, r3, #20
   d7088:	4293      	cmp	r3, r2
   d708a:	4682      	mov	sl, r0
   d708c:	d90c      	bls.n	d70a8 <_strtod_r+0xa40>
   d708e:	4b74      	ldr	r3, [pc, #464]	; (d7260 <_strtod_r+0xbf8>)
   d7090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7092:	429a      	cmp	r2, r3
   d7094:	d103      	bne.n	d709e <_strtod_r+0xa36>
   d7096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7098:	3301      	adds	r3, #1
   d709a:	f43f ad2c 	beq.w	d6af6 <_strtod_r+0x48e>
   d709e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d7260 <_strtod_r+0xbf8>
   d70a2:	f04f 3aff 	mov.w	sl, #4294967295
   d70a6:	e072      	b.n	d718e <_strtod_r+0xb26>
   d70a8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d70ac:	e038      	b.n	d7120 <_strtod_r+0xab8>
   d70ae:	9b03      	ldr	r3, [sp, #12]
   d70b0:	b333      	cbz	r3, d7100 <_strtod_r+0xa98>
   d70b2:	9b06      	ldr	r3, [sp, #24]
   d70b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d70b8:	d822      	bhi.n	d7100 <_strtod_r+0xa98>
   d70ba:	a35d      	add	r3, pc, #372	; (adr r3, d7230 <_strtod_r+0xbc8>)
   d70bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d70c0:	4630      	mov	r0, r6
   d70c2:	4639      	mov	r1, r7
   d70c4:	f7ff f96a 	bl	d639c <__aeabi_dcmple>
   d70c8:	b1a8      	cbz	r0, d70f6 <_strtod_r+0xa8e>
   d70ca:	4639      	mov	r1, r7
   d70cc:	4630      	mov	r0, r6
   d70ce:	f7ff f9ab 	bl	d6428 <__aeabi_d2uiz>
   d70d2:	2800      	cmp	r0, #0
   d70d4:	bf08      	it	eq
   d70d6:	2001      	moveq	r0, #1
   d70d8:	f7fe fe6e 	bl	d5db8 <__aeabi_ui2d>
   d70dc:	9b07      	ldr	r3, [sp, #28]
   d70de:	4606      	mov	r6, r0
   d70e0:	460f      	mov	r7, r1
   d70e2:	b923      	cbnz	r3, d70ee <_strtod_r+0xa86>
   d70e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d70e8:	9010      	str	r0, [sp, #64]	; 0x40
   d70ea:	9311      	str	r3, [sp, #68]	; 0x44
   d70ec:	e001      	b.n	d70f2 <_strtod_r+0xa8a>
   d70ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d70f2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d70f6:	9a06      	ldr	r2, [sp, #24]
   d70f8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d70fc:	ebc2 0903 	rsb	r9, r2, r3
   d7100:	ed9d 0b08 	vldr	d0, [sp, #32]
   d7104:	f000 feca 	bl	d7e9c <__ulp>
   d7108:	4640      	mov	r0, r8
   d710a:	ec53 2b10 	vmov	r2, r3, d0
   d710e:	4649      	mov	r1, r9
   d7110:	f7fe fec8 	bl	d5ea4 <__aeabi_dmul>
   d7114:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7118:	f7fe fd12 	bl	d5b40 <__adddf3>
   d711c:	4682      	mov	sl, r0
   d711e:	468b      	mov	fp, r1
   d7120:	9b03      	ldr	r3, [sp, #12]
   d7122:	bba3      	cbnz	r3, d718e <_strtod_r+0xb26>
   d7124:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7128:	0d1b      	lsrs	r3, r3, #20
   d712a:	9a06      	ldr	r2, [sp, #24]
   d712c:	051b      	lsls	r3, r3, #20
   d712e:	429a      	cmp	r2, r3
   d7130:	46d8      	mov	r8, fp
   d7132:	d12c      	bne.n	d718e <_strtod_r+0xb26>
   d7134:	4639      	mov	r1, r7
   d7136:	4630      	mov	r0, r6
   d7138:	f7ff f94e 	bl	d63d8 <__aeabi_d2iz>
   d713c:	f7fe fe4c 	bl	d5dd8 <__aeabi_i2d>
   d7140:	460b      	mov	r3, r1
   d7142:	4602      	mov	r2, r0
   d7144:	4639      	mov	r1, r7
   d7146:	4630      	mov	r0, r6
   d7148:	f7fe fcf8 	bl	d5b3c <__aeabi_dsub>
   d714c:	9b07      	ldr	r3, [sp, #28]
   d714e:	4606      	mov	r6, r0
   d7150:	460f      	mov	r7, r1
   d7152:	b92b      	cbnz	r3, d7160 <_strtod_r+0xaf8>
   d7154:	f1ba 0f00 	cmp.w	sl, #0
   d7158:	d102      	bne.n	d7160 <_strtod_r+0xaf8>
   d715a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d715e:	b183      	cbz	r3, d7182 <_strtod_r+0xb1a>
   d7160:	a335      	add	r3, pc, #212	; (adr r3, d7238 <_strtod_r+0xbd0>)
   d7162:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7166:	4630      	mov	r0, r6
   d7168:	4639      	mov	r1, r7
   d716a:	f7ff f90d 	bl	d6388 <__aeabi_dcmplt>
   d716e:	2800      	cmp	r0, #0
   d7170:	d131      	bne.n	d71d6 <_strtod_r+0xb6e>
   d7172:	a333      	add	r3, pc, #204	; (adr r3, d7240 <_strtod_r+0xbd8>)
   d7174:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7178:	4630      	mov	r0, r6
   d717a:	4639      	mov	r1, r7
   d717c:	f7ff f922 	bl	d63c4 <__aeabi_dcmpgt>
   d7180:	e004      	b.n	d718c <_strtod_r+0xb24>
   d7182:	a331      	add	r3, pc, #196	; (adr r3, d7248 <_strtod_r+0xbe0>)
   d7184:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7188:	f7ff f8fe 	bl	d6388 <__aeabi_dcmplt>
   d718c:	bb18      	cbnz	r0, d71d6 <_strtod_r+0xb6e>
   d718e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7190:	9802      	ldr	r0, [sp, #8]
   d7192:	f000 fbf1 	bl	d7978 <_Bfree>
   d7196:	9904      	ldr	r1, [sp, #16]
   d7198:	9802      	ldr	r0, [sp, #8]
   d719a:	f000 fbed 	bl	d7978 <_Bfree>
   d719e:	4629      	mov	r1, r5
   d71a0:	9802      	ldr	r0, [sp, #8]
   d71a2:	f000 fbe9 	bl	d7978 <_Bfree>
   d71a6:	4621      	mov	r1, r4
   d71a8:	9802      	ldr	r0, [sp, #8]
   d71aa:	f000 fbe5 	bl	d7978 <_Bfree>
   d71ae:	e56d      	b.n	d6c8c <_strtod_r+0x624>
   d71b0:	9b03      	ldr	r3, [sp, #12]
   d71b2:	b183      	cbz	r3, d71d6 <_strtod_r+0xb6e>
   d71b4:	4b2b      	ldr	r3, [pc, #172]	; (d7264 <_strtod_r+0xbfc>)
   d71b6:	930b      	str	r3, [sp, #44]	; 0x2c
   d71b8:	2300      	movs	r3, #0
   d71ba:	930a      	str	r3, [sp, #40]	; 0x28
   d71bc:	4650      	mov	r0, sl
   d71be:	4659      	mov	r1, fp
   d71c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d71c4:	f7fe fe6e 	bl	d5ea4 <__aeabi_dmul>
   d71c8:	4682      	mov	sl, r0
   d71ca:	468b      	mov	fp, r1
   d71cc:	b919      	cbnz	r1, d71d6 <_strtod_r+0xb6e>
   d71ce:	b910      	cbnz	r0, d71d6 <_strtod_r+0xb6e>
   d71d0:	9a02      	ldr	r2, [sp, #8]
   d71d2:	2322      	movs	r3, #34	; 0x22
   d71d4:	6013      	str	r3, [r2, #0]
   d71d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   d71d8:	9802      	ldr	r0, [sp, #8]
   d71da:	f000 fbcd 	bl	d7978 <_Bfree>
   d71de:	9904      	ldr	r1, [sp, #16]
   d71e0:	9802      	ldr	r0, [sp, #8]
   d71e2:	f000 fbc9 	bl	d7978 <_Bfree>
   d71e6:	4629      	mov	r1, r5
   d71e8:	9802      	ldr	r0, [sp, #8]
   d71ea:	f000 fbc5 	bl	d7978 <_Bfree>
   d71ee:	9905      	ldr	r1, [sp, #20]
   d71f0:	9802      	ldr	r0, [sp, #8]
   d71f2:	f000 fbc1 	bl	d7978 <_Bfree>
   d71f6:	4621      	mov	r1, r4
   d71f8:	9802      	ldr	r0, [sp, #8]
   d71fa:	f000 fbbd 	bl	d7978 <_Bfree>
   d71fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7200:	b113      	cbz	r3, d7208 <_strtod_r+0xba0>
   d7202:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d7204:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7206:	6013      	str	r3, [r2, #0]
   d7208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d720a:	b11b      	cbz	r3, d7214 <_strtod_r+0xbac>
   d720c:	4652      	mov	r2, sl
   d720e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d7212:	e007      	b.n	d7224 <_strtod_r+0xbbc>
   d7214:	4652      	mov	r2, sl
   d7216:	465b      	mov	r3, fp
   d7218:	e004      	b.n	d7224 <_strtod_r+0xbbc>
   d721a:	2500      	movs	r5, #0
   d721c:	462a      	mov	r2, r5
   d721e:	2101      	movs	r1, #1
   d7220:	f7ff bb41 	b.w	d68a6 <_strtod_r+0x23e>
   d7224:	ec43 2b10 	vmov	d0, r2, r3
   d7228:	b01d      	add	sp, #116	; 0x74
   d722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d722e:	bf00      	nop
   d7230:	ffc00000 	.word	0xffc00000
   d7234:	41dfffff 	.word	0x41dfffff
   d7238:	94a03595 	.word	0x94a03595
   d723c:	3fdfffff 	.word	0x3fdfffff
   d7240:	35afe535 	.word	0x35afe535
   d7244:	3fe00000 	.word	0x3fe00000
   d7248:	94a03595 	.word	0x94a03595
   d724c:	3fcfffff 	.word	0x3fcfffff
   d7250:	3ff00000 	.word	0x3ff00000
   d7254:	3fe00000 	.word	0x3fe00000
   d7258:	7fe00000 	.word	0x7fe00000
   d725c:	7c9fffff 	.word	0x7c9fffff
   d7260:	7fefffff 	.word	0x7fefffff
   d7264:	39500000 	.word	0x39500000

000d7268 <strtod>:
   d7268:	4b02      	ldr	r3, [pc, #8]	; (d7274 <strtod+0xc>)
   d726a:	460a      	mov	r2, r1
   d726c:	4601      	mov	r1, r0
   d726e:	6818      	ldr	r0, [r3, #0]
   d7270:	f7ff b9fa 	b.w	d6668 <_strtod_r>
   d7274:	2003e26c 	.word	0x2003e26c

000d7278 <__strtok_r>:
   d7278:	b5f0      	push	{r4, r5, r6, r7, lr}
   d727a:	b948      	cbnz	r0, d7290 <__strtok_r+0x18>
   d727c:	6810      	ldr	r0, [r2, #0]
   d727e:	b938      	cbnz	r0, d7290 <__strtok_r+0x18>
   d7280:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7282:	f817 6b01 	ldrb.w	r6, [r7], #1
   d7286:	b15e      	cbz	r6, d72a0 <__strtok_r+0x28>
   d7288:	42b5      	cmp	r5, r6
   d728a:	d1fa      	bne.n	d7282 <__strtok_r+0xa>
   d728c:	b12b      	cbz	r3, d729a <__strtok_r+0x22>
   d728e:	4620      	mov	r0, r4
   d7290:	4604      	mov	r4, r0
   d7292:	460f      	mov	r7, r1
   d7294:	f814 5b01 	ldrb.w	r5, [r4], #1
   d7298:	e7f3      	b.n	d7282 <__strtok_r+0xa>
   d729a:	6014      	str	r4, [r2, #0]
   d729c:	7003      	strb	r3, [r0, #0]
   d729e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d72a0:	b94d      	cbnz	r5, d72b6 <__strtok_r+0x3e>
   d72a2:	6015      	str	r5, [r2, #0]
   d72a4:	4628      	mov	r0, r5
   d72a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d72a8:	f817 6b01 	ldrb.w	r6, [r7], #1
   d72ac:	42b5      	cmp	r5, r6
   d72ae:	d007      	beq.n	d72c0 <__strtok_r+0x48>
   d72b0:	2e00      	cmp	r6, #0
   d72b2:	d1f9      	bne.n	d72a8 <__strtok_r+0x30>
   d72b4:	461c      	mov	r4, r3
   d72b6:	4623      	mov	r3, r4
   d72b8:	460f      	mov	r7, r1
   d72ba:	f813 5b01 	ldrb.w	r5, [r3], #1
   d72be:	e7f3      	b.n	d72a8 <__strtok_r+0x30>
   d72c0:	b115      	cbz	r5, d72c8 <__strtok_r+0x50>
   d72c2:	2100      	movs	r1, #0
   d72c4:	7021      	strb	r1, [r4, #0]
   d72c6:	e000      	b.n	d72ca <__strtok_r+0x52>
   d72c8:	462b      	mov	r3, r5
   d72ca:	6013      	str	r3, [r2, #0]
   d72cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d72ce <strtok_r>:
   d72ce:	2301      	movs	r3, #1
   d72d0:	f7ff bfd2 	b.w	d7278 <__strtok_r>

000d72d4 <rshift>:
   d72d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d72d6:	6906      	ldr	r6, [r0, #16]
   d72d8:	114b      	asrs	r3, r1, #5
   d72da:	42b3      	cmp	r3, r6
   d72dc:	f100 0514 	add.w	r5, r0, #20
   d72e0:	da27      	bge.n	d7332 <rshift+0x5e>
   d72e2:	f011 011f 	ands.w	r1, r1, #31
   d72e6:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d72ea:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d72ee:	d101      	bne.n	d72f4 <rshift+0x20>
   d72f0:	4629      	mov	r1, r5
   d72f2:	e016      	b.n	d7322 <rshift+0x4e>
   d72f4:	1d14      	adds	r4, r2, #4
   d72f6:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d72fa:	f1c1 0e20 	rsb	lr, r1, #32
   d72fe:	40ca      	lsrs	r2, r1
   d7300:	462b      	mov	r3, r5
   d7302:	42b4      	cmp	r4, r6
   d7304:	d209      	bcs.n	d731a <rshift+0x46>
   d7306:	6827      	ldr	r7, [r4, #0]
   d7308:	fa07 f70e 	lsl.w	r7, r7, lr
   d730c:	433a      	orrs	r2, r7
   d730e:	f843 2b04 	str.w	r2, [r3], #4
   d7312:	f854 2b04 	ldr.w	r2, [r4], #4
   d7316:	40ca      	lsrs	r2, r1
   d7318:	e7f3      	b.n	d7302 <rshift+0x2e>
   d731a:	601a      	str	r2, [r3, #0]
   d731c:	b152      	cbz	r2, d7334 <rshift+0x60>
   d731e:	3304      	adds	r3, #4
   d7320:	e008      	b.n	d7334 <rshift+0x60>
   d7322:	42b2      	cmp	r2, r6
   d7324:	460b      	mov	r3, r1
   d7326:	d205      	bcs.n	d7334 <rshift+0x60>
   d7328:	f852 3b04 	ldr.w	r3, [r2], #4
   d732c:	f841 3b04 	str.w	r3, [r1], #4
   d7330:	e7f7      	b.n	d7322 <rshift+0x4e>
   d7332:	462b      	mov	r3, r5
   d7334:	1b5b      	subs	r3, r3, r5
   d7336:	109b      	asrs	r3, r3, #2
   d7338:	6103      	str	r3, [r0, #16]
   d733a:	b903      	cbnz	r3, d733e <rshift+0x6a>
   d733c:	6143      	str	r3, [r0, #20]
   d733e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7340 <__hexdig_fun>:
   d7340:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7344:	2b09      	cmp	r3, #9
   d7346:	d801      	bhi.n	d734c <__hexdig_fun+0xc>
   d7348:	3820      	subs	r0, #32
   d734a:	e00a      	b.n	d7362 <__hexdig_fun+0x22>
   d734c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d7350:	2b05      	cmp	r3, #5
   d7352:	d801      	bhi.n	d7358 <__hexdig_fun+0x18>
   d7354:	3847      	subs	r0, #71	; 0x47
   d7356:	e004      	b.n	d7362 <__hexdig_fun+0x22>
   d7358:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d735c:	2b05      	cmp	r3, #5
   d735e:	d802      	bhi.n	d7366 <__hexdig_fun+0x26>
   d7360:	3827      	subs	r0, #39	; 0x27
   d7362:	b2c0      	uxtb	r0, r0
   d7364:	4770      	bx	lr
   d7366:	2000      	movs	r0, #0
   d7368:	4770      	bx	lr

000d736a <__gethex>:
   d736a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d736e:	b08b      	sub	sp, #44	; 0x2c
   d7370:	468a      	mov	sl, r1
   d7372:	4690      	mov	r8, r2
   d7374:	9306      	str	r3, [sp, #24]
   d7376:	9002      	str	r0, [sp, #8]
   d7378:	f7ff f8d8 	bl	d652c <_localeconv_r>
   d737c:	6803      	ldr	r3, [r0, #0]
   d737e:	9303      	str	r3, [sp, #12]
   d7380:	4618      	mov	r0, r3
   d7382:	f7ff f936 	bl	d65f2 <strlen>
   d7386:	9b03      	ldr	r3, [sp, #12]
   d7388:	9001      	str	r0, [sp, #4]
   d738a:	4403      	add	r3, r0
   d738c:	f04f 0b00 	mov.w	fp, #0
   d7390:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d7394:	9307      	str	r3, [sp, #28]
   d7396:	f8da 3000 	ldr.w	r3, [sl]
   d739a:	3302      	adds	r3, #2
   d739c:	461f      	mov	r7, r3
   d739e:	f813 0b01 	ldrb.w	r0, [r3], #1
   d73a2:	2830      	cmp	r0, #48	; 0x30
   d73a4:	d102      	bne.n	d73ac <__gethex+0x42>
   d73a6:	f10b 0b01 	add.w	fp, fp, #1
   d73aa:	e7f7      	b.n	d739c <__gethex+0x32>
   d73ac:	f7ff ffc8 	bl	d7340 <__hexdig_fun>
   d73b0:	4604      	mov	r4, r0
   d73b2:	b9e0      	cbnz	r0, d73ee <__gethex+0x84>
   d73b4:	9a01      	ldr	r2, [sp, #4]
   d73b6:	9903      	ldr	r1, [sp, #12]
   d73b8:	4638      	mov	r0, r7
   d73ba:	f7ff f922 	bl	d6602 <strncmp>
   d73be:	2800      	cmp	r0, #0
   d73c0:	d134      	bne.n	d742c <__gethex+0xc2>
   d73c2:	9b01      	ldr	r3, [sp, #4]
   d73c4:	5cf8      	ldrb	r0, [r7, r3]
   d73c6:	18fe      	adds	r6, r7, r3
   d73c8:	f7ff ffba 	bl	d7340 <__hexdig_fun>
   d73cc:	b380      	cbz	r0, d7430 <__gethex+0xc6>
   d73ce:	4633      	mov	r3, r6
   d73d0:	7818      	ldrb	r0, [r3, #0]
   d73d2:	2830      	cmp	r0, #48	; 0x30
   d73d4:	461f      	mov	r7, r3
   d73d6:	f103 0301 	add.w	r3, r3, #1
   d73da:	d0f9      	beq.n	d73d0 <__gethex+0x66>
   d73dc:	f7ff ffb0 	bl	d7340 <__hexdig_fun>
   d73e0:	fab0 f580 	clz	r5, r0
   d73e4:	096d      	lsrs	r5, r5, #5
   d73e6:	4634      	mov	r4, r6
   d73e8:	f04f 0b01 	mov.w	fp, #1
   d73ec:	e001      	b.n	d73f2 <__gethex+0x88>
   d73ee:	2500      	movs	r5, #0
   d73f0:	462c      	mov	r4, r5
   d73f2:	463a      	mov	r2, r7
   d73f4:	4616      	mov	r6, r2
   d73f6:	3201      	adds	r2, #1
   d73f8:	7830      	ldrb	r0, [r6, #0]
   d73fa:	f7ff ffa1 	bl	d7340 <__hexdig_fun>
   d73fe:	2800      	cmp	r0, #0
   d7400:	d1f8      	bne.n	d73f4 <__gethex+0x8a>
   d7402:	9a01      	ldr	r2, [sp, #4]
   d7404:	9903      	ldr	r1, [sp, #12]
   d7406:	4630      	mov	r0, r6
   d7408:	f7ff f8fb 	bl	d6602 <strncmp>
   d740c:	b950      	cbnz	r0, d7424 <__gethex+0xba>
   d740e:	b954      	cbnz	r4, d7426 <__gethex+0xbc>
   d7410:	9b01      	ldr	r3, [sp, #4]
   d7412:	18f4      	adds	r4, r6, r3
   d7414:	4622      	mov	r2, r4
   d7416:	4616      	mov	r6, r2
   d7418:	3201      	adds	r2, #1
   d741a:	7830      	ldrb	r0, [r6, #0]
   d741c:	f7ff ff90 	bl	d7340 <__hexdig_fun>
   d7420:	2800      	cmp	r0, #0
   d7422:	d1f8      	bne.n	d7416 <__gethex+0xac>
   d7424:	b134      	cbz	r4, d7434 <__gethex+0xca>
   d7426:	1ba4      	subs	r4, r4, r6
   d7428:	00a4      	lsls	r4, r4, #2
   d742a:	e003      	b.n	d7434 <__gethex+0xca>
   d742c:	463e      	mov	r6, r7
   d742e:	e000      	b.n	d7432 <__gethex+0xc8>
   d7430:	4604      	mov	r4, r0
   d7432:	2501      	movs	r5, #1
   d7434:	7833      	ldrb	r3, [r6, #0]
   d7436:	2b50      	cmp	r3, #80	; 0x50
   d7438:	d001      	beq.n	d743e <__gethex+0xd4>
   d743a:	2b70      	cmp	r3, #112	; 0x70
   d743c:	d12a      	bne.n	d7494 <__gethex+0x12a>
   d743e:	7873      	ldrb	r3, [r6, #1]
   d7440:	2b2b      	cmp	r3, #43	; 0x2b
   d7442:	d008      	beq.n	d7456 <__gethex+0xec>
   d7444:	2b2d      	cmp	r3, #45	; 0x2d
   d7446:	d003      	beq.n	d7450 <__gethex+0xe6>
   d7448:	1c71      	adds	r1, r6, #1
   d744a:	f04f 0900 	mov.w	r9, #0
   d744e:	e005      	b.n	d745c <__gethex+0xf2>
   d7450:	f04f 0901 	mov.w	r9, #1
   d7454:	e001      	b.n	d745a <__gethex+0xf0>
   d7456:	f04f 0900 	mov.w	r9, #0
   d745a:	1cb1      	adds	r1, r6, #2
   d745c:	7808      	ldrb	r0, [r1, #0]
   d745e:	f7ff ff6f 	bl	d7340 <__hexdig_fun>
   d7462:	1e43      	subs	r3, r0, #1
   d7464:	b2db      	uxtb	r3, r3
   d7466:	2b18      	cmp	r3, #24
   d7468:	d814      	bhi.n	d7494 <__gethex+0x12a>
   d746a:	f1a0 0210 	sub.w	r2, r0, #16
   d746e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d7472:	f7ff ff65 	bl	d7340 <__hexdig_fun>
   d7476:	1e43      	subs	r3, r0, #1
   d7478:	b2db      	uxtb	r3, r3
   d747a:	2b18      	cmp	r3, #24
   d747c:	d804      	bhi.n	d7488 <__gethex+0x11e>
   d747e:	230a      	movs	r3, #10
   d7480:	fb03 0202 	mla	r2, r3, r2, r0
   d7484:	3a10      	subs	r2, #16
   d7486:	e7f2      	b.n	d746e <__gethex+0x104>
   d7488:	f1b9 0f00 	cmp.w	r9, #0
   d748c:	d000      	beq.n	d7490 <__gethex+0x126>
   d748e:	4252      	negs	r2, r2
   d7490:	4414      	add	r4, r2
   d7492:	e000      	b.n	d7496 <__gethex+0x12c>
   d7494:	4631      	mov	r1, r6
   d7496:	f8ca 1000 	str.w	r1, [sl]
   d749a:	b12d      	cbz	r5, d74a8 <__gethex+0x13e>
   d749c:	f1bb 0f00 	cmp.w	fp, #0
   d74a0:	bf14      	ite	ne
   d74a2:	2000      	movne	r0, #0
   d74a4:	2006      	moveq	r0, #6
   d74a6:	e17c      	b.n	d77a2 <__gethex+0x438>
   d74a8:	1bf3      	subs	r3, r6, r7
   d74aa:	3b01      	subs	r3, #1
   d74ac:	4629      	mov	r1, r5
   d74ae:	2b07      	cmp	r3, #7
   d74b0:	dd02      	ble.n	d74b8 <__gethex+0x14e>
   d74b2:	3101      	adds	r1, #1
   d74b4:	105b      	asrs	r3, r3, #1
   d74b6:	e7fa      	b.n	d74ae <__gethex+0x144>
   d74b8:	9802      	ldr	r0, [sp, #8]
   d74ba:	f000 fa28 	bl	d790e <_Balloc>
   d74be:	9b01      	ldr	r3, [sp, #4]
   d74c0:	f100 0a14 	add.w	sl, r0, #20
   d74c4:	f04f 0900 	mov.w	r9, #0
   d74c8:	f1c3 0301 	rsb	r3, r3, #1
   d74cc:	4605      	mov	r5, r0
   d74ce:	f8cd a010 	str.w	sl, [sp, #16]
   d74d2:	46cb      	mov	fp, r9
   d74d4:	9308      	str	r3, [sp, #32]
   d74d6:	42b7      	cmp	r7, r6
   d74d8:	d22f      	bcs.n	d753a <__gethex+0x1d0>
   d74da:	1e73      	subs	r3, r6, #1
   d74dc:	9305      	str	r3, [sp, #20]
   d74de:	9a07      	ldr	r2, [sp, #28]
   d74e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d74e4:	4293      	cmp	r3, r2
   d74e6:	d00b      	beq.n	d7500 <__gethex+0x196>
   d74e8:	f1bb 0f20 	cmp.w	fp, #32
   d74ec:	d116      	bne.n	d751c <__gethex+0x1b2>
   d74ee:	9b04      	ldr	r3, [sp, #16]
   d74f0:	f8c3 9000 	str.w	r9, [r3]
   d74f4:	3304      	adds	r3, #4
   d74f6:	f04f 0900 	mov.w	r9, #0
   d74fa:	9304      	str	r3, [sp, #16]
   d74fc:	46cb      	mov	fp, r9
   d74fe:	e00d      	b.n	d751c <__gethex+0x1b2>
   d7500:	9b05      	ldr	r3, [sp, #20]
   d7502:	9a08      	ldr	r2, [sp, #32]
   d7504:	4413      	add	r3, r2
   d7506:	429f      	cmp	r7, r3
   d7508:	d8ee      	bhi.n	d74e8 <__gethex+0x17e>
   d750a:	4618      	mov	r0, r3
   d750c:	9a01      	ldr	r2, [sp, #4]
   d750e:	9903      	ldr	r1, [sp, #12]
   d7510:	9309      	str	r3, [sp, #36]	; 0x24
   d7512:	f7ff f876 	bl	d6602 <strncmp>
   d7516:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7518:	b168      	cbz	r0, d7536 <__gethex+0x1cc>
   d751a:	e7e5      	b.n	d74e8 <__gethex+0x17e>
   d751c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d7520:	f7ff ff0e 	bl	d7340 <__hexdig_fun>
   d7524:	f000 000f 	and.w	r0, r0, #15
   d7528:	fa00 f00b 	lsl.w	r0, r0, fp
   d752c:	9b05      	ldr	r3, [sp, #20]
   d752e:	ea49 0900 	orr.w	r9, r9, r0
   d7532:	f10b 0b04 	add.w	fp, fp, #4
   d7536:	461e      	mov	r6, r3
   d7538:	e7cd      	b.n	d74d6 <__gethex+0x16c>
   d753a:	9804      	ldr	r0, [sp, #16]
   d753c:	f840 9b04 	str.w	r9, [r0], #4
   d7540:	ebca 0000 	rsb	r0, sl, r0
   d7544:	1080      	asrs	r0, r0, #2
   d7546:	6128      	str	r0, [r5, #16]
   d7548:	0147      	lsls	r7, r0, #5
   d754a:	4648      	mov	r0, r9
   d754c:	f000 faa4 	bl	d7a98 <__hi0bits>
   d7550:	f8d8 6000 	ldr.w	r6, [r8]
   d7554:	1a38      	subs	r0, r7, r0
   d7556:	42b0      	cmp	r0, r6
   d7558:	dd26      	ble.n	d75a8 <__gethex+0x23e>
   d755a:	1b87      	subs	r7, r0, r6
   d755c:	4639      	mov	r1, r7
   d755e:	4628      	mov	r0, r5
   d7560:	f000 fda3 	bl	d80aa <__any_on>
   d7564:	b1c8      	cbz	r0, d759a <__gethex+0x230>
   d7566:	1e7b      	subs	r3, r7, #1
   d7568:	1159      	asrs	r1, r3, #5
   d756a:	f003 021f 	and.w	r2, r3, #31
   d756e:	f04f 0901 	mov.w	r9, #1
   d7572:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d7576:	fa09 f202 	lsl.w	r2, r9, r2
   d757a:	420a      	tst	r2, r1
   d757c:	d00e      	beq.n	d759c <__gethex+0x232>
   d757e:	454b      	cmp	r3, r9
   d7580:	dc02      	bgt.n	d7588 <__gethex+0x21e>
   d7582:	f04f 0902 	mov.w	r9, #2
   d7586:	e009      	b.n	d759c <__gethex+0x232>
   d7588:	1eb9      	subs	r1, r7, #2
   d758a:	4628      	mov	r0, r5
   d758c:	f000 fd8d 	bl	d80aa <__any_on>
   d7590:	2800      	cmp	r0, #0
   d7592:	d0f6      	beq.n	d7582 <__gethex+0x218>
   d7594:	f04f 0903 	mov.w	r9, #3
   d7598:	e000      	b.n	d759c <__gethex+0x232>
   d759a:	4681      	mov	r9, r0
   d759c:	4639      	mov	r1, r7
   d759e:	4628      	mov	r0, r5
   d75a0:	f7ff fe98 	bl	d72d4 <rshift>
   d75a4:	443c      	add	r4, r7
   d75a6:	e00c      	b.n	d75c2 <__gethex+0x258>
   d75a8:	da09      	bge.n	d75be <__gethex+0x254>
   d75aa:	1a37      	subs	r7, r6, r0
   d75ac:	4629      	mov	r1, r5
   d75ae:	463a      	mov	r2, r7
   d75b0:	9802      	ldr	r0, [sp, #8]
   d75b2:	f000 fba7 	bl	d7d04 <__lshift>
   d75b6:	1be4      	subs	r4, r4, r7
   d75b8:	4605      	mov	r5, r0
   d75ba:	f100 0a14 	add.w	sl, r0, #20
   d75be:	f04f 0900 	mov.w	r9, #0
   d75c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d75c6:	429c      	cmp	r4, r3
   d75c8:	dd08      	ble.n	d75dc <__gethex+0x272>
   d75ca:	9802      	ldr	r0, [sp, #8]
   d75cc:	4629      	mov	r1, r5
   d75ce:	f000 f9d3 	bl	d7978 <_Bfree>
   d75d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d75d4:	2300      	movs	r3, #0
   d75d6:	6013      	str	r3, [r2, #0]
   d75d8:	20a3      	movs	r0, #163	; 0xa3
   d75da:	e0e2      	b.n	d77a2 <__gethex+0x438>
   d75dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d75e0:	4284      	cmp	r4, r0
   d75e2:	da53      	bge.n	d768c <__gethex+0x322>
   d75e4:	1b04      	subs	r4, r0, r4
   d75e6:	42a6      	cmp	r6, r4
   d75e8:	dc2e      	bgt.n	d7648 <__gethex+0x2de>
   d75ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d75ee:	2b02      	cmp	r3, #2
   d75f0:	d01a      	beq.n	d7628 <__gethex+0x2be>
   d75f2:	2b03      	cmp	r3, #3
   d75f4:	d01c      	beq.n	d7630 <__gethex+0x2c6>
   d75f6:	2b01      	cmp	r3, #1
   d75f8:	d11d      	bne.n	d7636 <__gethex+0x2cc>
   d75fa:	42a6      	cmp	r6, r4
   d75fc:	d11b      	bne.n	d7636 <__gethex+0x2cc>
   d75fe:	2e01      	cmp	r6, #1
   d7600:	dc0b      	bgt.n	d761a <__gethex+0x2b0>
   d7602:	9a06      	ldr	r2, [sp, #24]
   d7604:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d7608:	6013      	str	r3, [r2, #0]
   d760a:	2301      	movs	r3, #1
   d760c:	612b      	str	r3, [r5, #16]
   d760e:	f8ca 3000 	str.w	r3, [sl]
   d7612:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d7614:	2062      	movs	r0, #98	; 0x62
   d7616:	601d      	str	r5, [r3, #0]
   d7618:	e0c3      	b.n	d77a2 <__gethex+0x438>
   d761a:	1e71      	subs	r1, r6, #1
   d761c:	4628      	mov	r0, r5
   d761e:	f000 fd44 	bl	d80aa <__any_on>
   d7622:	2800      	cmp	r0, #0
   d7624:	d1ed      	bne.n	d7602 <__gethex+0x298>
   d7626:	e006      	b.n	d7636 <__gethex+0x2cc>
   d7628:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d762a:	2b00      	cmp	r3, #0
   d762c:	d0e9      	beq.n	d7602 <__gethex+0x298>
   d762e:	e002      	b.n	d7636 <__gethex+0x2cc>
   d7630:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7632:	2b00      	cmp	r3, #0
   d7634:	d1e5      	bne.n	d7602 <__gethex+0x298>
   d7636:	9802      	ldr	r0, [sp, #8]
   d7638:	4629      	mov	r1, r5
   d763a:	f000 f99d 	bl	d7978 <_Bfree>
   d763e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d7640:	2300      	movs	r3, #0
   d7642:	6013      	str	r3, [r2, #0]
   d7644:	2050      	movs	r0, #80	; 0x50
   d7646:	e0ac      	b.n	d77a2 <__gethex+0x438>
   d7648:	1e67      	subs	r7, r4, #1
   d764a:	f1b9 0f00 	cmp.w	r9, #0
   d764e:	d106      	bne.n	d765e <__gethex+0x2f4>
   d7650:	b13f      	cbz	r7, d7662 <__gethex+0x2f8>
   d7652:	4639      	mov	r1, r7
   d7654:	4628      	mov	r0, r5
   d7656:	f000 fd28 	bl	d80aa <__any_on>
   d765a:	4681      	mov	r9, r0
   d765c:	e001      	b.n	d7662 <__gethex+0x2f8>
   d765e:	f04f 0901 	mov.w	r9, #1
   d7662:	117a      	asrs	r2, r7, #5
   d7664:	2301      	movs	r3, #1
   d7666:	f007 071f 	and.w	r7, r7, #31
   d766a:	fa03 f707 	lsl.w	r7, r3, r7
   d766e:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d7672:	4621      	mov	r1, r4
   d7674:	421f      	tst	r7, r3
   d7676:	4628      	mov	r0, r5
   d7678:	bf18      	it	ne
   d767a:	f049 0902 	orrne.w	r9, r9, #2
   d767e:	1b36      	subs	r6, r6, r4
   d7680:	f7ff fe28 	bl	d72d4 <rshift>
   d7684:	2702      	movs	r7, #2
   d7686:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d768a:	e000      	b.n	d768e <__gethex+0x324>
   d768c:	2701      	movs	r7, #1
   d768e:	f1b9 0f00 	cmp.w	r9, #0
   d7692:	f000 8081 	beq.w	d7798 <__gethex+0x42e>
   d7696:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d769a:	2b02      	cmp	r3, #2
   d769c:	d00e      	beq.n	d76bc <__gethex+0x352>
   d769e:	2b03      	cmp	r3, #3
   d76a0:	d010      	beq.n	d76c4 <__gethex+0x35a>
   d76a2:	2b01      	cmp	r3, #1
   d76a4:	d176      	bne.n	d7794 <__gethex+0x42a>
   d76a6:	f019 0f02 	tst.w	r9, #2
   d76aa:	d073      	beq.n	d7794 <__gethex+0x42a>
   d76ac:	f8da 0000 	ldr.w	r0, [sl]
   d76b0:	ea49 0900 	orr.w	r9, r9, r0
   d76b4:	f019 0f01 	tst.w	r9, #1
   d76b8:	d107      	bne.n	d76ca <__gethex+0x360>
   d76ba:	e06b      	b.n	d7794 <__gethex+0x42a>
   d76bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d76be:	f1c3 0301 	rsb	r3, r3, #1
   d76c2:	9315      	str	r3, [sp, #84]	; 0x54
   d76c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d76c6:	2b00      	cmp	r3, #0
   d76c8:	d064      	beq.n	d7794 <__gethex+0x42a>
   d76ca:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d76ce:	f105 0314 	add.w	r3, r5, #20
   d76d2:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d76d6:	eb03 0109 	add.w	r1, r3, r9
   d76da:	2000      	movs	r0, #0
   d76dc:	681a      	ldr	r2, [r3, #0]
   d76de:	f1b2 3fff 	cmp.w	r2, #4294967295
   d76e2:	d002      	beq.n	d76ea <__gethex+0x380>
   d76e4:	3201      	adds	r2, #1
   d76e6:	601a      	str	r2, [r3, #0]
   d76e8:	e020      	b.n	d772c <__gethex+0x3c2>
   d76ea:	f843 0b04 	str.w	r0, [r3], #4
   d76ee:	4299      	cmp	r1, r3
   d76f0:	d8f4      	bhi.n	d76dc <__gethex+0x372>
   d76f2:	68ab      	ldr	r3, [r5, #8]
   d76f4:	459a      	cmp	sl, r3
   d76f6:	db12      	blt.n	d771e <__gethex+0x3b4>
   d76f8:	6869      	ldr	r1, [r5, #4]
   d76fa:	9802      	ldr	r0, [sp, #8]
   d76fc:	3101      	adds	r1, #1
   d76fe:	f000 f906 	bl	d790e <_Balloc>
   d7702:	692a      	ldr	r2, [r5, #16]
   d7704:	3202      	adds	r2, #2
   d7706:	f105 010c 	add.w	r1, r5, #12
   d770a:	4683      	mov	fp, r0
   d770c:	0092      	lsls	r2, r2, #2
   d770e:	300c      	adds	r0, #12
   d7710:	f7fe ff10 	bl	d6534 <memcpy>
   d7714:	4629      	mov	r1, r5
   d7716:	9802      	ldr	r0, [sp, #8]
   d7718:	f000 f92e 	bl	d7978 <_Bfree>
   d771c:	465d      	mov	r5, fp
   d771e:	692b      	ldr	r3, [r5, #16]
   d7720:	1c5a      	adds	r2, r3, #1
   d7722:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d7726:	612a      	str	r2, [r5, #16]
   d7728:	2201      	movs	r2, #1
   d772a:	615a      	str	r2, [r3, #20]
   d772c:	2f02      	cmp	r7, #2
   d772e:	f105 0214 	add.w	r2, r5, #20
   d7732:	d111      	bne.n	d7758 <__gethex+0x3ee>
   d7734:	f8d8 3000 	ldr.w	r3, [r8]
   d7738:	3b01      	subs	r3, #1
   d773a:	429e      	cmp	r6, r3
   d773c:	d127      	bne.n	d778e <__gethex+0x424>
   d773e:	1171      	asrs	r1, r6, #5
   d7740:	2301      	movs	r3, #1
   d7742:	f006 061f 	and.w	r6, r6, #31
   d7746:	fa03 f606 	lsl.w	r6, r3, r6
   d774a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d774e:	421e      	tst	r6, r3
   d7750:	bf0c      	ite	eq
   d7752:	2702      	moveq	r7, #2
   d7754:	2701      	movne	r7, #1
   d7756:	e01a      	b.n	d778e <__gethex+0x424>
   d7758:	692b      	ldr	r3, [r5, #16]
   d775a:	459a      	cmp	sl, r3
   d775c:	da0a      	bge.n	d7774 <__gethex+0x40a>
   d775e:	2101      	movs	r1, #1
   d7760:	4628      	mov	r0, r5
   d7762:	f7ff fdb7 	bl	d72d4 <rshift>
   d7766:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d776a:	3401      	adds	r4, #1
   d776c:	429c      	cmp	r4, r3
   d776e:	f73f af2c 	bgt.w	d75ca <__gethex+0x260>
   d7772:	e00b      	b.n	d778c <__gethex+0x422>
   d7774:	f016 061f 	ands.w	r6, r6, #31
   d7778:	d008      	beq.n	d778c <__gethex+0x422>
   d777a:	4491      	add	r9, r2
   d777c:	f1c6 0620 	rsb	r6, r6, #32
   d7780:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d7784:	f000 f988 	bl	d7a98 <__hi0bits>
   d7788:	42b0      	cmp	r0, r6
   d778a:	dbe8      	blt.n	d775e <__gethex+0x3f4>
   d778c:	2701      	movs	r7, #1
   d778e:	f047 0720 	orr.w	r7, r7, #32
   d7792:	e001      	b.n	d7798 <__gethex+0x42e>
   d7794:	f047 0710 	orr.w	r7, r7, #16
   d7798:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d779a:	601d      	str	r5, [r3, #0]
   d779c:	9b06      	ldr	r3, [sp, #24]
   d779e:	4638      	mov	r0, r7
   d77a0:	601c      	str	r4, [r3, #0]
   d77a2:	b00b      	add	sp, #44	; 0x2c
   d77a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d77a8 <L_shift>:
   d77a8:	f1c2 0208 	rsb	r2, r2, #8
   d77ac:	0092      	lsls	r2, r2, #2
   d77ae:	b570      	push	{r4, r5, r6, lr}
   d77b0:	f1c2 0620 	rsb	r6, r2, #32
   d77b4:	6843      	ldr	r3, [r0, #4]
   d77b6:	6805      	ldr	r5, [r0, #0]
   d77b8:	fa03 f406 	lsl.w	r4, r3, r6
   d77bc:	432c      	orrs	r4, r5
   d77be:	40d3      	lsrs	r3, r2
   d77c0:	6004      	str	r4, [r0, #0]
   d77c2:	f840 3f04 	str.w	r3, [r0, #4]!
   d77c6:	4288      	cmp	r0, r1
   d77c8:	d3f4      	bcc.n	d77b4 <L_shift+0xc>
   d77ca:	bd70      	pop	{r4, r5, r6, pc}

000d77cc <__match>:
   d77cc:	b530      	push	{r4, r5, lr}
   d77ce:	6803      	ldr	r3, [r0, #0]
   d77d0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d77d4:	3301      	adds	r3, #1
   d77d6:	b14c      	cbz	r4, d77ec <__match+0x20>
   d77d8:	781a      	ldrb	r2, [r3, #0]
   d77da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d77de:	2d19      	cmp	r5, #25
   d77e0:	bf98      	it	ls
   d77e2:	3220      	addls	r2, #32
   d77e4:	42a2      	cmp	r2, r4
   d77e6:	d0f3      	beq.n	d77d0 <__match+0x4>
   d77e8:	2000      	movs	r0, #0
   d77ea:	bd30      	pop	{r4, r5, pc}
   d77ec:	6003      	str	r3, [r0, #0]
   d77ee:	2001      	movs	r0, #1
   d77f0:	bd30      	pop	{r4, r5, pc}

000d77f2 <__hexnan>:
   d77f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d77f6:	680b      	ldr	r3, [r1, #0]
   d77f8:	f8d0 b000 	ldr.w	fp, [r0]
   d77fc:	115e      	asrs	r6, r3, #5
   d77fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d7802:	f013 031f 	ands.w	r3, r3, #31
   d7806:	b085      	sub	sp, #20
   d7808:	bf18      	it	ne
   d780a:	3604      	addne	r6, #4
   d780c:	1f35      	subs	r5, r6, #4
   d780e:	4617      	mov	r7, r2
   d7810:	2200      	movs	r2, #0
   d7812:	4682      	mov	sl, r0
   d7814:	9301      	str	r3, [sp, #4]
   d7816:	f846 2c04 	str.w	r2, [r6, #-4]
   d781a:	46a8      	mov	r8, r5
   d781c:	462c      	mov	r4, r5
   d781e:	9200      	str	r2, [sp, #0]
   d7820:	4691      	mov	r9, r2
   d7822:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d7826:	2900      	cmp	r1, #0
   d7828:	d03c      	beq.n	d78a4 <__hexnan+0xb2>
   d782a:	4608      	mov	r0, r1
   d782c:	9203      	str	r2, [sp, #12]
   d782e:	9102      	str	r1, [sp, #8]
   d7830:	f7ff fd86 	bl	d7340 <__hexdig_fun>
   d7834:	9a03      	ldr	r2, [sp, #12]
   d7836:	bb00      	cbnz	r0, d787a <__hexnan+0x88>
   d7838:	9902      	ldr	r1, [sp, #8]
   d783a:	2920      	cmp	r1, #32
   d783c:	d816      	bhi.n	d786c <__hexnan+0x7a>
   d783e:	9b00      	ldr	r3, [sp, #0]
   d7840:	4599      	cmp	r9, r3
   d7842:	ddee      	ble.n	d7822 <__hexnan+0x30>
   d7844:	4544      	cmp	r4, r8
   d7846:	d205      	bcs.n	d7854 <__hexnan+0x62>
   d7848:	2a07      	cmp	r2, #7
   d784a:	dc03      	bgt.n	d7854 <__hexnan+0x62>
   d784c:	4641      	mov	r1, r8
   d784e:	4620      	mov	r0, r4
   d7850:	f7ff ffaa 	bl	d77a8 <L_shift>
   d7854:	42bc      	cmp	r4, r7
   d7856:	d923      	bls.n	d78a0 <__hexnan+0xae>
   d7858:	2300      	movs	r3, #0
   d785a:	f1a4 0804 	sub.w	r8, r4, #4
   d785e:	f844 3c04 	str.w	r3, [r4, #-4]
   d7862:	f8cd 9000 	str.w	r9, [sp]
   d7866:	4644      	mov	r4, r8
   d7868:	461a      	mov	r2, r3
   d786a:	e7da      	b.n	d7822 <__hexnan+0x30>
   d786c:	2929      	cmp	r1, #41	; 0x29
   d786e:	d148      	bne.n	d7902 <__hexnan+0x110>
   d7870:	f10b 0301 	add.w	r3, fp, #1
   d7874:	f8ca 3000 	str.w	r3, [sl]
   d7878:	e014      	b.n	d78a4 <__hexnan+0xb2>
   d787a:	3201      	adds	r2, #1
   d787c:	2a08      	cmp	r2, #8
   d787e:	f109 0901 	add.w	r9, r9, #1
   d7882:	dd06      	ble.n	d7892 <__hexnan+0xa0>
   d7884:	42bc      	cmp	r4, r7
   d7886:	d9cc      	bls.n	d7822 <__hexnan+0x30>
   d7888:	2300      	movs	r3, #0
   d788a:	f844 3c04 	str.w	r3, [r4, #-4]
   d788e:	2201      	movs	r2, #1
   d7890:	3c04      	subs	r4, #4
   d7892:	6821      	ldr	r1, [r4, #0]
   d7894:	f000 000f 	and.w	r0, r0, #15
   d7898:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d789c:	6020      	str	r0, [r4, #0]
   d789e:	e7c0      	b.n	d7822 <__hexnan+0x30>
   d78a0:	2208      	movs	r2, #8
   d78a2:	e7be      	b.n	d7822 <__hexnan+0x30>
   d78a4:	f1b9 0f00 	cmp.w	r9, #0
   d78a8:	d02b      	beq.n	d7902 <__hexnan+0x110>
   d78aa:	4544      	cmp	r4, r8
   d78ac:	d205      	bcs.n	d78ba <__hexnan+0xc8>
   d78ae:	2a07      	cmp	r2, #7
   d78b0:	dc03      	bgt.n	d78ba <__hexnan+0xc8>
   d78b2:	4641      	mov	r1, r8
   d78b4:	4620      	mov	r0, r4
   d78b6:	f7ff ff77 	bl	d77a8 <L_shift>
   d78ba:	42bc      	cmp	r4, r7
   d78bc:	d90c      	bls.n	d78d8 <__hexnan+0xe6>
   d78be:	463b      	mov	r3, r7
   d78c0:	f854 2b04 	ldr.w	r2, [r4], #4
   d78c4:	f843 2b04 	str.w	r2, [r3], #4
   d78c8:	42a5      	cmp	r5, r4
   d78ca:	d2f9      	bcs.n	d78c0 <__hexnan+0xce>
   d78cc:	2200      	movs	r2, #0
   d78ce:	f843 2b04 	str.w	r2, [r3], #4
   d78d2:	429d      	cmp	r5, r3
   d78d4:	d2fb      	bcs.n	d78ce <__hexnan+0xdc>
   d78d6:	e00b      	b.n	d78f0 <__hexnan+0xfe>
   d78d8:	9b01      	ldr	r3, [sp, #4]
   d78da:	b14b      	cbz	r3, d78f0 <__hexnan+0xfe>
   d78dc:	f1c3 0220 	rsb	r2, r3, #32
   d78e0:	f04f 33ff 	mov.w	r3, #4294967295
   d78e4:	40d3      	lsrs	r3, r2
   d78e6:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d78ea:	4013      	ands	r3, r2
   d78ec:	f846 3c04 	str.w	r3, [r6, #-4]
   d78f0:	682b      	ldr	r3, [r5, #0]
   d78f2:	b943      	cbnz	r3, d7906 <__hexnan+0x114>
   d78f4:	42bd      	cmp	r5, r7
   d78f6:	d102      	bne.n	d78fe <__hexnan+0x10c>
   d78f8:	2301      	movs	r3, #1
   d78fa:	602b      	str	r3, [r5, #0]
   d78fc:	e003      	b.n	d7906 <__hexnan+0x114>
   d78fe:	3d04      	subs	r5, #4
   d7900:	e7f6      	b.n	d78f0 <__hexnan+0xfe>
   d7902:	2004      	movs	r0, #4
   d7904:	e000      	b.n	d7908 <__hexnan+0x116>
   d7906:	2005      	movs	r0, #5
   d7908:	b005      	add	sp, #20
   d790a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d790e <_Balloc>:
   d790e:	b570      	push	{r4, r5, r6, lr}
   d7910:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d7912:	4604      	mov	r4, r0
   d7914:	460e      	mov	r6, r1
   d7916:	b93d      	cbnz	r5, d7928 <_Balloc+0x1a>
   d7918:	2010      	movs	r0, #16
   d791a:	f7fc ff7b 	bl	d4814 <malloc>
   d791e:	6260      	str	r0, [r4, #36]	; 0x24
   d7920:	6045      	str	r5, [r0, #4]
   d7922:	6085      	str	r5, [r0, #8]
   d7924:	6005      	str	r5, [r0, #0]
   d7926:	60c5      	str	r5, [r0, #12]
   d7928:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d792a:	68eb      	ldr	r3, [r5, #12]
   d792c:	b143      	cbz	r3, d7940 <_Balloc+0x32>
   d792e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7930:	68db      	ldr	r3, [r3, #12]
   d7932:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d7936:	b178      	cbz	r0, d7958 <_Balloc+0x4a>
   d7938:	6802      	ldr	r2, [r0, #0]
   d793a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d793e:	e017      	b.n	d7970 <_Balloc+0x62>
   d7940:	2221      	movs	r2, #33	; 0x21
   d7942:	2104      	movs	r1, #4
   d7944:	4620      	mov	r0, r4
   d7946:	f000 fbd2 	bl	d80ee <_calloc_r>
   d794a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d794c:	60e8      	str	r0, [r5, #12]
   d794e:	68db      	ldr	r3, [r3, #12]
   d7950:	2b00      	cmp	r3, #0
   d7952:	d1ec      	bne.n	d792e <_Balloc+0x20>
   d7954:	2000      	movs	r0, #0
   d7956:	bd70      	pop	{r4, r5, r6, pc}
   d7958:	2101      	movs	r1, #1
   d795a:	fa01 f506 	lsl.w	r5, r1, r6
   d795e:	1d6a      	adds	r2, r5, #5
   d7960:	0092      	lsls	r2, r2, #2
   d7962:	4620      	mov	r0, r4
   d7964:	f000 fbc3 	bl	d80ee <_calloc_r>
   d7968:	2800      	cmp	r0, #0
   d796a:	d0f3      	beq.n	d7954 <_Balloc+0x46>
   d796c:	6046      	str	r6, [r0, #4]
   d796e:	6085      	str	r5, [r0, #8]
   d7970:	2300      	movs	r3, #0
   d7972:	6103      	str	r3, [r0, #16]
   d7974:	60c3      	str	r3, [r0, #12]
   d7976:	bd70      	pop	{r4, r5, r6, pc}

000d7978 <_Bfree>:
   d7978:	b570      	push	{r4, r5, r6, lr}
   d797a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d797c:	4606      	mov	r6, r0
   d797e:	460d      	mov	r5, r1
   d7980:	b93c      	cbnz	r4, d7992 <_Bfree+0x1a>
   d7982:	2010      	movs	r0, #16
   d7984:	f7fc ff46 	bl	d4814 <malloc>
   d7988:	6270      	str	r0, [r6, #36]	; 0x24
   d798a:	6044      	str	r4, [r0, #4]
   d798c:	6084      	str	r4, [r0, #8]
   d798e:	6004      	str	r4, [r0, #0]
   d7990:	60c4      	str	r4, [r0, #12]
   d7992:	b13d      	cbz	r5, d79a4 <_Bfree+0x2c>
   d7994:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d7996:	686a      	ldr	r2, [r5, #4]
   d7998:	68db      	ldr	r3, [r3, #12]
   d799a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d799e:	6029      	str	r1, [r5, #0]
   d79a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d79a4:	bd70      	pop	{r4, r5, r6, pc}

000d79a6 <__multadd>:
   d79a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d79aa:	690d      	ldr	r5, [r1, #16]
   d79ac:	461f      	mov	r7, r3
   d79ae:	4606      	mov	r6, r0
   d79b0:	460c      	mov	r4, r1
   d79b2:	f101 0e14 	add.w	lr, r1, #20
   d79b6:	2300      	movs	r3, #0
   d79b8:	f8de 0000 	ldr.w	r0, [lr]
   d79bc:	b281      	uxth	r1, r0
   d79be:	fb02 7101 	mla	r1, r2, r1, r7
   d79c2:	0c0f      	lsrs	r7, r1, #16
   d79c4:	0c00      	lsrs	r0, r0, #16
   d79c6:	fb02 7000 	mla	r0, r2, r0, r7
   d79ca:	b289      	uxth	r1, r1
   d79cc:	3301      	adds	r3, #1
   d79ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d79d2:	429d      	cmp	r5, r3
   d79d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d79d8:	f84e 1b04 	str.w	r1, [lr], #4
   d79dc:	dcec      	bgt.n	d79b8 <__multadd+0x12>
   d79de:	b1d7      	cbz	r7, d7a16 <__multadd+0x70>
   d79e0:	68a3      	ldr	r3, [r4, #8]
   d79e2:	429d      	cmp	r5, r3
   d79e4:	db12      	blt.n	d7a0c <__multadd+0x66>
   d79e6:	6861      	ldr	r1, [r4, #4]
   d79e8:	4630      	mov	r0, r6
   d79ea:	3101      	adds	r1, #1
   d79ec:	f7ff ff8f 	bl	d790e <_Balloc>
   d79f0:	6922      	ldr	r2, [r4, #16]
   d79f2:	3202      	adds	r2, #2
   d79f4:	f104 010c 	add.w	r1, r4, #12
   d79f8:	4680      	mov	r8, r0
   d79fa:	0092      	lsls	r2, r2, #2
   d79fc:	300c      	adds	r0, #12
   d79fe:	f7fe fd99 	bl	d6534 <memcpy>
   d7a02:	4621      	mov	r1, r4
   d7a04:	4630      	mov	r0, r6
   d7a06:	f7ff ffb7 	bl	d7978 <_Bfree>
   d7a0a:	4644      	mov	r4, r8
   d7a0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d7a10:	3501      	adds	r5, #1
   d7a12:	615f      	str	r7, [r3, #20]
   d7a14:	6125      	str	r5, [r4, #16]
   d7a16:	4620      	mov	r0, r4
   d7a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7a1c <__s2b>:
   d7a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7a20:	460c      	mov	r4, r1
   d7a22:	4615      	mov	r5, r2
   d7a24:	461f      	mov	r7, r3
   d7a26:	2209      	movs	r2, #9
   d7a28:	3308      	adds	r3, #8
   d7a2a:	4606      	mov	r6, r0
   d7a2c:	fb93 f3f2 	sdiv	r3, r3, r2
   d7a30:	2100      	movs	r1, #0
   d7a32:	2201      	movs	r2, #1
   d7a34:	429a      	cmp	r2, r3
   d7a36:	da02      	bge.n	d7a3e <__s2b+0x22>
   d7a38:	0052      	lsls	r2, r2, #1
   d7a3a:	3101      	adds	r1, #1
   d7a3c:	e7fa      	b.n	d7a34 <__s2b+0x18>
   d7a3e:	4630      	mov	r0, r6
   d7a40:	f7ff ff65 	bl	d790e <_Balloc>
   d7a44:	9b08      	ldr	r3, [sp, #32]
   d7a46:	6143      	str	r3, [r0, #20]
   d7a48:	2d09      	cmp	r5, #9
   d7a4a:	f04f 0301 	mov.w	r3, #1
   d7a4e:	6103      	str	r3, [r0, #16]
   d7a50:	dd11      	ble.n	d7a76 <__s2b+0x5a>
   d7a52:	f104 0809 	add.w	r8, r4, #9
   d7a56:	46c1      	mov	r9, r8
   d7a58:	442c      	add	r4, r5
   d7a5a:	f819 3b01 	ldrb.w	r3, [r9], #1
   d7a5e:	4601      	mov	r1, r0
   d7a60:	3b30      	subs	r3, #48	; 0x30
   d7a62:	220a      	movs	r2, #10
   d7a64:	4630      	mov	r0, r6
   d7a66:	f7ff ff9e 	bl	d79a6 <__multadd>
   d7a6a:	45a1      	cmp	r9, r4
   d7a6c:	d1f5      	bne.n	d7a5a <__s2b+0x3e>
   d7a6e:	eb08 0405 	add.w	r4, r8, r5
   d7a72:	3c08      	subs	r4, #8
   d7a74:	e001      	b.n	d7a7a <__s2b+0x5e>
   d7a76:	340a      	adds	r4, #10
   d7a78:	2509      	movs	r5, #9
   d7a7a:	1b2d      	subs	r5, r5, r4
   d7a7c:	1963      	adds	r3, r4, r5
   d7a7e:	429f      	cmp	r7, r3
   d7a80:	dd08      	ble.n	d7a94 <__s2b+0x78>
   d7a82:	f814 3b01 	ldrb.w	r3, [r4], #1
   d7a86:	4601      	mov	r1, r0
   d7a88:	3b30      	subs	r3, #48	; 0x30
   d7a8a:	220a      	movs	r2, #10
   d7a8c:	4630      	mov	r0, r6
   d7a8e:	f7ff ff8a 	bl	d79a6 <__multadd>
   d7a92:	e7f3      	b.n	d7a7c <__s2b+0x60>
   d7a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d7a98 <__hi0bits>:
   d7a98:	0c03      	lsrs	r3, r0, #16
   d7a9a:	041b      	lsls	r3, r3, #16
   d7a9c:	b913      	cbnz	r3, d7aa4 <__hi0bits+0xc>
   d7a9e:	0400      	lsls	r0, r0, #16
   d7aa0:	2310      	movs	r3, #16
   d7aa2:	e000      	b.n	d7aa6 <__hi0bits+0xe>
   d7aa4:	2300      	movs	r3, #0
   d7aa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d7aaa:	bf04      	itt	eq
   d7aac:	0200      	lsleq	r0, r0, #8
   d7aae:	3308      	addeq	r3, #8
   d7ab0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d7ab4:	bf04      	itt	eq
   d7ab6:	0100      	lsleq	r0, r0, #4
   d7ab8:	3304      	addeq	r3, #4
   d7aba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d7abe:	bf04      	itt	eq
   d7ac0:	0080      	lsleq	r0, r0, #2
   d7ac2:	3302      	addeq	r3, #2
   d7ac4:	2800      	cmp	r0, #0
   d7ac6:	db03      	blt.n	d7ad0 <__hi0bits+0x38>
   d7ac8:	0042      	lsls	r2, r0, #1
   d7aca:	d503      	bpl.n	d7ad4 <__hi0bits+0x3c>
   d7acc:	1c58      	adds	r0, r3, #1
   d7ace:	4770      	bx	lr
   d7ad0:	4618      	mov	r0, r3
   d7ad2:	4770      	bx	lr
   d7ad4:	2020      	movs	r0, #32
   d7ad6:	4770      	bx	lr

000d7ad8 <__lo0bits>:
   d7ad8:	6803      	ldr	r3, [r0, #0]
   d7ada:	f013 0207 	ands.w	r2, r3, #7
   d7ade:	d00b      	beq.n	d7af8 <__lo0bits+0x20>
   d7ae0:	07d9      	lsls	r1, r3, #31
   d7ae2:	d422      	bmi.n	d7b2a <__lo0bits+0x52>
   d7ae4:	079a      	lsls	r2, r3, #30
   d7ae6:	bf4b      	itete	mi
   d7ae8:	085b      	lsrmi	r3, r3, #1
   d7aea:	089b      	lsrpl	r3, r3, #2
   d7aec:	6003      	strmi	r3, [r0, #0]
   d7aee:	6003      	strpl	r3, [r0, #0]
   d7af0:	bf4c      	ite	mi
   d7af2:	2001      	movmi	r0, #1
   d7af4:	2002      	movpl	r0, #2
   d7af6:	4770      	bx	lr
   d7af8:	b299      	uxth	r1, r3
   d7afa:	b909      	cbnz	r1, d7b00 <__lo0bits+0x28>
   d7afc:	0c1b      	lsrs	r3, r3, #16
   d7afe:	2210      	movs	r2, #16
   d7b00:	f013 0fff 	tst.w	r3, #255	; 0xff
   d7b04:	bf04      	itt	eq
   d7b06:	0a1b      	lsreq	r3, r3, #8
   d7b08:	3208      	addeq	r2, #8
   d7b0a:	0719      	lsls	r1, r3, #28
   d7b0c:	bf04      	itt	eq
   d7b0e:	091b      	lsreq	r3, r3, #4
   d7b10:	3204      	addeq	r2, #4
   d7b12:	0799      	lsls	r1, r3, #30
   d7b14:	bf04      	itt	eq
   d7b16:	089b      	lsreq	r3, r3, #2
   d7b18:	3202      	addeq	r2, #2
   d7b1a:	07d9      	lsls	r1, r3, #31
   d7b1c:	d402      	bmi.n	d7b24 <__lo0bits+0x4c>
   d7b1e:	085b      	lsrs	r3, r3, #1
   d7b20:	d005      	beq.n	d7b2e <__lo0bits+0x56>
   d7b22:	3201      	adds	r2, #1
   d7b24:	6003      	str	r3, [r0, #0]
   d7b26:	4610      	mov	r0, r2
   d7b28:	4770      	bx	lr
   d7b2a:	2000      	movs	r0, #0
   d7b2c:	4770      	bx	lr
   d7b2e:	2020      	movs	r0, #32
   d7b30:	4770      	bx	lr

000d7b32 <__i2b>:
   d7b32:	b510      	push	{r4, lr}
   d7b34:	460c      	mov	r4, r1
   d7b36:	2101      	movs	r1, #1
   d7b38:	f7ff fee9 	bl	d790e <_Balloc>
   d7b3c:	2201      	movs	r2, #1
   d7b3e:	6144      	str	r4, [r0, #20]
   d7b40:	6102      	str	r2, [r0, #16]
   d7b42:	bd10      	pop	{r4, pc}

000d7b44 <__multiply>:
   d7b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b48:	4614      	mov	r4, r2
   d7b4a:	690a      	ldr	r2, [r1, #16]
   d7b4c:	6923      	ldr	r3, [r4, #16]
   d7b4e:	429a      	cmp	r2, r3
   d7b50:	bfb8      	it	lt
   d7b52:	460b      	movlt	r3, r1
   d7b54:	4688      	mov	r8, r1
   d7b56:	bfbc      	itt	lt
   d7b58:	46a0      	movlt	r8, r4
   d7b5a:	461c      	movlt	r4, r3
   d7b5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d7b60:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7b64:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d7b68:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d7b6c:	eb07 0609 	add.w	r6, r7, r9
   d7b70:	429e      	cmp	r6, r3
   d7b72:	bfc8      	it	gt
   d7b74:	3101      	addgt	r1, #1
   d7b76:	f7ff feca 	bl	d790e <_Balloc>
   d7b7a:	f100 0514 	add.w	r5, r0, #20
   d7b7e:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d7b82:	462b      	mov	r3, r5
   d7b84:	2200      	movs	r2, #0
   d7b86:	4563      	cmp	r3, ip
   d7b88:	d202      	bcs.n	d7b90 <__multiply+0x4c>
   d7b8a:	f843 2b04 	str.w	r2, [r3], #4
   d7b8e:	e7fa      	b.n	d7b86 <__multiply+0x42>
   d7b90:	f104 0214 	add.w	r2, r4, #20
   d7b94:	f108 0114 	add.w	r1, r8, #20
   d7b98:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d7b9c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d7ba0:	9300      	str	r3, [sp, #0]
   d7ba2:	9b00      	ldr	r3, [sp, #0]
   d7ba4:	9201      	str	r2, [sp, #4]
   d7ba6:	4293      	cmp	r3, r2
   d7ba8:	d957      	bls.n	d7c5a <__multiply+0x116>
   d7baa:	f8b2 b000 	ldrh.w	fp, [r2]
   d7bae:	f1bb 0f00 	cmp.w	fp, #0
   d7bb2:	d023      	beq.n	d7bfc <__multiply+0xb8>
   d7bb4:	4689      	mov	r9, r1
   d7bb6:	46ae      	mov	lr, r5
   d7bb8:	f04f 0800 	mov.w	r8, #0
   d7bbc:	f859 4b04 	ldr.w	r4, [r9], #4
   d7bc0:	f8be a000 	ldrh.w	sl, [lr]
   d7bc4:	b2a3      	uxth	r3, r4
   d7bc6:	fb0b a303 	mla	r3, fp, r3, sl
   d7bca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d7bce:	f8de 4000 	ldr.w	r4, [lr]
   d7bd2:	4443      	add	r3, r8
   d7bd4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d7bd8:	fb0b 840a 	mla	r4, fp, sl, r8
   d7bdc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d7be0:	46f2      	mov	sl, lr
   d7be2:	b29b      	uxth	r3, r3
   d7be4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d7be8:	454f      	cmp	r7, r9
   d7bea:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d7bee:	f84a 3b04 	str.w	r3, [sl], #4
   d7bf2:	d901      	bls.n	d7bf8 <__multiply+0xb4>
   d7bf4:	46d6      	mov	lr, sl
   d7bf6:	e7e1      	b.n	d7bbc <__multiply+0x78>
   d7bf8:	f8ce 8004 	str.w	r8, [lr, #4]
   d7bfc:	9b01      	ldr	r3, [sp, #4]
   d7bfe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d7c02:	3204      	adds	r2, #4
   d7c04:	f1ba 0f00 	cmp.w	sl, #0
   d7c08:	d021      	beq.n	d7c4e <__multiply+0x10a>
   d7c0a:	682b      	ldr	r3, [r5, #0]
   d7c0c:	462c      	mov	r4, r5
   d7c0e:	4689      	mov	r9, r1
   d7c10:	f04f 0800 	mov.w	r8, #0
   d7c14:	f8b9 e000 	ldrh.w	lr, [r9]
   d7c18:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d7c1c:	fb0a be0e 	mla	lr, sl, lr, fp
   d7c20:	44f0      	add	r8, lr
   d7c22:	46a3      	mov	fp, r4
   d7c24:	b29b      	uxth	r3, r3
   d7c26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d7c2a:	f84b 3b04 	str.w	r3, [fp], #4
   d7c2e:	f859 3b04 	ldr.w	r3, [r9], #4
   d7c32:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d7c36:	0c1b      	lsrs	r3, r3, #16
   d7c38:	fb0a e303 	mla	r3, sl, r3, lr
   d7c3c:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d7c40:	454f      	cmp	r7, r9
   d7c42:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d7c46:	d901      	bls.n	d7c4c <__multiply+0x108>
   d7c48:	465c      	mov	r4, fp
   d7c4a:	e7e3      	b.n	d7c14 <__multiply+0xd0>
   d7c4c:	6063      	str	r3, [r4, #4]
   d7c4e:	3504      	adds	r5, #4
   d7c50:	e7a7      	b.n	d7ba2 <__multiply+0x5e>
   d7c52:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d7c56:	b913      	cbnz	r3, d7c5e <__multiply+0x11a>
   d7c58:	3e01      	subs	r6, #1
   d7c5a:	2e00      	cmp	r6, #0
   d7c5c:	dcf9      	bgt.n	d7c52 <__multiply+0x10e>
   d7c5e:	6106      	str	r6, [r0, #16]
   d7c60:	b003      	add	sp, #12
   d7c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d7c68 <__pow5mult>:
   d7c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7c6c:	4615      	mov	r5, r2
   d7c6e:	f012 0203 	ands.w	r2, r2, #3
   d7c72:	4606      	mov	r6, r0
   d7c74:	460f      	mov	r7, r1
   d7c76:	d007      	beq.n	d7c88 <__pow5mult+0x20>
   d7c78:	3a01      	subs	r2, #1
   d7c7a:	4c21      	ldr	r4, [pc, #132]	; (d7d00 <__pow5mult+0x98>)
   d7c7c:	2300      	movs	r3, #0
   d7c7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d7c82:	f7ff fe90 	bl	d79a6 <__multadd>
   d7c86:	4607      	mov	r7, r0
   d7c88:	10ad      	asrs	r5, r5, #2
   d7c8a:	d036      	beq.n	d7cfa <__pow5mult+0x92>
   d7c8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d7c8e:	b93c      	cbnz	r4, d7ca0 <__pow5mult+0x38>
   d7c90:	2010      	movs	r0, #16
   d7c92:	f7fc fdbf 	bl	d4814 <malloc>
   d7c96:	6270      	str	r0, [r6, #36]	; 0x24
   d7c98:	6044      	str	r4, [r0, #4]
   d7c9a:	6084      	str	r4, [r0, #8]
   d7c9c:	6004      	str	r4, [r0, #0]
   d7c9e:	60c4      	str	r4, [r0, #12]
   d7ca0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d7ca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d7ca8:	b94c      	cbnz	r4, d7cbe <__pow5mult+0x56>
   d7caa:	f240 2171 	movw	r1, #625	; 0x271
   d7cae:	4630      	mov	r0, r6
   d7cb0:	f7ff ff3f 	bl	d7b32 <__i2b>
   d7cb4:	2300      	movs	r3, #0
   d7cb6:	f8c8 0008 	str.w	r0, [r8, #8]
   d7cba:	4604      	mov	r4, r0
   d7cbc:	6003      	str	r3, [r0, #0]
   d7cbe:	f04f 0800 	mov.w	r8, #0
   d7cc2:	07eb      	lsls	r3, r5, #31
   d7cc4:	d50a      	bpl.n	d7cdc <__pow5mult+0x74>
   d7cc6:	4639      	mov	r1, r7
   d7cc8:	4622      	mov	r2, r4
   d7cca:	4630      	mov	r0, r6
   d7ccc:	f7ff ff3a 	bl	d7b44 <__multiply>
   d7cd0:	4639      	mov	r1, r7
   d7cd2:	4681      	mov	r9, r0
   d7cd4:	4630      	mov	r0, r6
   d7cd6:	f7ff fe4f 	bl	d7978 <_Bfree>
   d7cda:	464f      	mov	r7, r9
   d7cdc:	106d      	asrs	r5, r5, #1
   d7cde:	d00c      	beq.n	d7cfa <__pow5mult+0x92>
   d7ce0:	6820      	ldr	r0, [r4, #0]
   d7ce2:	b108      	cbz	r0, d7ce8 <__pow5mult+0x80>
   d7ce4:	4604      	mov	r4, r0
   d7ce6:	e7ec      	b.n	d7cc2 <__pow5mult+0x5a>
   d7ce8:	4622      	mov	r2, r4
   d7cea:	4621      	mov	r1, r4
   d7cec:	4630      	mov	r0, r6
   d7cee:	f7ff ff29 	bl	d7b44 <__multiply>
   d7cf2:	6020      	str	r0, [r4, #0]
   d7cf4:	f8c0 8000 	str.w	r8, [r0]
   d7cf8:	e7f4      	b.n	d7ce4 <__pow5mult+0x7c>
   d7cfa:	4638      	mov	r0, r7
   d7cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d7d00:	000d85e8 	.word	0x000d85e8

000d7d04 <__lshift>:
   d7d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7d08:	460c      	mov	r4, r1
   d7d0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d7d0e:	6926      	ldr	r6, [r4, #16]
   d7d10:	6849      	ldr	r1, [r1, #4]
   d7d12:	68a3      	ldr	r3, [r4, #8]
   d7d14:	4456      	add	r6, sl
   d7d16:	4607      	mov	r7, r0
   d7d18:	4691      	mov	r9, r2
   d7d1a:	1c75      	adds	r5, r6, #1
   d7d1c:	42ab      	cmp	r3, r5
   d7d1e:	da02      	bge.n	d7d26 <__lshift+0x22>
   d7d20:	3101      	adds	r1, #1
   d7d22:	005b      	lsls	r3, r3, #1
   d7d24:	e7fa      	b.n	d7d1c <__lshift+0x18>
   d7d26:	4638      	mov	r0, r7
   d7d28:	f7ff fdf1 	bl	d790e <_Balloc>
   d7d2c:	2300      	movs	r3, #0
   d7d2e:	4680      	mov	r8, r0
   d7d30:	f100 0114 	add.w	r1, r0, #20
   d7d34:	461a      	mov	r2, r3
   d7d36:	4553      	cmp	r3, sl
   d7d38:	da03      	bge.n	d7d42 <__lshift+0x3e>
   d7d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d7d3e:	3301      	adds	r3, #1
   d7d40:	e7f9      	b.n	d7d36 <__lshift+0x32>
   d7d42:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d7d46:	6920      	ldr	r0, [r4, #16]
   d7d48:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d7d4c:	f019 091f 	ands.w	r9, r9, #31
   d7d50:	f104 0114 	add.w	r1, r4, #20
   d7d54:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d7d58:	d014      	beq.n	d7d84 <__lshift+0x80>
   d7d5a:	f1c9 0c20 	rsb	ip, r9, #32
   d7d5e:	2200      	movs	r2, #0
   d7d60:	6808      	ldr	r0, [r1, #0]
   d7d62:	fa00 f009 	lsl.w	r0, r0, r9
   d7d66:	4302      	orrs	r2, r0
   d7d68:	469a      	mov	sl, r3
   d7d6a:	f843 2b04 	str.w	r2, [r3], #4
   d7d6e:	f851 2b04 	ldr.w	r2, [r1], #4
   d7d72:	458e      	cmp	lr, r1
   d7d74:	fa22 f20c 	lsr.w	r2, r2, ip
   d7d78:	d8f2      	bhi.n	d7d60 <__lshift+0x5c>
   d7d7a:	f8ca 2004 	str.w	r2, [sl, #4]
   d7d7e:	b142      	cbz	r2, d7d92 <__lshift+0x8e>
   d7d80:	1cb5      	adds	r5, r6, #2
   d7d82:	e006      	b.n	d7d92 <__lshift+0x8e>
   d7d84:	3b04      	subs	r3, #4
   d7d86:	f851 2b04 	ldr.w	r2, [r1], #4
   d7d8a:	f843 2f04 	str.w	r2, [r3, #4]!
   d7d8e:	458e      	cmp	lr, r1
   d7d90:	d8f9      	bhi.n	d7d86 <__lshift+0x82>
   d7d92:	3d01      	subs	r5, #1
   d7d94:	4638      	mov	r0, r7
   d7d96:	f8c8 5010 	str.w	r5, [r8, #16]
   d7d9a:	4621      	mov	r1, r4
   d7d9c:	f7ff fdec 	bl	d7978 <_Bfree>
   d7da0:	4640      	mov	r0, r8
   d7da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d7da6 <__mcmp>:
   d7da6:	6903      	ldr	r3, [r0, #16]
   d7da8:	690a      	ldr	r2, [r1, #16]
   d7daa:	1a9b      	subs	r3, r3, r2
   d7dac:	b510      	push	{r4, lr}
   d7dae:	d111      	bne.n	d7dd4 <__mcmp+0x2e>
   d7db0:	0092      	lsls	r2, r2, #2
   d7db2:	3014      	adds	r0, #20
   d7db4:	3114      	adds	r1, #20
   d7db6:	1883      	adds	r3, r0, r2
   d7db8:	440a      	add	r2, r1
   d7dba:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d7dbe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d7dc2:	428c      	cmp	r4, r1
   d7dc4:	d002      	beq.n	d7dcc <__mcmp+0x26>
   d7dc6:	d307      	bcc.n	d7dd8 <__mcmp+0x32>
   d7dc8:	2001      	movs	r0, #1
   d7dca:	bd10      	pop	{r4, pc}
   d7dcc:	4298      	cmp	r0, r3
   d7dce:	d3f4      	bcc.n	d7dba <__mcmp+0x14>
   d7dd0:	2000      	movs	r0, #0
   d7dd2:	bd10      	pop	{r4, pc}
   d7dd4:	4618      	mov	r0, r3
   d7dd6:	bd10      	pop	{r4, pc}
   d7dd8:	f04f 30ff 	mov.w	r0, #4294967295
   d7ddc:	bd10      	pop	{r4, pc}

000d7dde <__mdiff>:
   d7dde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7de2:	460c      	mov	r4, r1
   d7de4:	4607      	mov	r7, r0
   d7de6:	4611      	mov	r1, r2
   d7de8:	4620      	mov	r0, r4
   d7dea:	4615      	mov	r5, r2
   d7dec:	f7ff ffdb 	bl	d7da6 <__mcmp>
   d7df0:	1e06      	subs	r6, r0, #0
   d7df2:	d108      	bne.n	d7e06 <__mdiff+0x28>
   d7df4:	4631      	mov	r1, r6
   d7df6:	4638      	mov	r0, r7
   d7df8:	f7ff fd89 	bl	d790e <_Balloc>
   d7dfc:	2301      	movs	r3, #1
   d7dfe:	6103      	str	r3, [r0, #16]
   d7e00:	6146      	str	r6, [r0, #20]
   d7e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d7e06:	bfbc      	itt	lt
   d7e08:	4623      	movlt	r3, r4
   d7e0a:	462c      	movlt	r4, r5
   d7e0c:	4638      	mov	r0, r7
   d7e0e:	6861      	ldr	r1, [r4, #4]
   d7e10:	bfba      	itte	lt
   d7e12:	461d      	movlt	r5, r3
   d7e14:	2601      	movlt	r6, #1
   d7e16:	2600      	movge	r6, #0
   d7e18:	f7ff fd79 	bl	d790e <_Balloc>
   d7e1c:	692b      	ldr	r3, [r5, #16]
   d7e1e:	60c6      	str	r6, [r0, #12]
   d7e20:	6926      	ldr	r6, [r4, #16]
   d7e22:	f105 0914 	add.w	r9, r5, #20
   d7e26:	3414      	adds	r4, #20
   d7e28:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d7e2c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d7e30:	f100 0514 	add.w	r5, r0, #20
   d7e34:	f04f 0c00 	mov.w	ip, #0
   d7e38:	f854 3b04 	ldr.w	r3, [r4], #4
   d7e3c:	f859 2b04 	ldr.w	r2, [r9], #4
   d7e40:	fa1c f183 	uxtah	r1, ip, r3
   d7e44:	fa1f fe82 	uxth.w	lr, r2
   d7e48:	0c12      	lsrs	r2, r2, #16
   d7e4a:	ebce 0101 	rsb	r1, lr, r1
   d7e4e:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d7e52:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d7e56:	b289      	uxth	r1, r1
   d7e58:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d7e5c:	45c8      	cmp	r8, r9
   d7e5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d7e62:	46a6      	mov	lr, r4
   d7e64:	f845 3b04 	str.w	r3, [r5], #4
   d7e68:	d8e6      	bhi.n	d7e38 <__mdiff+0x5a>
   d7e6a:	45be      	cmp	lr, r7
   d7e6c:	d20e      	bcs.n	d7e8c <__mdiff+0xae>
   d7e6e:	f85e 1b04 	ldr.w	r1, [lr], #4
   d7e72:	fa1c f281 	uxtah	r2, ip, r1
   d7e76:	1413      	asrs	r3, r2, #16
   d7e78:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d7e7c:	b292      	uxth	r2, r2
   d7e7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d7e82:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d7e86:	f845 2b04 	str.w	r2, [r5], #4
   d7e8a:	e7ee      	b.n	d7e6a <__mdiff+0x8c>
   d7e8c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d7e90:	b90b      	cbnz	r3, d7e96 <__mdiff+0xb8>
   d7e92:	3e01      	subs	r6, #1
   d7e94:	e7fa      	b.n	d7e8c <__mdiff+0xae>
   d7e96:	6106      	str	r6, [r0, #16]
   d7e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d7e9c <__ulp>:
   d7e9c:	4b12      	ldr	r3, [pc, #72]	; (d7ee8 <__ulp+0x4c>)
   d7e9e:	ee10 2a90 	vmov	r2, s1
   d7ea2:	401a      	ands	r2, r3
   d7ea4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d7ea8:	2b00      	cmp	r3, #0
   d7eaa:	dd02      	ble.n	d7eb2 <__ulp+0x16>
   d7eac:	2000      	movs	r0, #0
   d7eae:	4619      	mov	r1, r3
   d7eb0:	e017      	b.n	d7ee2 <__ulp+0x46>
   d7eb2:	425b      	negs	r3, r3
   d7eb4:	151b      	asrs	r3, r3, #20
   d7eb6:	2b13      	cmp	r3, #19
   d7eb8:	f04f 0000 	mov.w	r0, #0
   d7ebc:	f04f 0100 	mov.w	r1, #0
   d7ec0:	dc04      	bgt.n	d7ecc <__ulp+0x30>
   d7ec2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d7ec6:	fa42 f103 	asr.w	r1, r2, r3
   d7eca:	e00a      	b.n	d7ee2 <__ulp+0x46>
   d7ecc:	3b14      	subs	r3, #20
   d7ece:	2b1e      	cmp	r3, #30
   d7ed0:	f04f 0201 	mov.w	r2, #1
   d7ed4:	bfda      	itte	le
   d7ed6:	f1c3 031f 	rsble	r3, r3, #31
   d7eda:	fa02 f303 	lslle.w	r3, r2, r3
   d7ede:	4613      	movgt	r3, r2
   d7ee0:	4618      	mov	r0, r3
   d7ee2:	ec41 0b10 	vmov	d0, r0, r1
   d7ee6:	4770      	bx	lr
   d7ee8:	7ff00000 	.word	0x7ff00000

000d7eec <__b2d>:
   d7eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7eee:	6905      	ldr	r5, [r0, #16]
   d7ef0:	f100 0614 	add.w	r6, r0, #20
   d7ef4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d7ef8:	1f2f      	subs	r7, r5, #4
   d7efa:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d7efe:	4620      	mov	r0, r4
   d7f00:	f7ff fdca 	bl	d7a98 <__hi0bits>
   d7f04:	f1c0 0320 	rsb	r3, r0, #32
   d7f08:	280a      	cmp	r0, #10
   d7f0a:	600b      	str	r3, [r1, #0]
   d7f0c:	dc14      	bgt.n	d7f38 <__b2d+0x4c>
   d7f0e:	f1c0 0e0b 	rsb	lr, r0, #11
   d7f12:	fa24 f10e 	lsr.w	r1, r4, lr
   d7f16:	42be      	cmp	r6, r7
   d7f18:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d7f1c:	bf34      	ite	cc
   d7f1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d7f22:	2100      	movcs	r1, #0
   d7f24:	3015      	adds	r0, #21
   d7f26:	fa04 f000 	lsl.w	r0, r4, r0
   d7f2a:	fa21 f10e 	lsr.w	r1, r1, lr
   d7f2e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d7f32:	ea40 0201 	orr.w	r2, r0, r1
   d7f36:	e023      	b.n	d7f80 <__b2d+0x94>
   d7f38:	42be      	cmp	r6, r7
   d7f3a:	bf3a      	itte	cc
   d7f3c:	f1a5 0708 	subcc.w	r7, r5, #8
   d7f40:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d7f44:	2100      	movcs	r1, #0
   d7f46:	380b      	subs	r0, #11
   d7f48:	d015      	beq.n	d7f76 <__b2d+0x8a>
   d7f4a:	4084      	lsls	r4, r0
   d7f4c:	f1c0 0520 	rsb	r5, r0, #32
   d7f50:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d7f54:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d7f58:	42b7      	cmp	r7, r6
   d7f5a:	fa21 fe05 	lsr.w	lr, r1, r5
   d7f5e:	ea44 030e 	orr.w	r3, r4, lr
   d7f62:	bf8c      	ite	hi
   d7f64:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d7f68:	2400      	movls	r4, #0
   d7f6a:	fa01 f000 	lsl.w	r0, r1, r0
   d7f6e:	40ec      	lsrs	r4, r5
   d7f70:	ea40 0204 	orr.w	r2, r0, r4
   d7f74:	e004      	b.n	d7f80 <__b2d+0x94>
   d7f76:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d7f7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d7f7e:	460a      	mov	r2, r1
   d7f80:	ec43 2b10 	vmov	d0, r2, r3
   d7f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f86 <__d2b>:
   d7f86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7f8a:	460e      	mov	r6, r1
   d7f8c:	2101      	movs	r1, #1
   d7f8e:	ec59 8b10 	vmov	r8, r9, d0
   d7f92:	4615      	mov	r5, r2
   d7f94:	f7ff fcbb 	bl	d790e <_Balloc>
   d7f98:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d7f9c:	4607      	mov	r7, r0
   d7f9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d7fa2:	b10c      	cbz	r4, d7fa8 <__d2b+0x22>
   d7fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7fa8:	9301      	str	r3, [sp, #4]
   d7faa:	f1b8 0f00 	cmp.w	r8, #0
   d7fae:	d019      	beq.n	d7fe4 <__d2b+0x5e>
   d7fb0:	a802      	add	r0, sp, #8
   d7fb2:	f840 8d08 	str.w	r8, [r0, #-8]!
   d7fb6:	f7ff fd8f 	bl	d7ad8 <__lo0bits>
   d7fba:	9b00      	ldr	r3, [sp, #0]
   d7fbc:	b148      	cbz	r0, d7fd2 <__d2b+0x4c>
   d7fbe:	9a01      	ldr	r2, [sp, #4]
   d7fc0:	f1c0 0120 	rsb	r1, r0, #32
   d7fc4:	fa02 f101 	lsl.w	r1, r2, r1
   d7fc8:	430b      	orrs	r3, r1
   d7fca:	40c2      	lsrs	r2, r0
   d7fcc:	617b      	str	r3, [r7, #20]
   d7fce:	9201      	str	r2, [sp, #4]
   d7fd0:	e000      	b.n	d7fd4 <__d2b+0x4e>
   d7fd2:	617b      	str	r3, [r7, #20]
   d7fd4:	9b01      	ldr	r3, [sp, #4]
   d7fd6:	61bb      	str	r3, [r7, #24]
   d7fd8:	2b00      	cmp	r3, #0
   d7fda:	bf14      	ite	ne
   d7fdc:	2102      	movne	r1, #2
   d7fde:	2101      	moveq	r1, #1
   d7fe0:	6139      	str	r1, [r7, #16]
   d7fe2:	e007      	b.n	d7ff4 <__d2b+0x6e>
   d7fe4:	a801      	add	r0, sp, #4
   d7fe6:	f7ff fd77 	bl	d7ad8 <__lo0bits>
   d7fea:	9b01      	ldr	r3, [sp, #4]
   d7fec:	617b      	str	r3, [r7, #20]
   d7fee:	2101      	movs	r1, #1
   d7ff0:	6139      	str	r1, [r7, #16]
   d7ff2:	3020      	adds	r0, #32
   d7ff4:	b134      	cbz	r4, d8004 <__d2b+0x7e>
   d7ff6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d7ffa:	4404      	add	r4, r0
   d7ffc:	6034      	str	r4, [r6, #0]
   d7ffe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d8002:	e009      	b.n	d8018 <__d2b+0x92>
   d8004:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d8008:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d800c:	6030      	str	r0, [r6, #0]
   d800e:	6918      	ldr	r0, [r3, #16]
   d8010:	f7ff fd42 	bl	d7a98 <__hi0bits>
   d8014:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   d8018:	6028      	str	r0, [r5, #0]
   d801a:	4638      	mov	r0, r7
   d801c:	b003      	add	sp, #12
   d801e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8022 <__ratio>:
   d8022:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8026:	4688      	mov	r8, r1
   d8028:	4669      	mov	r1, sp
   d802a:	4681      	mov	r9, r0
   d802c:	f7ff ff5e 	bl	d7eec <__b2d>
   d8030:	a901      	add	r1, sp, #4
   d8032:	4640      	mov	r0, r8
   d8034:	ec55 4b10 	vmov	r4, r5, d0
   d8038:	f7ff ff58 	bl	d7eec <__b2d>
   d803c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d8040:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d8044:	1a9a      	subs	r2, r3, r2
   d8046:	e89d 000a 	ldmia.w	sp, {r1, r3}
   d804a:	1ac9      	subs	r1, r1, r3
   d804c:	ec57 6b10 	vmov	r6, r7, d0
   d8050:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   d8054:	2b00      	cmp	r3, #0
   d8056:	bfcc      	ite	gt
   d8058:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   d805c:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   d8060:	4632      	mov	r2, r6
   d8062:	463b      	mov	r3, r7
   d8064:	4620      	mov	r0, r4
   d8066:	4629      	mov	r1, r5
   d8068:	f7fe f846 	bl	d60f8 <__aeabi_ddiv>
   d806c:	ec41 0b10 	vmov	d0, r0, r1
   d8070:	b003      	add	sp, #12
   d8072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8076 <__copybits>:
   d8076:	3901      	subs	r1, #1
   d8078:	b510      	push	{r4, lr}
   d807a:	1149      	asrs	r1, r1, #5
   d807c:	6914      	ldr	r4, [r2, #16]
   d807e:	3101      	adds	r1, #1
   d8080:	f102 0314 	add.w	r3, r2, #20
   d8084:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d8088:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d808c:	42a3      	cmp	r3, r4
   d808e:	4602      	mov	r2, r0
   d8090:	d204      	bcs.n	d809c <__copybits+0x26>
   d8092:	f853 2b04 	ldr.w	r2, [r3], #4
   d8096:	f840 2b04 	str.w	r2, [r0], #4
   d809a:	e7f7      	b.n	d808c <__copybits+0x16>
   d809c:	2300      	movs	r3, #0
   d809e:	428a      	cmp	r2, r1
   d80a0:	d202      	bcs.n	d80a8 <__copybits+0x32>
   d80a2:	f842 3b04 	str.w	r3, [r2], #4
   d80a6:	e7fa      	b.n	d809e <__copybits+0x28>
   d80a8:	bd10      	pop	{r4, pc}

000d80aa <__any_on>:
   d80aa:	f100 0214 	add.w	r2, r0, #20
   d80ae:	6900      	ldr	r0, [r0, #16]
   d80b0:	114b      	asrs	r3, r1, #5
   d80b2:	4298      	cmp	r0, r3
   d80b4:	b510      	push	{r4, lr}
   d80b6:	db0c      	blt.n	d80d2 <__any_on+0x28>
   d80b8:	dd0c      	ble.n	d80d4 <__any_on+0x2a>
   d80ba:	f011 011f 	ands.w	r1, r1, #31
   d80be:	d009      	beq.n	d80d4 <__any_on+0x2a>
   d80c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d80c4:	fa24 f001 	lsr.w	r0, r4, r1
   d80c8:	fa00 f101 	lsl.w	r1, r0, r1
   d80cc:	428c      	cmp	r4, r1
   d80ce:	d10c      	bne.n	d80ea <__any_on+0x40>
   d80d0:	e000      	b.n	d80d4 <__any_on+0x2a>
   d80d2:	4603      	mov	r3, r0
   d80d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d80d8:	4293      	cmp	r3, r2
   d80da:	d904      	bls.n	d80e6 <__any_on+0x3c>
   d80dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d80e0:	2900      	cmp	r1, #0
   d80e2:	d0f9      	beq.n	d80d8 <__any_on+0x2e>
   d80e4:	e001      	b.n	d80ea <__any_on+0x40>
   d80e6:	2000      	movs	r0, #0
   d80e8:	bd10      	pop	{r4, pc}
   d80ea:	2001      	movs	r0, #1
   d80ec:	bd10      	pop	{r4, pc}

000d80ee <_calloc_r>:
   d80ee:	b538      	push	{r3, r4, r5, lr}
   d80f0:	fb02 f401 	mul.w	r4, r2, r1
   d80f4:	4621      	mov	r1, r4
   d80f6:	f7fc fbbd 	bl	d4874 <_malloc_r>
   d80fa:	4605      	mov	r5, r0
   d80fc:	b118      	cbz	r0, d8106 <_calloc_r+0x18>
   d80fe:	4622      	mov	r2, r4
   d8100:	2100      	movs	r1, #0
   d8102:	f7fe fa22 	bl	d654a <memset>
   d8106:	4628      	mov	r0, r5
   d8108:	bd38      	pop	{r3, r4, r5, pc}

000d810a <link_code_end>:
	...

000d810c <dynalib_user>:
   d810c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d811c:	0000 0000                                   ....

000d8120 <_ZTV23GoogleMapsDeviceLocator>:
	...
   d8128:	4135 000d 414d 000d 002c 7325 227b 226d     5A..MA..,.%s{"m"
   d8138:	223a 3025 7832 253a 3230 3a78 3025 7832     :"%02x:%02x:%02x
   d8148:	253a 3230 3a78 3025 7832 253a 3230 2278     :%02x:%02x:%02x"
   d8158:	222c 2273 253a 2c64 6322 3a22 6425 007d     ,"s":%d,"c":%d}.
   d8168:	6564 6976 6563 6f4c 6163 6f74 0072 227b     deviceLocator.{"
   d8178:	2277 7b3a 6122 3a22 7000 6275 696c 6873     w":{"a":.publish
   d8188:	6f4c 6163 6974 6e6f 7300 6163 446e 7461     Location.scanDat
   d8198:	3d61 7325 6800 6f6f 2d6b 6572 7073 6e6f     a=%s.hook-respon
   d81a8:	6573 252f 2f73 7325 0000 0000               se/%s/%s....

000d81b4 <_ZTVN5spark12NetworkClassE>:
	...
   d81bc:	4885 000d 488f 000d 4899 000d 48a3 000d     .H...H...H...H..
   d81cc:	48ad 000d 48b9 000d 48c5 000d 48d1 000d     .H...H...H...H..
   d81dc:	48d9 000d 48e3 000d 48ed 000d               .H...H...H..

000d81e8 <_ZTVN5spark9WiFiClassE>:
	...
   d81f0:	4a2b 000d 4a21 000d 4a17 000d 49cd 000d     +J..!J...J...I..
   d8200:	4a0b 000d 49ff 000d 49f3 000d 49eb 000d     .J...I...I...I..
   d8210:	49e1 000d 49d7 000d 48ed 000d               .I...I...H..

000d821c <_ZTVN5spark9MeshClassE>:
	...
   d8224:	4aa7 000d 4a9d 000d 4a93 000d 4a89 000d     .J...J...J...J..
   d8234:	4a7d 000d 4a71 000d 4a65 000d 4a5d 000d     }J..qJ..eJ..]J..
   d8244:	4a53 000d 4a49 000d 48ed 000d               SJ..IJ...H..

000d8250 <_ZTV8SPIClass>:
	...
   d8258:	4ba9 000d 4bab 000d                         .K...K..

000d8260 <_ZTV11USARTSerial>:
	...
   d8268:	4c09 000d 4c59 000d 4c67 000d 55a5 000d     .L..YL..gL...U..
   d8278:	4c1d 000d 4c3f 000d 4c2b 000d 4c53 000d     .L..?L..+L..SL..
   d8288:	4c0b 000d 4c0f 000d                         .L...L..

000d8290 <_ZTV9USBSerial>:
	...
   d8298:	4d43 000d 4d93 000d 4da1 000d 55a5 000d     CM...M...M...U..
   d82a8:	4d7f 000d 4d45 000d 4d5b 000d 4d8d 000d     .M..EM..[M...M..
   d82b8:	4d71 000d 4d3f 000d                         qM..?M..

000d82c0 <_ZTV9IPAddress>:
	...
   d82c8:	4e61 000d 4e51 000d 4e53 000d               aN..QN..SN..

000d82d4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d82dc:	4f35 000d 4f3b 000d 4f53 000d 4f49 000d     5O..;O..SO..IO..
   d82ec:	4f37 000d 005a 2b25 3330 3a64 3025 7532     7O..Z.%+03d:%02u
   d82fc:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d830c:	5325 7a25 6100 6373 6974 656d 6c00 006e     %S%z.asctime.ln.
   d831c:	6e66 6300 646f 0065 6564 6174 6c69 0d00     fn.code.detail..
   d832c:	000a 3025 3031 2075 5d00 0020 6425 2c00     ..%010u .] .%d.,
   d833c:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   d834c:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   d835c:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d836c:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d837c:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d838c:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d839c:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d83ac:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d83bc:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d83cc:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
   d83dc:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
   d83ec:	0072 6170 696e 0063 6c61 006c               r.panic.all.

000d83f8 <_ZTVN5spark13EthernetClassE>:
	...
   d8400:	582f 000d 5825 000d 581b 000d 5811 000d     /X..%X...X...X..
   d8410:	5805 000d 57f9 000d 57ed 000d 57e5 000d     .X...W...W...W..
   d8420:	57db 000d 57d1 000d 48ed 000d               .W...W...H..

000d842c <__sf_fake_stdin>:
	...

000d844c <__sf_fake_stdout>:
	...

000d846c <__sf_fake_stderr>:
	...
   d848c:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000d8498 <fpi.5344>:
   d8498:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d84a8:	0000 0000                                   ....

000d84ac <fpinan.5380>:
   d84ac:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   d84bc:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   d84cc:	0000 0000                                   ....

000d84d0 <tinytens>:
   d84d0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d84e0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d84f0:	6f43 64ac 0628 1168                         Co.d(.h.

000d84f8 <__mprec_tens>:
   d84f8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d8508:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d8518:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d8528:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d8538:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d8548:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d8558:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d8568:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d8578:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d8588:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d8598:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d85a8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d85b8:	9db4 79d9 7843 44ea                         ...yCx.D

000d85c0 <__mprec_bigtens>:
   d85c0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d85d0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d85e0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d85e8 <p05.5387>:
   d85e8:	0005 0000 0019 0000 007d 0000               ........}...

000d85f4 <link_const_variable_data_end>:
   d85f4:	000d40e9 	.word	0x000d40e9
   d85f8:	000d450d 	.word	0x000d450d
   d85fc:	000d49b9 	.word	0x000d49b9
   d8600:	000d4a35 	.word	0x000d4a35
   d8604:	000d4b5d 	.word	0x000d4b5d
   d8608:	000d5565 	.word	0x000d5565
   d860c:	000d5581 	.word	0x000d5581
   d8610:	000d5595 	.word	0x000d5595
   d8614:	000d56f5 	.word	0x000d56f5
   d8618:	000d57b9 	.word	0x000d57b9
   d861c:	000d5839 	.word	0x000d5839
   d8620:	000d584d 	.word	0x000d584d
   d8624:	000d58a5 	.word	0x000d58a5
   d8628:	000d5929 	.word	0x000d5929
   d862c:	000d59ed 	.word	0x000d59ed
   d8630:	000d5ab1 	.word	0x000d5ab1

000d8634 <link_constructors_end>:
	...
